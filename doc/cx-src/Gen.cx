
<link type="..." href="..." anchor="..."package;

import neko.io.File;
import neko.io.FileOutput;
import haxe.io.Bytes;
import Types;

class Gen {
	private static inline function ptrace(s:String) {
		neko.Lib.print(s + "\n");
	}
	
	public static var froot:String = "/home/luca/Projects/docs/doc";
	
	//-----------------------------------------------------
	
	static private function __fpckgloc(pckg:XPackage) {
		if (pckg == null) return "";
		return __fpckgloc(pckg.parent) + "/" + pckg.name;
	}
	static public function PACKAGE_LOC(pckg:XPackage, ?root:String = ".") {
		if (pckg == null) return e404_LOC(root);
		return root + "/pckg" + __fpckgloc(pckg);
	}
	
	static public function CLASS_LOC  (cls:XClass,    ?root:String = ".") {
		if (cls == null) return e404_LOC(root);
		return PACKAGE_LOC(cls.pckg, root) + "/" + cls.linkName();
	}
	static public function TUT_LOC    (tut:XExample,  ?root:String = ".") {
		if (tut == null) return e404_LOC(root);
		return root + "/tut/" + tut.name;
	}
	static public function DOC_LOC    (tut:XExample,  ?root:String = ".") {
		if (tut == null) return e404_LOC(root);
		return root + "/docs/" + tut.name;
	}
	static public function SWF_LOC    (swf:XExample,  ?root:String = ".") {
		if (swf == null) return e404_LOC(root);
		return root + "/swf/" + swf.name;
	}
	static public function EXAMPLE_LOC(ex:XExample,   ?root:String = ".") {
		if (ex == null) return e404_LOC(root);
		return root + "/ex/" + ex.name;
	}
	
	static public function INDEX_LOC(?root:String = ".") return root + "/index"
	static public function e404_LOC(?root:String = ".") return root + "/e404"
	static public function CONTRIB_LOC(?root:String = ".") return root + "/donators"
	
	//-----------------------------------------------------
	
	static public function ROOT_CLASS(cls:XClass) {
		var ret = "";
		for (i in 0...cls.pdepth) { if (i != 0) ret += "/";  ret += ".."; }
		return ret;
	}
	static public function ROOT_PACKAGE(cls:XPackage) {
		var ret = "";
		for (i in 0...cls.pdepth) { if (i != 0) ret += "/";  ret += ".."; }
		return ret;
	}
	static public function ROOT_TUT(tut:XExample) return ".."
	static public function ROOT_DOC(tut:XExample) return ".."
	static public function ROOT_SWF(tut:XExample) return ".."
	static public function ROOT_EXAMPLE(tut:XExample) return ".."
	
	//-----------------------------------------------------
	
	static public function INDEX_LINK(root:String,?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + INDEX_LOC(root) + '.html">' + "Index" + '</a>';
	}
	static public function FORUM_LINK(root:String,?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="http://deltaluca.me.uk/forum/">' + "Forums" + '</a>';
	}
	static public function PROJECT_LINK(?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + "https://github.com/deltaluca/nape" + '">' + "Project Page" + '</a>';
	}
	
	static public function TYPE_LINK(cls:XType, root:String, ?ext:String = "") {
		if (cls == null) return e404_LOC(root);
		
		if (cls.ref == null)  {
			if (cls.allnull) {
				return '<font class="typecol">' + cls.getName() + '</font>';
			} else {
				var exts = (if (ext.length > 0) (ext + " ") else "");
				var ret = '<font class="typecol">' + cls.name + '</font>';
				if (cls.mixgen) ret += "(" else ret += "&lt;";
				ret += Gen.genCommaList(cls.generic,
					function (i) {
						return TYPE_LINK(cls.generic[i], root, ext);
					}
				);
				if (cls.mixgen) ret += ")" else ret += "&gt;";
				return ret;
			}
		} else {
			if (cls.allnull) {
				return TYPE_LINK_FORCE(cls.ref, root, ext);
			}else {
				var exts = (if (ext.length > 0) (ext + " ") else "");
				var ret = '<a ' + exts + 'href="' + CLASS_LOC(cls.ref, root) + '.html">' + cls.name + '</a>';
				if (cls.mixgen) ret += "(" else ret += "&lt;";
				ret += Gen.genCommaList(cls.generic,
					function (i) {
						return TYPE_LINK(cls.generic[i], root, ext);
					}
				);
				if (cls.mixgen) ret += ")" else ret += "&gt;";
				return ret;
			}
		}
	}
	static public function TYPE_LINK_FORCE(cls:XClass, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + CLASS_LOC(cls, root) + '.html">' + cls.getName() + '</a>';
	}
	
	static private function __pckglink(pck:XPackage, root:String, ext:String) {
		if (pck == null) return "";
		var ret = "";
		if(pck.parent!=null) 
			ret += __pckglink(pck.parent, root, ext) + ".";
		ret += '<a ' + (if (ext.length > 0) (ext + " ") else "") + 'href="' + PACKAGE_LOC(pck, root) + '.html">' + pck.name + '</a>';
		return ret;
	}
	static public function PACKAGE_LINK(pck:XPackage, root:String, ?ext:String = "") {
		return __pckglink(pck, root, ext);
	}
	static public function PACKAGE_PAR_LINK(pck:XPackage, root:String, ?ext:String = "") {
		if (pck.parent == null) return pck.name;
		else return __pckglink(pck.parent, root, ext) + "." + pck.name;
	}
	static public function PACKAGE_LINK_SHORT(pck:XPackage, root:String, ?ext:String = "") {
		return '<a ' + (if (ext.length > 0) (ext + " ") else "") + 'href="' + PACKAGE_LOC(pck, root) + '.html">' + pck.name + '</a>';
	}
	
	static public function RELATIVE_LINK(anch:String,nam:String) {
		return '<a href="#' + anch + '">' + nam + '</a>';
	}
	
	static public function TYPE_ANCHOR_LINK(cls:XType, anch:String, name:String, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + CLASS_LOC(cls.ref, root) + '.html#'+anch+'">' + name + '</a>';
	}
	
	static public function DOC_LINK(tut:XExample, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + DOC_LOC(tut, root) + '.html">' + tut.name + '</a>';
	}
	static public function TUT_LINK(tut:XExample, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + TUT_LOC(tut, root) + '.html">' + tut.name + '</a>';
	}
	static public function SWF_LINK(tut:XExample, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + SWF_LOC(tut, root) + '.html">' + tut.name + '</a>';
	}
	static public function EXAMPLE_LINK(tut:XExample, root:String, ?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + EXAMPLE_LOC(tut, root) + '.html">' + tut.name + '</a>';
	}

	static public function DONATE_LINK() {
		return '<a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=529X57YZ637LW"><img src="https://www.paypal.com/en_GB/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="Donate"/></a>';
	}
	
	static public function CONTRIB_LINK(root:String,?ext:String = "") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + CONTRIB_LOC(root) + '.html">' + "Donators" + '</a>';
	}

	//-----------------------------------------------------
	
	static public var ident:String = "";
	static public inline function BEG_(type:String, cls:String, ext:String) {
		ident += "   ";
		return '<' + type + (if (cls.length != 0) ' class="' + cls + '"' else '') + (if(ext.length!=0) ' '+ext else '') + '>\n'+ident;
	}
	static public inline function END_(type:String) {
		ident = ident.substr(3, ident.length);
		return '</' + type + '>\n' + ident;
	}
		
	//-----------------------------------------------------
	
	static public inline function BEG_DIV  (?cls:String = "", ?ext:String = "") { return BEG_('div',   cls, ext); }
	static public inline function BEG_TABLE(?cls:String = "", ?ext:String = "") { return BEG_('table', cls, ext); }
	static public inline function BEG_TR   (?cls:String = "", ?ext:String = "") { return BEG_('tr',    cls, ext); }
	static public inline function BEG_TD   (?cls:String = "", ?ext:String = "") { return BEG_('td',    cls, ext); }
	static public inline function BEG_FONT (?cls:String = "", ?ext:String = "") { return BEG_('font',  cls, ext); }
	static public inline function BEG_SPAN (?cls:String = "", ?ext:String = "") { return BEG_('span',  cls, ext); }
	
	static public inline function END_DIV  () { return END_('div');   }
	static public inline function END_TABLE() { return END_('table'); }
	static public inline function END_TR   () { return END_('tr');    }
	static public inline function END_TD   () { return END_('td');    }
	static public inline function END_FONT () { return END_('font');  }
	static public inline function END_SPAN () { return END_('span');  }
	
	static public inline function NL() { return '<br/>'; }
	static public inline function HR() { return '<hr/>'; }
	
	static public inline function ANCHOR(n:String) { return '<a name="' + n + '"/>'; }
	
	//-----------------------------------------------------
	
	static public function genInheritance(cls:XClass, root:String) {
		if (cls.supertype != null) {
			var sup = cls.supertype;
			var ret = " <img src=\""+root+"/inherit-arrow.gif\" alt=\"->\"/> " + TYPE_LINK(sup, root);
			if (sup.ref == null) return ret;
			return ret + genInheritance(sup.ref, root);
		}else return "";
	}
	
	//-----------------------------------------------------
	
	public static inline function THROW(root:String) {
		return '<img class="imginline" src = "'+root+'/throw.gif" alt="X"/>';
	}
	
	static var swfcnt = 0;
	public static function genXDesc(desc:XDescription, root:String) {
		var ret = "";
		if (desc == null) return ret;
		
		for (d in desc.desc) {
			switch(d.type) {
				case "anch":
					var anc:XAnch = cast d;
					ret += '<a name="'+anc.name+'"/>';
				case "bull":
					ret += "‚óè ";
				case "tab":
					ret += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
				case "hr":
					ret += "<hr/>";
				case "html":
					var hm:XHTML = cast d;
					ret += hm.html;
				case "indent":
					var ide:XIndent = cast d;
					ret += BEG_DIV("indent") + genXDesc(ide.html, root) + END_DIV();
				case "text": 
					var txt:XText = cast d;
					if(txt.size.length>0)
						ret += BEG_SPAN(txt.size);
					ret += txt.html;
					if(txt.size.length>0)
						ret += END_SPAN();
				case "code":
					var cde:XCode = cast d;
					if (cde.inlin) ret += BEG_SPAN("code");
					else           ret += BEG_DIV("code");
					
					ret += '<code class="prettyprint codes">';
						if (cde.fref.length==0)
							ret += cde.incode;
						else {
							var f = File.getContent(cde.fref);
							var i = 0;
							while (i < f.length) {
								if (f.charAt(i) == '\n') {
									f = f.substr(0, i) + '<br>' + f.substr(i + 1);
									i += 3;
								}else i++;
							}
							ret += f;
						}
					ret += '</code>';
					
					if (cde.inlin) ret += END_SPAN();
					else           ret += END_DIV();
				case "link":
					var lin:XLink = cast d;
					var dst = "";
					var anch = "";
					if (lin.anchor.length != 0) anch = "#" + lin.anchor;
					switch(lin.targ) {
						case "class":    dst = '<a href="' + CLASS_LOC(lin.cls, root) + '.html' + anch + '">';
						case "package":  dst = '<a href="' + PACKAGE_LOC(lin.pckg, root) + '.html' + anch + '">';
						case "outside":  dst = '<a href="' + lin.href + '">';
						case "relative": dst = '<a href="' + anch + '">';
						case "swf":      dst = '<a href="' + SWF_LOC(lin.exam, root) + '.html' + anch + '">';
						case "tutorial": dst = '<a href="' + TUT_LOC(lin.exam, root) + '.html' + anch + '">';
						case "example":  dst = '<a href="' + EXAMPLE_LOC(lin.exam, root) + '.html' + anch + '">';
					}
					dst += genXDesc(lin.name, root) + '</a>';
					ret += dst;
				case "swf":
					var swf:XSwf = cast d;
					
					var style = 'style="width: ' + swf.width + 'px; height: ' + swf.height + 'px;"';

					ret += BEG_DIV(if(swf.centre) "swfcontentcentre" else "swfcontent",style);
					ret += '<object width="'+swf.width+'" height="'+swf.height+'">';
						ret += '<param name="src" value="'+swf.swf+'">';
						ret += '<embed src="'+swf.swf+'" width="'+swf.width+'" height="'+swf.height+'">';
						ret += '</embed>';
					ret += '</object>';
					
					ret += END_DIV();
					
					swfcnt++;
				case "throw":
					ret += Gen.THROW(root);
					
				case "img":
					var img:XImg = cast d;
					
					if(!img.inlin)
						ret += BEG_DIV("imgcontent",'style="width: '+img.width+'px; height: '+img.height+'px;"');
					ret += '<img ';
						if (img.inlin && img.cls.length > 0) ret += 'class="' + img.cls + ' imginline" ';
						else if (img.inlin) ret += 'class="imginline" ';
						else if (img.cls.length > 0) ret += 'class="' + img.cls + '" ';
						ret += 'src = "' + img.img + '" alt = "image here! width="' + img.width + '" height="' + img.height + '"/>';
					if(!img.inlin)
						ret += END_DIV();
					
					swfcnt++;
				case "br":
					ret += '<br/>';
			}
		}
		return ret;
	}
	
	//-----------------------------------------------------
	
	public static function htmlHeader(name:String,root:String,?aux:Void->String=null) {
		var ret = "";
		ret += '<html>\n';
		ret += '<head>\n';
		ret += '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n';
		ret += '<meta name="language" content="en" />\n';
		ret += '<meta name="description" content="" />\n';
		ret += '<meta name="keywords" content="" />\n';
		ret += '<title>' + name +'</title>\n';
		ret += '<link rel="stylesheet" type="text/css" href="'+root+'/style.css" />\n';
		ret += '<link href="'+root+'/pretty/prettify.css" type="text/css" rel="stylesheet" />\n';
		ret += '<script type="text/javascript" src="'+root+'/pretty/prettify.js"></script>\n';
		
		ret += '<script type="text/javascript" src="'+root+'/napedoc.js"></script>\n';
		if (aux != null)
			ret += aux();
		
		ret += '</head>\n';
		return ret;
	}
	public static function bodyBegin() {
		return '<body class="glbody" onload="prettyPrint()">\n';
	}
	public static function endBodyHtml() {
		var ret = "";
		ret += '<script type="text/javascript">';
		ret += 'window.onresize();';
		ret += '</script>';
		ret += '</body>';
		ret += '</html>';
		return ret;
	}
	
	//-----------------------------------------------------
	
	public static function fEmpty(i) { return ""; }
	
	public static function genTable(root:String,nam:String,t1:String, t2:String, f1:Int->String, f2:Int->String, ?isnd:Bool=false, ?img:Bool=false) {
		var ret = "";
		ret += BEG_TABLE("doc");
			if(t1.length>0 || t2.length>0) {
				ret += BEG_TR();
					ret += BEG_TD("titlel") + END_TD();
					ret += BEG_TD("titlec") + t1 + END_TD();
					ret += BEG_TD("titler") + t2 + END_TD();
				ret += END_TR();
			}
			
			var snd = isnd;
			if (img && !(t1.length > 0 || t2.length > 0)) {
				var bgcol = if (snd) " doc_pair_1" else " doc_pair_2";
				ret += BEG_TR();
					ret += BEG_TD("inh doc_border" + bgcol); ret += END_TD();
					ret += BEG_TD("doc doc_border" + bgcol); ret += END_TD();
					ret += BEG_TD("def doc_border" + bgcol);
						ret += '<span class="nbsp">&nbsp;</span>';
					ret += END_TD();
				ret += END_TR();
				snd = !snd;
			}
			
			var i = 0; var f1str:String;
			while ((f1str=f1(i)) != null) {
				var bgcol = if (snd) " doc_pair_1" else " doc_pair_2";
				ret += BEG_TR();
					ret += BEG_TD("inh doc_border" + bgcol);
					if (img && f1str.length>0) {
						ret += '<img src="'+root+'/inheritedSummary.gif" alt="^>"/>';
					}
					ret += END_TD();
					ret += BEG_TD("doc doc_border" + bgcol);
						ret += f1str;
					ret += END_TD();
					ret += BEG_TD("def doc_border" + bgcol);
						if(f1str.length>0)
							ret += f2(i);
						else
							ret += '<span class="nbsp">&nbsp;</span>';
					ret += END_TD();
				ret += END_TR();
				snd = !snd;
				i++;
			}
			
		ret += END_TABLE();
		return ret;
	}
	public static function genTableStand < T > (root:String,lst:Array < T > , name:String, t1:String, t2:String, f1:Int->String, f2:Int->String) {
		var ret = "";
		if (lst.length == 0) return ret;
		
		ret += ANCHOR(name);
		ret += BEG_FONT("table_title") + name + END_FONT();
		ret += genTable(root,"",t1, t2,
			function (i) {
				if (i >= lst.length) return null;
				else return f1(i);
			},
			f2
		);
		
		return ret;
	}
	
	//-----------------------------------------------------
	
	public static function genHeader(name:String, type:String, fs:Array < Void->String > ) {
		var ret = "";
		ret += BEG_DIV("headtitle");
			ret += BEG_DIV("headtitlel");
				ret += BEG_FONT("headtitlefont") + name + END_FONT() + BEG_FONT("headtitlesub") + " "+type + END_FONT();
			ret += END_DIV();
			ret += BEG_DIV("headtitler");
				ret += BEG_TABLE();
					ret += BEG_TR();
						ret += BEG_TD();
							ret += BEG_FONT("headerlink");
							ret += genCommaList(fs, function(i) { return fs[i](); }, " |");
							ret += END_FONT();
						ret += END_TD();
						ret += BEG_TD("headtitler"); ret += END_TD();
					ret += END_TR();
				ret += END_TABLE();
			ret += END_DIV();
		ret += END_DIV();


		return ret;
	}
	
	public static function genHeader2(name:String, type:String, fs:Array < Void->String > ) {
		var ret = "";
		ret += BEG_DIV("donation");
			ret += BEG_DIV("listtitlel");
				ret += DONATE_LINK()+
				      BEG_FONT("dontext")
					       + "Donating to nape helps push me to keep on making it better!"
				     + END_FONT();
			ret += END_DIV();
//		ret += END_DIV();

//		ret += BEG_DIV("listtitle");
/*			ret += BEG_DIV("listtitlel");
				ret += BEG_FONT("listtitlefont") + name + END_FONT();
			ret += END_DIV();
*/
			ret += BEG_DIV("listtitler");
				ret += BEG_TABLE();
					ret += BEG_TR();
						ret += BEG_TD();
							ret += BEG_FONT("listlink");
							ret += genCommaList(fs, function(i) { return fs[i](); }, " |");
							ret += END_FONT();
						ret += END_TD();
						ret += BEG_TD("listtitler"); ret += END_TD();
					ret += END_TR();
				ret += END_TABLE();
			ret += END_DIV();
		ret += END_DIV();

		ret += '<div id="cse" style="width: 100%;">Loading</div> <script src="http://www.google.com/jsapi" type="text/javascript"></script> <script type="text/javascript">    google.load(\'search\', \'1\', {language : \'en\'});   google.setOnLoadCallback(function() {     var customSearchControl = new google.search.CustomSearchControl(\'010226581834110003080:36dbhcqzzna\');     customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);     customSearchControl.draw(\'cse\');   }, true); </script> <link rel="stylesheet" href="http://www.google.com/cse/style/look/default.css" type="text/css" /> <style type="text/css">   .gsc-control-cse {     font-family: Arial, sans-serif;     border-color: #d0d0d0;     background-color: #d0d0d0;   }   input.gsc-input {     border-color: #666666;   }   input.gsc-search-button {     border-color: #666666;     background-color: #cccccc;   }   .gsc-tabHeader.gsc-tabhInactive {     border-color: #E9E9E9;     background-color: #e9e9e9;   }   .gsc-tabHeader.gsc-tabhActive {     border-top-color: #FF9900;     border-left-color: #E9E9E9;     border-right-color: #E9E9E9;     background-color: #d0d0d0;   }   .gsc-tabsArea {     border-color: #E9E9E9;   }   .gsc-webResult.gsc-result,   .gsc-results .gsc-imageResult {     border-color: #d0d0d0;     background-color: #d0d0d0;   }   .gsc-webResult.gsc-result:hover,   .gsc-imageResult:hover {     border-color: #d0d0d0;     background-color: #d0d0d0;   }   .gs-webResult.gs-result a.gs-title:link,   .gs-webResult.gs-result a.gs-title:link b,   .gs-imageResult a.gs-title:link,   .gs-imageResult a.gs-title:link b {     color: #0000CC;   }   .gs-webResult.gs-result a.gs-title:visited,   .gs-webResult.gs-result a.gs-title:visited b,   .gs-imageResult a.gs-title:visited,   .gs-imageResult a.gs-title:visited b {     color: #0000CC;   }   .gs-webResult.gs-result a.gs-title:hover,   .gs-webResult.gs-result a.gs-title:hover b,   .gs-imageResult a.gs-title:hover,   .gs-imageResult a.gs-title:hover b {     color: #0000CC;   }   .gs-webResult.gs-result a.gs-title:active,   .gs-webResult.gs-result a.gs-title:active b,   .gs-imageResult a.gs-title:active,   .gs-imageResult a.gs-title:active b {     color: #0000CC;   }   .gsc-cursor-page {     color: #0000CC;   }   a.gsc-trailing-more-results:link {     color: #0000CC;   }   .gs-webResult .gs-snippet,   .gs-imageResult .gs-snippet {     color: #000000;   }   .gs-webResult div.gs-visibleUrl,   .gs-imageResult div.gs-visibleUrl {     color: #008000;   }   .gs-webResult div.gs-visibleUrl-short {     color: #008000;   }   .gs-webResult div.gs-visibleUrl-short {     display: none;   }   .gs-webResult div.gs-visibleUrl-long {     display: block;   }   .gsc-cursor-box {     border-color: #d0d0d0;   }   .gsc-results .gsc-cursor-box .gsc-cursor-page {     border-color: #E9E9E9;     background-color: #d0d0d0;     color: #0000CC;   }   .gsc-results .gsc-cursor-box .gsc-cursor-current-page {     border-color: #FF9900;     background-color: #d0d0d0;     color: #0000CC;   }   .gs-promotion {     border-color: #d0d0d0;     background-color: #d0d0d0;   }   .gs-promotion a.gs-title:link,   .gs-promotion a.gs-title:link *,   .gs-promotion .gs-snippet a:link {     color: #ff6666;   }   .gs-promotion a.gs-title:visited,   .gs-promotion a.gs-title:visited *,   .gs-promotion .gs-snippet a:visited {     color: #ff6666;   }   .gs-promotion a.gs-title:hover,   .gs-promotion a.gs-title:hover *,   .gs-promotion .gs-snippet a:hover {     color: #ff6666;   }   .gs-promotion a.gs-title:active,   .gs-promotion a.gs-title:active *,   .gs-promotion .gs-snippet a:active {     color: #ff6666;   }   .gs-promotion .gs-snippet,   .gs-promotion .gs-title .gs-promotion-title-right,   .gs-promotion .gs-title .gs-promotion-title-right *  {     color: #000000;   }   .gs-promotion .gs-visibleUrl,   .gs-promotion .gs-visibleUrl-short {     color: #33cc00;   } </style> ';
		return ret;
	}

	
	public static function headStand < T > (lst:Array < T > , nam:String) {
		return function() {
			if (lst.length == 0) return null;
			else return RELATIVE_LINK(nam, nam);
		}
	}
	
	//-----------------------------------------------------
	
	public static function genSeeAlso(seealso:Array < XDescription > , root:String) {
		var ret = "";
		if (seealso.length > 0) {
			ret += NL() + BEG_FONT("detailsubtitle") + "See Also" + END_FONT() + NL();
			ret += BEG_DIV("docsee");
				for (see in seealso)
					ret += genXDesc(see,root) + NL();
			ret += END_DIV();
		}
		return ret;
	}
	
	//-----------------------------------------------------
	
	public static function genCommaList < T > (list:Array < T > , f:Int->String, ?delim:String=",") {
		var ret = "";
		var fst = true;
		for(i in 0...list.length) {
			var txt = f(i);
			if (txt == null) continue;
			if (!fst) ret += delim + " ";
			ret += txt;
			fst = false;
		}
		return ret;
	}
	
	//-----------------------------------------------------
	
	public static function genHeaderInfo(fs:Array < Void->Array<String> > ) {
		var ret = "";
		ret += BEG_TABLE("title");
			for (f in fs) {
				var txt = f();
				if (txt == null) continue;
				
				ret += BEG_TR();
					ret += BEG_TD() + "<strong>" + txt[0] + "</strong>" + END_TD();
					ret += BEG_TD() + txt[1] + END_TD();
				ret += END_TR();
			}
		ret += END_TABLE();
		return ret;
	}
	
}
