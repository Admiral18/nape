package;

import neko.io.File;
import neko.io.FileOutput;
import haxe.io.Bytes;
import neko.FileSystem;

import Types;
import Gen;
import Main;

class Write {
	
	private static inline function ptrace(s:String) {
		neko.Lib.print(s + "\n");
	}
	
	//*------------------------------------------------------------------------
	
	private static function gen404(lib:XLib) {
		var root = ".";
		var ret = "";
		ret += Gen.htmlHeader("404",root);
		ret += Gen.bodyBegin();
		
		ret += Gen.genHeader2("", "", [
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		ret += Gen.genHeader("404", "", []);
		
		ret += Gen.BEG_DIV("gdoc",'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.genXDesc(lib.e404, root);
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function write404(lib:XLib) {
		var data = gen404(lib);
		var file = File.write(Gen.e404_LOC(Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------

	private static function genContrib(lib:XLib) {
		var root = ".";
		var ret = "";
		ret += Gen.htmlHeader("Donators",root);
		ret += Gen.bodyBegin();

		ret += Gen.genHeader2("","",[
			function () { return Gen.INDEX_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);

		ret += Gen.genHeader("Donators", "", []);

		ret += Gen.BEG_DIV("gdoc",'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.genXDesc(lib.contrib,root);
				ret += Gen.NL();
				
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();

		return ret;
	}
	
	private static function genIndex(lib:XLib) {
		var root = ".";
		var ret = "";
		ret += Gen.htmlHeader("Index",root);
		ret += Gen.bodyBegin();
		
		ret += Gen.genHeader2("", "", [
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		ret += Gen.genHeader("Index", "", [
			function () {
				if (lib.docs.length > 0)
					return Gen.RELATIVE_LINK("Documentation", "Documentation");
				else return null;
			},
			function () {
				if (lib.tutorials.length > 0)
					return Gen.RELATIVE_LINK("Tutorials", "Tutorials");
				else return null;
			},
			function () {
				if (lib.swfs.length > 0)
					return Gen.RELATIVE_LINK("Demos", "Demos");
				else return null;
			},
			function () {
				return Gen.RELATIVE_LINK("API", "API");
			},
		]);
		
		ret += Gen.BEG_DIV("gdoc",'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.genXDesc(lib.index, root);
				ret += Gen.NL();
				
				var pre = false;
				if (lib.docs.length > 0) {
					if (pre) ret += Gen.NL() + Gen.HR();
					pre = true;
					ret += Gen.genTableStand(root,lib.docs, "Documentation", "Doc", "",
						function (i) {
							var cls = lib.docs[i];
							return Gen.DOC_LINK(cls, root) + Gen.NL()
								 + Gen.genXDesc(cls.short, root);
						},
						Gen.fEmpty
					);
					ret += Gen.NL();
				}
				
				if (lib.tutorials.length > 0) {
					if (pre) ret += Gen.NL() + Gen.HR();
					pre = true;
					ret += Gen.genTableStand(root,lib.tutorials, "Tutorials", "Tutorial", "",
						function (i) {
							var cls = lib.tutorials[i];
							return Gen.TUT_LINK(cls, root) + Gen.NL()
								 + Gen.genXDesc(cls.short, root);
						},
						Gen.fEmpty
					);
					ret += Gen.NL();
				}
				
				if (lib.swfs.length > 0) {
					if (pre) ret += Gen.NL() + Gen.HR();
					pre = true;
					ret += Gen.genTableStand(root,lib.swfs, "Demos", "Demo", "",
						function (i) {
							var cls = lib.swfs[i];
							return Gen.SWF_LINK(cls, root) + Gen.NL()
								 + Gen.genXDesc(cls.short, root);
						},
						Gen.fEmpty
					);
					ret += Gen.NL();
				}
				
				if (pre) ret += Gen.NL() + Gen.HR();
				ret += Gen.genTableStand(root,lib.packages, "API", "Package", "",
					function(i) {
						var pck = lib.packages[i];
						return Gen.PACKAGE_LINK_SHORT(pck, root) + Gen.NL() + Gen.genXDesc(pck.short, root);
					},
					Gen.fEmpty
				);
				
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function writeContrib(lib:XLib) {
		var data = genContrib(lib);
		var file = File.write(Gen.CONTRIB_LOC(Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	public static function writeIndex(lib:XLib) {
		var data = genIndex(lib);
		var file = File.write(Gen.INDEX_LOC(Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------
	
	private static function genPackage(pck:XPackage) {
		var root = Gen.ROOT_PACKAGE(pck);
		
		var ret = Gen.htmlHeader(pck.name,root);
		ret += Gen.bodyBegin();
		
		//-----------------------------------------------------
		
		ret += Gen.genHeader2("", "", [
			function () { return Gen.INDEX_LINK(root); },
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		ret += Gen.genHeader(Gen.PACKAGE_PAR_LINK(pck,root), "package", [
			function () { return Gen.RELATIVE_LINK("Top", "Top"); },
			Gen.headStand(pck.packages, "Sub-Packages"),
			Gen.headStand(pck.classes, "Classes"),
			Gen.headStand(pck.tutorials, "Tutorials"),
			Gen.headStand(pck.demoes, "Demos")
		]);
		
		//-----------------------------------------------------
		
		ret += Gen.BEG_DIV("gdoc", 'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.ANCHOR("Top");
				ret += Gen.NL();
				ret += Gen.genXDesc(pck.long, root) + Gen.NL() + Gen.NL() + Gen.HR() + Gen.NL();
				
				var pre = false;
				if (pck.packages.length > 0) {
					pre = true;
					ret += Gen.genTableStand(root,pck.packages, "Sub-Packages", "Package", "",
						function (i) {
							var spk = pck.packages[i];
							return Gen.PACKAGE_LINK_SHORT(spk, root) + Gen.NL()
								 + Gen.genXDesc(spk.short, root);
						},
						Gen.fEmpty
					);
					ret += Gen.NL();
				}
				
				if (pck.classes.length > 0) {
					if (pre) ret += Gen.NL();
					pre = true;
					ret += Gen.genTableStand(root,pck.classes, "Classes", "Class", "",
						function (i) {
							var cls = pck.classes[i];
							return Gen.TYPE_LINK_FORCE(cls, root) + Gen.NL()
								 + Gen.genXDesc(cls.short, root);
						},
						Gen.fEmpty
					);
					ret += Gen.NL();
				}
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		
		//-----------------------------------------------------
		
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function writePackage(pck:XPackage) {
		var data = genPackage(pck);
		
		var par = if (pck.parent == null) Gen.froot else Gen.PACKAGE_LOC(pck.parent, Gen.froot);
		if (!FileSystem.exists(par)) Main.cdir(par);
		
		var file = File.write(Gen.PACKAGE_LOC(pck,Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------
	
	private static function genSeeAlso(seealso:Array < XDescription > , root:String) {
		var ret = "";
		if (seealso.length > 0) {
			ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "See Also" + Gen.END_FONT() + Gen.NL();
			ret += Gen.BEG_DIV("docsee");
				for (see in seealso)
					ret += Gen.genXDesc(see, root) + Gen.NL();
			ret += Gen.END_DIV();
		}
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	private static function genInherit<T>(nam:String,cls:XClass,root:String) {
		var ret = Gen.NL() + Gen.BEG_DIV("inherit", 'id="txt' + nam + '"');
		ret += '<a href="javascript:showNam(&quot;'+nam+'&quot;)"><img class="link" src="'+root+'/collapsed.gif" alt=">"/><font class="inherit"> Show Inherited '+nam+'</font></a>';
		ret += Gen.END_DIV();
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	static private inline function PROP_LINK(cls:XClass, root:String, name:String, ?ext:String="") {
		return '<a ' + (if(ext.length>0) (ext+" ") else "") + 'href="' + Gen.CLASS_LOC(cls, root) + '.html#'+name+'">' + name + '</a>';
	}
	private static function _prop_desc(prop:XProperty, cls:XClass, root:String) {
		var ret = "";
		if (prop.name.length == 0) return ret;
		
		if (prop.is_static) ret += Gen.BEG_FONT("keycol") + "static " + Gen.END_FONT();
		if (prop.is_inline) ret += Gen.BEG_FONT("keycol") + "inline " + Gen.END_FONT();
		if (cls == null) ret += Gen.RELATIVE_LINK(prop.name,prop.name);
		else             ret += PROP_LINK(cls, root, prop.name);
		ret += " : " + Gen.TYPE_LINK(prop.type, root);
		
		if (prop.static_value.length > 0)
			ret += " = " + prop.static_value;
		ret += Gen.NL();
		if (prop.readonly) ret += Gen.BEG_FONT("readcol") + "[read-only] " + Gen.END_FONT();
		ret += Gen.genXDesc(prop.short,root);
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	private static function PROCARG(arg:String, lib:XLib, link:Bool) {
		if (!link) return arg;
		
		var spl = arg.split(".");
		return arg;
	}
	
	private static function _method_desc(meth:XMethod, cls:XClass, root:String, ?lib:XLib = null, ?link:Bool=true) {
		var ret = "";
		if (meth.name.length == 0) return ret;
		
		if (link) ret += Gen.BEG_FONT("keycol");
		if (meth.const) ret += "const ";
		if (meth.is_static) ret += "static ";
		if (meth.is_inline) ret += "inline ";
		if (meth.is_abstract) ret += "abstract ";
		if (link) ret += Gen.END_FONT();
		if (link) {
			if (cls == null) ret += '<a href="#' + meth.name + '">';
			else             ret += '<a href="' + Gen.CLASS_LOC(cls, root) + '.html#' + meth.name + '">';
			ret += '<strong>' + meth.name + '</strong></a>(';
		}else 
			ret += "function " + meth.name + '(';
		
		ret += Gen.genCommaList(meth.args,
			function (i) {
				var arg = meth.args[i];
				var ret = "";
				if (arg.optional) ret += "?";
				ret += arg.name + ":" + ((arg.const?"const ":"")+if (link) Gen.TYPE_LINK(arg.type, root) else arg.type.getName());
				if (arg.optional && arg.default_value.length > 0) ret += "=" + PROCARG(arg.default_value, lib, link);
				return ret;
			}
		);
		ret += ")";
		if (meth.return_type != null) {
			ret += " : " + (if (link) Gen.TYPE_LINK(meth.return_type, root) else meth.return_type.getName());
		}
		
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	private static function stripNL(txt:String) {
		var ret = txt.split("\n").join("");
		ret = ret.split("\"").join("\\\"");
		ret = ret.split("\r").join("");
		return ret;
	}
	private static function auxInherit(cls:XClass,root:String) {
		var ret = "";
		ret += '<script type="text/javascript">';
		
		ret += 'function showInherit(nam) {';

			ret += 'var div = document.getElementById("indiv"+nam);';
			ret += 'if(nam=="Properties") {';
				ret += 'div.innerHTML = "';
				var props = cls.i_properties;
				
				var emp = cls.properties.length == 0;
				ret += stripNL(Gen.genTable(root,"",
					if (emp) "Property" else "",
					if (emp) "Defined By" else "",
					function (i) {
						if (i >= props.length) return null;
						return _prop_desc(props[i],props[i].parent, root);
					},
					function (i) {
						return Gen.TYPE_LINK_FORCE(props[i].parent, root);
					},
					cls.properties.length % 2 != 0,
					true
				));
				ret += '";';
			ret += '} else if (nam == "Constants") { ';
				ret += 'div.innerHTML = "';
				var props = cls.i_constants;
				
				var emp = cls.constants.length == 0;
				ret += stripNL(Gen.genTable(root,"",
					if (emp) "Property" else "",
					if (emp) "Defined By" else "",
					function (i) {
						if (i >= props.length) return null;
						return _prop_desc(props[i],props[i].parent, root);
					},
					function (i) {
						return Gen.TYPE_LINK_FORCE(props[i].parent, root);
					},
					cls.constants.length%2!=0,
					true
				));
				ret += '";';
			ret += '} else if (nam == "Methods") { ';
				ret += 'div.innerHTML = "';
				var props = cls.i_methods;
				
				var emp = cls.methods.length == 0;
				ret += stripNL(Gen.genTable(root,"",
					if (emp) "Method" else "",
					if (emp) "Defined By" else "",
					function (i) {
						if (i >= props.length) return null;
						var meth = props[i];
						var ret = "";
						if(meth.name.length>0) {
							ret += _method_desc(meth, meth.parent, root) + Gen.NL();
							ret += Gen.genXDesc(meth.short, root);
						}
						return ret;
					},
					function (i) {
						return Gen.TYPE_LINK_FORCE(props[i].parent, root);
					},
					cls.methods.length%2!=0,
					true
				));
				ret += '";';
			ret += '} else if (nam == "Statics") { ';
				ret += 'div.innerHTML = "';
				var props = cls.i_statics;
				
				var emp = cls.statics.length == 0;
				ret += stripNL(Gen.genTable(root,"",
					if (emp) "Method" else "",
					if (emp) "Defined By" else "",
					function (i) {
						if (i >= props.length) return null;
						var meth = props[i];
						var ret = "";
						if(meth.name.length>0) {
							ret += _method_desc(meth, meth.parent, root) + Gen.NL();
							ret += Gen.genXDesc(meth.short, root);
						}
						return ret;
					},
					function (i) {
						return Gen.TYPE_LINK_FORCE(props[i].parent, root);
					},
					cls.statics.length%2!=0,
					true
				));
				ret += '";';
			ret += '} else if (nam == "Abstracts") { ';
				ret += 'div.innerHTML = "';
				var props = cls.i_abstracts;
				var emp = cls.abstracts.length == 0;
				ret += stripNL(Gen.genTable(root,"",
					if (emp) "Method" else "",
					if (emp) "Defined By" else "",
					function (i) {
						if (i >= props.length) return null;
						var meth = props[i];
						var ret = "";
						if(meth.name.length>0) {
							ret += _method_desc(meth, meth.parent, root) + Gen.NL();
							ret += Gen.genXDesc(meth.short, root);
						}
						return ret;
					},
					function (i) {
						return Gen.TYPE_LINK_FORCE(props[i].parent, root);
					},
					cls.abstracts.length%2!=0,
					true
				));
				ret += '";';
			ret += '}';
		ret += '}';
		
		ret += 'function hideInherit(nam) {';
			ret += 'var div = document.getElementById("indiv"+nam);';
			ret += 'div.innerHTML = "";';
		ret += '}';
		
		ret += 'function showNam(nam) {';
			ret += 'var txt = document.getElementById("txt"+nam);';
			ret += 'txt.innerHTML = \'<a href="javascript:hideNam(&quot;\'+nam+\'&quot;)"><img class="link" src="'+root+'/expanded.gif" alt="v"/><font class="inherit"> Hide Inherited \'+nam+\'</font></a>\';';
			
			ret += 'showInherit(nam);';
		ret += '}';

		ret += 'function hideNam(nam) {';
			ret += 'var div = document.getElementById("txt"+nam);';
			ret += 'div.innerHTML = \'<a href="javascript:showNam(&quot;\'+nam+\'&quot;)"><img class="link" src="'+root+'/collapsed.gif" alt=">"/><font class="inherit"> Show Inherited \'+nam+\'</font></a>\';';
			
			ret += 'hideInherit(nam);';
		ret += '}';
		
		ret += '</script>';
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	private static function genExample(ex:XExample, root:String) {
		return Gen.genXDesc(ex.desc, root);
	}
	
	private static function genDetail(det:XDetail, root:String) {
		var ret = "";
		if (det != null) {
			ret += Gen.genXDesc(det.long, root) + Gen.NL();
			
			if(det.gets.length!= null&&det.gets.length>0) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Error on getter if:" + Gen.END_FONT() + Gen.NL();
				ret += Gen.BEG_DIV("docsee");
				for(i in det.gets) {
					ret += Gen.THROW(root)+"&nbsp;&nbsp;&nbsp;"+Gen.genXDesc(i, root)+Gen.NL();
				}
				ret += Gen.END_DIV();
			}
			if(det.sets.length!= null&&det.sets.length>0) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Error on setter if:" + Gen.END_FONT() + Gen.NL();
				ret += Gen.BEG_DIV("docsee");
				for(i in det.sets) {
					ret += Gen.THROW(root)+"&nbsp;&nbsp;&nbsp;"+Gen.genXDesc(i, root)+Gen.NL();
				}
				ret += Gen.END_DIV();
			}
			
			ret += genSeeAlso(det.seealso, root);
			for(ex in det.examples) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Example" + Gen.END_FONT() + Gen.NL();
				ret += genExample(ex, root);
			}
		}
		return ret;
	}
	
	private static function genMDetail(meth:XMethod, det:XMethDetail, root:String) {
		var ret = "";
		if (det != null) {
			
			ret += Gen.genXDesc(det.long,root) + Gen.NL();
			//if (det.params.length > 0) {
			if(meth.args.length>0 && det.params.length>0) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Parameters" + Gen.END_FONT() + Gen.NL();
				ret += Gen.BEG_DIV("docsee");
					var di = det.params.iterator();
					for (arg in meth.args) {
						var desc = di.hasNext() ? di.next() : null;
						if(desc==null) break;
						ret += "<strong>" + arg.name + "</strong> : ";
						ret += (arg.const?"const ":"") + Gen.TYPE_LINK(arg.type, root);
						var xd = desc==null ? "" : Gen.genXDesc(desc, root);
						if(xd.length>0) ret += " — " + xd;
						ret += Gen.NL();
					}
				ret += Gen.END_DIV();
			}
			if (det.return_desc != null && det.return_desc.desc.length > 0) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Returns" + Gen.END_FONT() + Gen.NL();
				ret += Gen.BEG_DIV("docsee");
					if (meth.return_type == null)
						ret += Gen.TYPE_LINK(meth.parent, root);
					else
						ret += Gen.TYPE_LINK(meth.return_type, root);
					ret += " - " + Gen.genXDesc(det.return_desc, root);
				ret += Gen.END_DIV();
			}
			if(det.throws.length!= null&&det.throws.length>0) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Error if:" + Gen.END_FONT() + Gen.NL();
				ret += Gen.BEG_DIV("docsee");
				for(i in det.throws) {
					ret += Gen.THROW(root)+"&nbsp;&nbsp;&nbsp;"+Gen.genXDesc(i, root)+Gen.NL();
				}
				ret += Gen.END_DIV();
			}
			ret += genSeeAlso(det.seealso, root);
			for(ex in det.examples) {
				ret += Gen.NL() + Gen.BEG_FONT("detailsubtitle") + "Example" + Gen.END_FONT() + Gen.NL();
				ret += genExample(ex, root);
			}
		}
		return ret;
	}
	
	//*------------------------------------------------------------------------
	
	public static function genClass(cls:XClass) {
		var root = Gen.ROOT_CLASS(cls);
		
		var ret = Gen.htmlHeader(cls.pckg.fullname + "." + cls.name, root, function () { return auxInherit(cls,root); });
		ret += Gen.bodyBegin();
		
		//-----------------------------------------------------

		ret += Gen.genHeader2("", "", [
			function () { return Gen.INDEX_LINK(root); },
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		ret += Gen.genHeader(Gen.PACKAGE_LINK(cls.pckg, root) + "." + Gen.TYPE_LINK(cls, root), "class", [
			function () { return Gen.RELATIVE_LINK("Top", "Top"); },
			function () {
				if (cls.properties.length > 0 || cls.i_properties.length > 0)
					return Gen.RELATIVE_LINK("Properties", "Properties");
				else return null;
			},
			function () {
				if (cls.constructor != null) return Gen.RELATIVE_LINK("Constructor", "Constructor");
				else return null;
			},
			function () {
				if (cls.methods.length > 0 || cls.i_methods.length > 0)
					return Gen.RELATIVE_LINK("Methods", "Methods");
				else return null;
			},
			function () {
				if (cls.statics.length > 0 || cls.i_statics.length > 0)
					return Gen.RELATIVE_LINK("Statics", "Statics");
				else return null;
			},
			function () {
				if (cls.constants.length > 0 || cls.i_constants.length > 0)
					return Gen.RELATIVE_LINK("Constants", "Constants");
				else return null;
			},
			function () {
				if (cls.abstracts.length > 0 || cls.i_abstracts.length > 0)
					return Gen.RELATIVE_LINK("Abstacts", "Abstracts");
				else return null;
			},
			function () {
				if (cls.examples.length > 0)
					return Gen.RELATIVE_LINK("Examples","Examples");
				else return null;
			}
		]);
		
		//-----------------------------------------------------
		
		ret += Gen.BEG_DIV("gdoc", 'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.ANCHOR("Top");
				ret += Gen.NL();
				
				ret += Gen.genHeaderInfo([
					function () { return ["Package", Gen.PACKAGE_LINK(cls.pckg, root)]; },
					function () { return ["Class", Gen.TYPE_LINK(cls, root)]; },
					function () { if(cls.xfile==null) return null;
						return [".hx file", Gen.genXDesc(cls.xfile, root)];
					},
					function () { 
						if (cls.usings.length == 0) return null;
						var ret = Gen.genCommaList(cls.usings,
							function (i) {
								var use = cls.usings[i];
								return Gen.TYPE_LINK(use, root);
							}
						);
						return ["Mixins", ret];
					},
					function () { 
						if (cls.imples.length == 0) return null;
						var ret = Gen.genCommaList(cls.imples,
							function (i) {
								var use = cls.imples[i];
								return Gen.TYPE_LINK(use, root);
							}
						);
						return ["Implements", ret];
					},
					function () {
						if (cls.supertype == null) return null;
						else return ["Inheritance", Gen.TYPE_LINK(cls, root) + Gen.genInheritance(cls, root)];
					},
					function () {
						if (cls.subclasses.length == 0) return null;
						var ret = Gen.genCommaList(cls.subclasses,
							function (i) {
								return Gen.TYPE_LINK_FORCE(cls.subclasses[i], root);
							}
						);
						return ["Subclasses", ret];
					}
				]) + Gen.NL();
				
				//-----------------------------------------------------
				
				ret += Gen.genXDesc(cls.long, root) + Gen.NL();
				ret += genSeeAlso(cls.seealso, root);
				ret += Gen.NL() + Gen.HR() + Gen.NL();
				
				//-----------------------------------------------------
				
				var pre = false;
				if (cls.properties.length > 0 || cls.i_properties.length > 0) {
					pre = true;
					
					ret += Gen.ANCHOR("Properties");
					ret += Gen.BEG_FONT("table_title") + "Public Properties" + Gen.END_FONT();
					
					if (cls.i_properties.length > 0)
						ret += genInherit("Properties", cls, root);
					if (cls.properties.length > 0) {
						ret += Gen.genTable(root,"Properties","Property", "Defined By",
							function (i) {
								if (i >= cls.properties.length) return null;
								var prop = cls.properties[i];
								return _prop_desc(prop, null, root);
							},
							function (i) { 
								if (cls.properties[i].name.length == 0) return "&nbsp;";
								return cls.getName();
							}
						);
					}
					ret += Gen.BEG_DIV("inherit", 'id="indivProperties"');
					ret += Gen.END_DIV();
				}
				
				if (cls.constructor!=null) {
					if (pre) ret += Gen.NL();
					pre = true;
					
					ret += Gen.ANCHOR("Constructor");
					ret += Gen.BEG_FONT("table_title") + "Constructor" + Gen.END_FONT();
					
					ret += Gen.genTable(root,"Constructor","Constructor","",
						function (i) {
							if (i > 0) return null;
							var meth = cls.constructor;
							var ret = "";
							ret += _method_desc(meth, null, root) + Gen.NL();
							ret += Gen.genXDesc(meth.short, root);
							return ret;
						},
						Gen.fEmpty
					);
				}
				
				if (cls.methods.length > 0 || cls.i_methods.length > 0) {
					if (pre) ret += Gen.NL();
					pre = true;
					
					ret += Gen.ANCHOR("Methods");
					ret += Gen.BEG_FONT("table_title") + "Public Methods" + Gen.END_FONT();
					
					if (cls.i_methods.length > 0)
						ret += genInherit("Methods", cls, root);
					if (cls.methods.length > 0) {
						ret += Gen.genTable(root,"Methods","Method", "Defined By",
							function (i) {
								if (i >= cls.methods.length) return null;
								var meth = cls.methods[i];
								var ret = "";
								ret += _method_desc(meth, null, root) + Gen.NL();
								ret += Gen.genXDesc(meth.short, root);
								return ret;
							},
							function (i) { 
								if (cls.methods[i].name.length == 0) return "&nbsp;";
								return cls.getName();
							}
						);
					}
					ret += Gen.BEG_DIV("inherit", 'id="indivMethods"');
					ret += Gen.END_DIV();
				}
				
				if (cls.statics.length > 0) {
					if (pre) ret += Gen.NL();
					pre = true;
					
					ret += Gen.ANCHOR("Statics");
					ret += Gen.BEG_FONT("table_title") + "Public Static Methods" + Gen.END_FONT();
					
					if (cls.statics.length > 0) {
						ret += Gen.genTable(root,"Statics","Method", "Defined By",
							function (i) {
								if (i >= cls.statics.length) return null;
								var meth = cls.statics[i];
								var ret = "";
								ret += _method_desc(meth, null, root) + Gen.NL();
								ret += Gen.genXDesc(meth.short, root);
								return ret;
							},
							function (i) { 
								if (cls.statics[i].name.length == 0) return "&nbsp;";
								return cls.getName();
							}
						);
					}
				}
				
				if (cls.constants.length > 0 || cls.i_constants.length > 0) {
					if (pre) ret += Gen.NL();
					pre = true;
					
					ret += Gen.ANCHOR("Constants");
					ret += Gen.BEG_FONT("table_title") + "Public Constants" + Gen.END_FONT();
					
					if (cls.i_constants.length > 0)
						ret += genInherit("Constants", cls, root);
					if (cls.constants.length > 0) {
						ret += Gen.genTable(root,"Constants","Constant", "Defined By",
							function (i) {
								if (i >= cls.constants.length) return null;
								var prop = cls.constants[i];
								return _prop_desc(prop, null, root);
							},
							function (i) { 
								if (cls.constants[i].name.length == 0) return "&nbsp;";
								return cls.getName();
							}
						);
					}
					ret += Gen.BEG_DIV("inherit", 'id="indivConstants"');
					ret += Gen.END_DIV();
				}
				
				if (cls.abstracts.length > 0 || cls.i_abstracts.length > 0) {
					if (pre) ret += Gen.NL();
					pre = true;
					
					ret += Gen.ANCHOR("Abstracts");
					ret += Gen.BEG_FONT("table_title") + "Public Abstract Methods" + Gen.END_FONT();
					
					if (cls.i_abstracts.length > 0)
						ret += genInherit("Abstracts", cls, root);
					if (cls.abstracts.length > 0) {
						ret += Gen.genTable(root,"Abstracts","Method", "Defined By",
							function (i) {
								if (i >= cls.abstracts.length) return null;
								var meth = cls.abstracts[i];
								var ret = "";
								ret += _method_desc(meth, null, root) + Gen.NL();
								ret += Gen.genXDesc(meth.short, root);
								return ret;
							},
							function (i) { 
								if (cls.abstracts[i].name.length == 0) return "&nbsp;";
								return cls.getName();
							}
						);
					}
					ret += Gen.BEG_DIV("inherit", 'id="indivAbstracts"');
					ret += Gen.END_DIV();
				}
			ret += Gen.END_DIV();
			
			if (cls.properties.length > 0) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Property Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (prop in cls.properties) {
						if (prop.name.length == 0) continue;
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR(prop.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + prop.name + " "    + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("lrpad") + Gen.BEG_FONT("detailsub")   + " property" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();
						
						ret += '<code class="prettyprint codes">';
						if (prop.readonly) ret += "readonly ";
						if (prop.is_static) ret += "static ";
						ret += "property " + prop.name + " : " + prop.type.getName();
						ret += '</code>';
						
						ret += Gen.NL() + Gen.NL();
						
						ret += genDetail(prop.detail, root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
			if(cls.constructor!=null) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Constructor Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var meth = cls.constructor;
					ret += Gen.ANCHOR(meth.name);
					
					ret += '<code class="prettyprint codes">';
					ret += _method_desc(meth, null, root, false);
					ret += '</code>';
					
					ret += Gen.NL() + Gen.NL();
					ret += genMDetail(meth,meth.detail,root);
					
					ret += Gen.NL();
				ret += Gen.END_DIV();
			}
			
			
			if (cls.methods.length > 0) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Method Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (meth in cls.methods) {
						if (meth.name.length == 0) continue;
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR(meth.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + meth.name + " "  + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("lrpad") + Gen.BEG_FONT("detailsub")   + " method" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();                        ret += Gen.END_TD();
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();

						ret += '<code class="prettyprint codes">';
						ret += _method_desc(meth, null, root, false);
						ret += '</code>';
						
						ret += Gen.NL() + Gen.NL();
						ret += genMDetail(meth,meth.detail,root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
			if (cls.statics.length > 0) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Static Method Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (meth in cls.statics) {
						if (meth.name.length == 0) continue;
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR(meth.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + meth.name + " "  + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("lpad") + Gen.BEG_FONT("detailsub")   + " static" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("rpad") + Gen.BEG_FONT("detailsub")   + " method" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();                        ret += Gen.END_TD();
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();

						ret += '<code class="prettyprint codes">';
						ret += _method_desc(meth, null, root, false);
						ret += '</code>';
						
						ret += Gen.NL() + Gen.NL();
						ret += genMDetail(meth,meth.detail,root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
			if (cls.constants.length > 0) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Constant Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (prop in cls.constants) {
						if (prop.name.length == 0) continue;
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR(prop.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + prop.name + " "    + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("lrpad") + Gen.BEG_FONT("detailsub")   + " constant" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();         
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();
						
						ret += '<code class="prettyprint codes">';
						if (prop.readonly) ret += "/*[read-only]*/";
						ret += "static inline var " + prop.name + " : " + prop.type.getName();
						ret += '</code>';
						
						ret += Gen.NL() + Gen.NL();
						
						ret += genDetail(prop.detail, root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
			if (cls.abstracts.length > 0) {
				ret += Gen.NL();
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Abstract Method Detail" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (meth in cls.abstracts) {
						if (meth.name.length == 0) continue;
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR(meth.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + meth.name + " "  + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("lpad") + Gen.BEG_FONT("detailsub")   + " abstract" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("rpad") + Gen.BEG_FONT("detailsub")   + " method" + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();                        ret += Gen.END_TD();
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();

						ret += '<code class="prettyprint codes">';
						ret += _method_desc(meth, null, root, false);
						ret += '</code>';
						
						ret += Gen.NL() + Gen.NL();
						ret += genMDetail(meth,meth.detail,root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
			if (cls.examples.length > 0) {
				ret += Gen.NL();
				ret += Gen.ANCHOR("Examples");
				ret += Gen.BEG_DIV("objtitle");
					ret += Gen.BEG_FONT("objtitlefont") + "Examples" + Gen.END_FONT();
				ret += Gen.END_DIV();
				
				ret += Gen.BEG_DIV("doc");
					var fst = true;
					for (ex in cls.examples) {
						
						if (!fst) ret += Gen.NL();
						ret += Gen.ANCHOR("Example::"+ex.name);
						ret += Gen.BEG_TABLE("compact full");
							ret += Gen.BEG_TR();
								ret += Gen.BEG_TD() + Gen.BEG_FONT("detailtitle") + ex.name + " "  + Gen.END_FONT() + Gen.END_TD();
								ret += Gen.BEG_TD("full"); if (!fst) ret += Gen.HR();                        ret += Gen.END_TD();
							ret += Gen.END_TR();
						ret += Gen.END_TABLE();

						ret += Gen.genXDesc(ex.desc, root);
						
						ret += Gen.NL();
						fst = false;
					}
				ret += Gen.END_DIV();
			}
			
		ret += Gen.END_DIV();
		
		//-----------------------------------------------------
		
		ret += Gen.endBodyHtml();
		return ret;
	}
	public static function writeClass(cls:XClass) {
		var data = genClass(cls);
		
		var par = Gen.PACKAGE_LOC(cls.pckg, Gen.froot);
		if (!FileSystem.exists(par)) Main.cdir(par);
		
		var file = File.write(Gen.CLASS_LOC(cls,Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------
	
	private static function genTutorial(cls:XExample) {
		var root = Gen.ROOT_TUT(cls);
		var name = cls.name;
		
		var ret = Gen.htmlHeader(name,root);
		ret += Gen.bodyBegin();
		
		ret += Gen.genHeader2("", "", [
			function () { return Gen.INDEX_LINK(root); },
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		var pre = "";
		if (cls.pckg != null) pre += Gen.PACKAGE_LINK(cls.pckg, root) + "/";
		ret += Gen.genHeader(pre + cls.name, "tutorial", [
			function () { return Gen.RELATIVE_LINK("Top", "Top"); },
		]);
		
		ret += Gen.BEG_DIV("gdoc", 'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.ANCHOR("Top");
				ret += Gen.genXDesc(cls.desc, root);
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function writeTutorial(tut:XExample) {
		var data = genTutorial(tut);

		var file = File.write(Gen.TUT_LOC(tut, Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------
	
	private static function genDoc(cls:XExample) {
		var root = Gen.ROOT_DOC(cls);
		var name = cls.name;
		
		var ret = Gen.htmlHeader(name,root);
		ret += Gen.bodyBegin();
		
		ret += Gen.genHeader2("", "", [
			function () { return Gen.INDEX_LINK(root); },
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		var pre = "";
		ret += Gen.genHeader(pre + cls.name, "documentation", [
			function () { return Gen.RELATIVE_LINK("Top", "Top"); },
		]);
		
		ret += Gen.BEG_DIV("gdoc", 'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.ANCHOR("Top");
				ret += Gen.genXDesc(cls.desc, root);
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function writeDoc(tut:XExample) {
		var data = genDoc(tut);
		var file = File.write(Gen.DOC_LOC(tut, Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
	
	//*------------------------------------------------------------------------
	
	private static function genSwf(cls:XExample) {
		var root = Gen.ROOT_SWF(cls);
		var name = cls.name;
		
		var ret = Gen.htmlHeader(name,root);
		ret += Gen.bodyBegin();
		
		ret += Gen.genHeader2("", "", [
			function () { return Gen.INDEX_LINK(root); },
		    function () { return Gen.CONTRIB_LINK(root); },
			function () { return Gen.FORUM_LINK(root); },
			function () { return Gen.PROJECT_LINK(); }
		]);
		
		var pre = "";
		if (cls.pckg != null) pre += Gen.PACKAGE_LINK(cls.pckg, root) + "/";
		ret += Gen.genHeader(pre+cls.name, "demo", []);
		
		ret += Gen.BEG_DIV("gdoc", 'id="main"');
			ret += Gen.BEG_DIV("doc");
				ret += Gen.genXDesc(cls.desc, root);
			ret += Gen.END_DIV();
		ret += Gen.END_DIV();
		ret += Gen.endBodyHtml();
		return ret;
	}
	
	public static function writeSwf(tut:XExample) {
		var data = genSwf(tut);
		var file = File.write(Gen.SWF_LOC(tut, Gen.froot) + ".html", false);
		var bytes = Bytes.ofString(data);
		file.writeBytes(bytes, 0, data.length);
		file.flush();
		file.close();
	}
}
