package;

import Types;

class Debug {
	
	private static inline function ptrace(s:String) {
		neko.Lib.print(s + "\n");
	}
	
	static inline var indent = "    ";
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	public static function print(lib:XLib) {
		for (pck in lib.packages) {
			print_pck(pck, lib, "");
		}
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	private static function debugProp(ps:Array<XProperty>, lib:XLib, tab:String) {
		for (p in ps) {
			ptrace(tab + ">> XProperty " + p.name + " : " + p.type.debugName());
			ptrace(tab + indent + "parent: " + p.parent.debugName());
		}
	}
	
	private static function debugMeth(ps:Array<XMethod>, lib:XLib, tab:String) {
		for (p in ps) {
			ptrace(tab + ">> XMethod " + p.name + if (p.return_type != null) ( " : " + p.return_type.debugName()) else "");
			ptrace(tab + indent +"parent: " + p.parent.debugName());
			for (a in p.args) {
				ptrace(tab + indent + ">> XArg " + a.name + " : " + a.type.debugName());
			}
		}
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	private static function print_pck(pck:XPackage, lib:XLib, tab:String) {
		ptrace(tab + ">> Package " + pck.fullname); tab += indent;
		if (pck.parent != null) ptrace(tab + "parent: " + pck.parent.fullname);
		
		for (cls in pck.classes) {
			var tab2 = tab;
			ptrace(tab2 + ">> Class " + cls.debugName()); tab2 += indent;
			ptrace(tab2 + "package: " + cls.pckg.fullname);
			if (cls.supertype != null) ptrace(tab2 + "super: " + cls.supertype.debugName());
			if (cls.usings.length > 0) {
				ptrace(tab2 + "uses:");
				for (t in cls.usings) {
					ptrace(tab2 + indent + t.debugName());
				}
			}
			if (cls.imples.length > 0) {
				ptrace(tab2 + "implements:");
				for (t in cls.imples) {
					ptrace(tab2 + indent + t.debugName());
				}
			}
			
			debugProp(cls.properties, lib, tab2);
			debugProp(cls.constants, lib, tab2);
			debugMeth(cls.methods, lib, tab2);
			debugMeth(cls.statics, lib, tab2);
			debugMeth(cls.abstracts, lib, tab2);
			if (cls.constructor != null) debugMeth([cls.constructor], lib, tab2);
			
			ptrace(tab2 + "inherited:"); tab2 += indent;
			debugProp(cls.i_properties, lib, tab2);
			debugProp(cls.i_constants, lib, tab2);
			debugMeth(cls.i_methods, lib, tab2);
			debugMeth(cls.i_statics, lib, tab2);
			debugMeth(cls.i_abstracts, lib, tab2);
		}
		
		for (pck2 in pck.packages) {
			print_pck(pck2, lib, tab);
		}
	}
	
}