package;
$(import);

import cpp.FileSystem;
import cpp.io.Path;
import cpp.Lib;
import cpp.io.File;
import cpp.io.FileInput;
import haxe.io.Bytes;
import haxe.xml.Fast;

class Main 
{	
	static function recurse(dir:String, lib:XLib) {
		dir = new Path(dir).toString();
		trace(dir);
		for (f in FileSystem.readDirectory(dir)) {
			var fp = dir + f;
			if (FileSystem.kind(fp) == kfile) {
				var cp = fp.indexOf('.');
				if (cp != -1 && fp.substr(cp + 1) == "xml") {
					Lib.print("xml: "+fp+"\n");
					Parse.parse(fp, lib);
				}else Lib.print("???: " + fp + "  " + cp + "\n");
			}else if (FileSystem.kind(fp) == kdir) {
				fp += "/";
				recurse(fp, lib);
			}
		}
	}

	public static function cdir(dir:String) {
		if(!FileSystem.exists(dir)) {
			try {
				FileSystem.createDirectory(dir);
			}catch(e:Dynamic) {
				var e1 = dir.lastIndexOf("/");
				var e2 = dir.lastIndexOf("\\");
				if(e1==-1 && e2==-1) throw "Error creating directory '"+dir+"'";
				var par = dir.substr(0,e1>e2?e1:e2);
				try {
					cdir(par);
					FileSystem.createDirectory(dir);
				}catch(e:String) {
					throw "Error creating directory '"+dir+"'";
				}
			}
		}
	}
	
	static function main() 
	{
//		try {
			var lib = new XLib();
			
			if (!FileSystem.exists(Gen.froot + "/pckg")) cdir(Gen.froot + "/pckg");
			if (!FileSystem.exists(Gen.froot + "/tut")) cdir(Gen.froot + "/tut");
			if (!FileSystem.exists(Gen.froot + "/swf")) cdir(Gen.froot + "/swf");
			if (!FileSystem.exists(Gen.froot + "/ex")) cdir(Gen.froot + "/ex");
			if (!FileSystem.exists(Gen.froot + "/docs")) cdir(Gen.froot + "/docs");
				
			var args = neko.Sys.args();
			if(args.length!=0) {
				for(a in args) {
					var fargs = a.split(",");
					for(f in fargs) {
						if(!FileSystem.exists(f)) {
							Lib.println("File :: "+f+" does not exist");
							continue;
						}
						if(FileSystem.kind(f) != kfile) {
							Lib.println("File :: "+f+" is not a file");
							continue;
						}
						Parse.parse(f, lib);	
					}
				}
			} else
				recurse("xml/", lib);
			
			Proc.process(lib);
			//Debug.print(lib);
	
			if(lib.index!=null)	{
				Lib.println("index");
				Write.writeIndex(lib);
			}

			if(lib.e404!=null) {
				Lib.println("404");
				Write.write404(lib);
			}

			if(lib.contrib!=null) {
				Lib.println("contrib");
				Write.writeContrib(lib);
			}
			
			for (doc in lib.docs) {
				Lib.println("doc >> " + doc.name);
				Write.writeDoc(doc);
			}
			
			for (tut in lib.tutorials) {
				Lib.println("tutorial >> " + tut.name);
				Write.writeTutorial(tut);
			}
			
			for (swf in lib.swfs) {
				Lib.println("demo >> " + swf.name);
				Write.writeSwf(swf);
			}
			
			for (pck in lib.all_packages) {
				Lib.println("package >> "+pck.fullname);
				Write.writePackage(pck);
			}
				
			for (cls in lib.all_classes) {
				Lib.println("class >> " + cls.getName());
				Write.writeClass(cls);
			}
			
//		}catch (e:Dynamic) {
//			Lib.print(e);
//		}
	}
}
