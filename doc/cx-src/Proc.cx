package;

import Types;

class Proc {
	
	private static inline function ptrace(s:String) {
		neko.Lib.print(s + "\n");
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	private static function doType(x:XType) {
		var n = x._name;
		var i = n.indexOf("[");
		var j = n.indexOf("(");
		if ((j != -1 && j < i) || i == -1) i = j;
		if (i == -1) {
			x.name = x._name;
		}else {
			x.name = n.substr(0, i);
			var c = n.charAt(i); var c2 = if (x.mixgen = c == "(") ")" else "]";
			j = n.lastIndexOf(c2);
			
			var sub = n.substr(i + 1, j - i - 1);
			var si = 0; var pi = 0;
			while (si < sub.length) {
				var c = sub.charAt(si);
				if (c == ",") {
					var s = sub.substr(pi, si - pi);
					var r = new XType();
					r._name = s;
					doType(r);
					x.generic.push(r);
					pi = ++si;
					continue;
				}else if (c == "(") {
					si++;
					var cnt = 1;
					while (si < sub.length) {
						var c = sub.charAt(si);
						if (c == "(") cnt++;
						else if (c == ")") cnt--;
						if (cnt == 0) break;
						si++;
					}
					si++;
					continue;
				}else if (c == "[") {
					si++;
					var cnt = 1;
					while (si < sub.length) {
						var c = sub.charAt(si);
						if (c == "[") cnt++;
						else if (c == "]") cnt--;
						if (cnt == 0) break;
						si++;
					}
					si++;
					continue;
				}
				si++;
			}
			{
				var s = sub.substr(pi, si - pi);
				var r = new XType();
				r._name = s;
				doType(r);
				x.generic.push(r);
			}
		}
	}
	
	private static function resolveType(x:XType, lib:XLib, ?fst:Bool=false) {
		if (!fst) {
			for (c in lib.all_classes) {
				if (c.name == x.name && c.generic.length == x.generic.length && x.mixgen==c.mixgen) {
					x.ref = cast(c,XClass);
				}
			}
		}
		
		x.allnull = true;
		
		for(g in x.generic) {
			resolveType(g, lib);
			if (g.ref != null || !g.allnull) x.allnull = false;
		}
		
		if (x.ref != null) {
			if (x.allnull) {
				var gi = x.ref.generic.iterator();
				for (g in x.generic) {
					var g2 = gi.next();
					if (g.name != g2.name || g.generic.length != g2.generic.length) {
						x.allnull = false;
						break;
					}
				}
			}
		}
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	private static function doProps(ps:Array<XProperty>, cls:XClass, lib:XLib) {
		for (p in ps) {
			p.parent = cls;
			p.type = new XType();
			p.type._name = p._type;
			doType(p.type);
			resolveType(p.type, lib);
			
			doDetail(p.detail,lib);
		}
	}
	private static function doMeths(ps:Array<XMethod>, cls:XClass, lib:XLib) {
		for (p in ps) {
			p.parent = cls;
			if(p._return.length>0) {
				p.return_type = new XType();
				p.return_type._name = p._return;
				doType(p.return_type);
				resolveType(p.return_type, lib);
			}
			for (a in p.args) {
				a.type = new XType();
				a.type._name = a._type;
				doType(a.type);
				resolveType(a.type, lib);
			}
			doDetail(p.detail,lib);
		}
	}
	
	private static function doDetail(d:XDetail, lib:XLib) {
		if (d == null) return; 
		
		for (ex in d._examples) {
			for (ex2 in lib.examples) {
				if (ex2.name == ex) {
					d.examples.push(ex2);
					break;
				}
			}
		}
		
		for(i in d.gets) doDesc(i,lib);
		for(i in d.sets) doDesc(i,lib);
	}
	
	private static function doDesc(d:XDescription, lib:XLib) {
		if (d == null) return;
		for (d in d.desc) {
			if (d.type == "link") {
				var x = cast(d, XLink);
				if (x.targ == "class") {
					var r = new XType();
					r._name = x.href;
					doType(r);
					resolveType(r, lib);
					x.cls = r.ref;
				}
				else if (x.targ == "package") {
					x.pckg = pck_map.get(x.href);
				}else if (x.targ == "swf") {
					for (t in lib.swfs) {
						if (t.name == x.href) {
							x.exam = t;
							break;
						}
					}
				}else if (x.targ == "example") {
					for (t in lib.examples) {
						if (t.name == x.href) {
							x.exam = t;
							break;
						}
					}
				}else if (x.targ == "tutorial") {
					for (t in lib.tutorials) {
						if (t.name == x.href) {
							x.exam = t;
							break;
						}
					}
				}
			}else if (d.type == "indent") {
				doDesc(cast(d, XIndent).html, lib);
			}
		}
	}
	
	private static function doProps2(ps:Array<XProperty>, lib:XLib) {
		for (p in ps) {
			doDesc(p.short,lib);
			if (p.detail != null) {
				var d = p.detail;
				doDesc(d.long,lib);
				for (s in d.seealso) doDesc(s, lib);
				for (e in d.examples) doDesc(e.desc, lib);
			}
		}
	}
	private static function doMeths2(ps:Array<XMethod>, lib:XLib) {
		for (p in ps) {
			doDesc(p.short,lib);
			if (p.detail != null) {
				var d = p.detail;
				doDesc(d.long,lib);
				for (s in d.seealso) doDesc(s, lib);
				for (e in d.examples) doDesc(e.desc, lib);
				doDesc(d.return_desc, lib);
				for (p in d.params) doDesc(p, lib);
				
				for(i in d.throws) doDesc(i,lib);
			}
		}
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 
	
	private static function gensin(cls:XClass, sup:XClass) {
		if (!sup.i_done) genInherit(sup);
		
		for (p in sup.properties)   cls.i_properties.push(p);
		for (p in sup.i_properties) cls.i_properties.push(p);
		
		for (p in sup.constants)   cls.i_constants.push(p);
		for (p in sup.i_constants) cls.i_constants.push(p);
		
		for (p in sup.methods)   cls.i_methods.push(p);
		for (p in sup.i_methods) cls.i_methods.push(p);
		
		for (p in sup.abstracts)   cls.i_abstracts.push(p);
		for (p in sup.i_abstracts) cls.i_abstracts.push(p);
		
		for (p in sup.statics)   cls.i_statics.push(p);
		for (p in sup.i_statics) cls.i_statics.push(p);
	}
	private static function genInherit(cls:XClass) {
		var sup = cls.supertype;
		if (sup != null && sup.ref != null) gensin(cls, sup.ref);
		for (cls2 in cls.usings) { if(cls2.ref!=null) gensin(cls, cls2.ref); }
		for (cls2 in cls.imples) { if(cls2.ref!=null) gensin(cls, cls2.ref); }
		cls.i_done = true;
	}
	
	//- - - - - - - - - - - - - - - - - - - - - - - - - - - 

	public static function temp_package(name:String) {
		var ret = new XPackage();
		var ind = name.lastIndexOf(".");
		if(ind==-1) {
			ret.name = name;
			ret._parent = "";
			return ret;
		}

		ret.name = name.substr(ind+1);
		ret._parent = name.substr(0,ind);
		ret.fullname = name;
		ret.pdepth = name.split(".").length;

		pck_map.set(name, ret);

		if(ret._parent.length>0) {
			for(pck in pck_map) {
				if(pck.fullname == ret._parent) {
					ret.parent = pck;
					break;
				}
			}
			if(ret.parent==null)
				ret.parent = temp_package(ret._parent);
		}

		return ret;
	}
	
	static var pck_map:Hash<XPackage>;
	public static function process(lib:XLib) {
		pck_map = new Hash<XPackage>();
		//resolve package names, top level packages and package parents
		for (pck in lib.all_packages) {
			if (pck._parent.length == 0) {
				lib.packages.push(pck);
				pck.fullname = pck.name;
			}else
				pck.fullname = pck._parent + "." + pck.name;
				
			pck.pdepth = pck.fullname.split(".").length;
			
			pck_map.set(pck.fullname, pck);
		}
		for (pck in lib.all_packages) {
			if(pck._parent.length>0) {
				for (pck2 in lib.all_packages) {
					if (pck2.fullname == pck._parent) {
						pck.parent = pck2;
						pck2.packages.push(pck);
						break;
					}
				}
				if(pck.parent==null) {
					neko.Lib.println("Warning: no pckage '"+pck._parent+"' found for package '"+pck.fullname+"'");
					pck.parent = temp_package(pck._parent);
				}
			}
		}
		
		var cls_map = new Hash<XClass>();
		//resolve class packages and vice versa as well as super and children + proper types
		for (cls in lib.all_classes) {
			if ((cls.pckg = pck_map.get(cls._pckg)) != null) {
				cls.pckg.classes.push(cls);
				cls.pdepth = cls.pckg.pdepth + 1;
			}else {
				neko.Lib.println("Warning: no package '"+cls._pckg+"' found for class '"+cls._name+"'");
				cls.pckg = temp_package(cls._pckg);
			}
				
			cls_map.set(cls._name, cls);
			
			doType(cls);
		}
		
		for (cls in lib.all_classes)
			resolveType(cls, lib, true);
		
		for (cls in lib.all_classes) {
			if (cls._supertype.length > 0) {
			
				cls.supertype = new XType();
				cls.supertype._name = cls._supertype;
				doType(cls.supertype);
				resolveType(cls.supertype, lib);
				
				if (cls.supertype.ref != null) { //super exists
					cls.supertype.ref.subclasses.push(cls);
				}
			}
			
			for (i in cls._imples) {
				var r = new XType();
				r._name = i;
				doType(r);
				resolveType(r, lib);
				cls.imples.push(r);
			}
			for (i in cls._usings) {
				var r = new XType();
				r._name = i;
				doType(r);
				resolveType(r, lib);
				cls.usings.push(r);
			}
			
			doProps(cls.properties,cls,lib);
			doProps(cls.constants,cls, lib);
			doMeths(cls.methods,cls, lib);
			doMeths(cls.statics,cls, lib);
			doMeths(cls.abstracts,cls, lib);
			if (cls.constructor != null)
				doMeths([cls.constructor],cls, lib);
		}
		
		for (cls in lib.all_classes) {
			genInherit(cls);
		}
		
		
		///---------
		
		doDesc(lib.e404, lib);
		doDesc(lib.index, lib);
		doDesc(lib.contrib, lib);
		
		for (pck in lib.all_packages) {
			doDesc(pck.short,lib);
			doDesc(pck.long, lib);
		}
		
		for (cls in lib.all_classes) {
			doDesc(cls.short, lib);
			doDesc(cls.long, lib);
			doProps2(cls.properties, lib);
			doProps2(cls.constants, lib);
			doMeths2(cls.methods, lib);
			doMeths2(cls.statics, lib);
			doMeths2(cls.abstracts, lib);
			
			for (tut in cls.seealso)
				doDesc(tut, lib);
				
			for (tut in cls.examples) doDesc(tut.desc, lib);
			
			if (cls.constructor != null)
				doMeths2([cls.constructor], lib);
		}
	
		for (doc in lib.docs) {
			doDesc(doc.desc, lib);
		}
		for (tut in lib.tutorials) {
			doDesc(tut.desc,lib);
		}
		for (tut in lib.swfs) {
			doDesc(tut.desc,lib);
		}
		for (tut in lib.examples) {
			doDesc(tut.desc,lib);
		}
	}
	
}
