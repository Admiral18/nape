<root>
<doc name="Overview" package="">
<short>
	Brief(ish) overview of everything in Nape.
</short>
<long>
<text class="small1">(When I say brief, this is quite long; and yet suprisingly sparse of true detail available in the api docs. This provides an ovewview of all core functionality, without turning into a full book! The only features not covered at all are Geometric utilities)</text>
<br/><br/>
<text>Nape is a 2D Rigid body physics engine, written in cross-platform HaXe and available for use in AS3 through pre-compiled .swc libraries.</text><br/>
<br/>
<text>Not only is Nape faster than engines like Box2D and more sensible with it's memory use, it's main benefit lies in it's expressive and concise API which also hides (without becoming a </text><link type="outside" href="http://en.wikipedia.org/wiki/Leaky_abstraction">leaky-abstraction</link><text>); things such as ensuring that physics entities are always woken up appropriately when they were sleeping and some modification is made, or when properties of a body change and it's physical properties, and potentially many unknown to the user properties internal to the engine need updating. This is done through the user of getter/setter properties which are largely done lazily under the hood to avoid any unnecessary, repeated computation (Aka they don't waste your time)</text><br/>
<br/>
<text>Beyond this, whilst Nape lacks some features of say Box2D (Continous collision detection is not yet implemented) It provides other features that engines like Box2D do not possess; more complex buoyancy, and a much higher-level callback system and geometric utilities</text><br/>
<br/>
<hr/>
<text class="header3">Space's</text><br/><br/>
<bullet/><text>At the base of a Nape simulation is the </text><link type="class" href="Space">Space</link><text> object which handles... well pretty much everything.</text><br/>
<code>var space = new Space(gravity : Vec2);</code><br/>
<text>The simulation is run by sequentially calling the step function:</text><br/>
<code>space.step(deltaTime : Float (seconds));</code>
<hr/>
<text class="header3">Body's</text><br/><br/>
<bullet/><text>To build up a simulation you need some rigid </text><link type="class" href="Body">Body</link><text>s: static, dynamic or kinematic</text><br/>
<code>var body = new Body(?type : BodyType = BodyType.DYNAMIC);</code><br/>
<text>Which neccessarigly must be given some physical form via Shape's, and can be added to the Space like:</text><br/>
<code>body.space = space;</code><br/>
<text class="header3">Shape's</text><br/><br/>
<bullet/><text>The possible shape types are </text><link type="class" href="Circle">Circle</link><text>'s, and </text><link type="class" href="Polygon">Polygon</link><text>'s which can represent convex polygons</text><br/>
<code>body.shapes.add(new Circle(radius : Float));</code><br/>
<text>The Polygon class has a few static factories for generated lists of Vec2's to use, in particular:</text><br/>
<code>var vertices = Polygon.box(width : Float, height : Float);</code><br/>
<text>Which will generate an Array of Vec2 representing a box centred at the origin</text><br/>
<code>var polygon = new Polygon(vertices);</code><br/>
<text>And can be added to the body directly also, without using the list functions like add</text><br/>
<code>polygon.body = body;</code><br/>

<text class="header3">Material's</text><br/><br/>
<bullet/><text>Each Shape is assigned a Material object which defines things like friction values, elasticity and density.</text><br/><br/>
<text>The </text><link type="class" href="Material">Material</link><text> class defines various pre-defined materials through static functions like Material.wood();</text><br/>

<hr/>
<text class="header3">Types of Body's</text><br/><br/>
<bullet/><text>A static body (</text><code inline="true">BodyType.STATIC</code><text>) Is one which can never be moved or modified once inside of the space, and should be used with truly static objects</text><br/>

<bullet/><text>A kinematic body (</text><code inline="true">BodyType.KINEMATIC</code><text>) Is one with which you have complete control over how it moves, and cannot be effected by other objects in the space.</text><br/>
<indent>
	<text>A very important remark to make, is that the kinematic body should in general, only be moved by modifying it's velocity. If you move a kinematic body purely by changing it's position then it will as far as the physics is concerned, not be moving at all and will not respond nicely. Think of it as teleporting short distances constantly instead of truly moving</text><br/>
</indent>

<bullet/><text>A dynamic body (</text><code inline="true">BodyType.DYNAMIC</code><text>) Is a standard body which follows the laws of physics as defined by Nape :)</text><br/>
<indent>
	<text>A very important remark to make here, is that in general you will always want the centre of mass for a dynamic body, to be the same as the position of the body (so that the local centre of mass is (0,0)). If this is not the case then you will find that your body rotates and moves quite strangely. Factories like Polygon.box(..) and Circle constructor when an offset is not defined will produce such Shapes. If you have a complex Body containing multiple Shape's then it is up to you to ensure it is aligned correctly; nape will not do this for you as it can sometimes be the case that you do 'not' want it to be aligned.</text><br/>
	<text>To align the body with it's centre of mass you can use</text>
	<code>body.align();</code>
</indent>

<hr/>
<text class="header3">Constraint's</text><br/><br/>

<bullet/><text>Beyond Body's the other main constituent of a simulation are </text><link type="class" href="Constraint">Constraint</link><text>'s which define various joints that can join bodies together in interesting ways; those which define a positional constraint able to made soft and spring like</text><br/>
<br/>
<bullet/><text>The most basic and useful is probably the </text><link type="class" href="PivotJoint">PivotJoint</link><text> constraint, which given two positions local to two bodies, will try and keep those points on the bodies locked together, with the bodies able to rotate about their new common pivot point</text><br/>
<code>var pivot = new PivotJoint(body1, body2, anchor1 : Vec2, anchor2 : Vec2);</code><br/>
<text>And constraints can be added to the Space much like bodies, with:</text>
<code>pivot.space = space;</code><br/>
<text>Constraints may also be de-activated/activated without removing from the space through the 'active' property</text><br/>
<br/>
<bullet/><text>By default, all constraints are stiff, which means any positional errors will try to be resolved rigidly. If you want an elastic behaving constraint, it suffices to set:</text><br/>
<code>constraint.stiff = false;</code><br/>
<text>With elastic properties governed by a frequency and damping pair of values (Think of a real spring to comprehend what these will mean)</text><br/>
<code>constraint.frequency = ...; constraint.damping = ...;</code>

<br/>
<text>Constraints may be given a maximum force which they may use when computing impulses, and for elastic constraints, a maximum positional error to be accounted for the in physics. Capping the force is not generally useful for stiff constraints, as the positional iterations will cause the constraint to solve positional errors regardless of if the velocity error is 0 or not. </text><br/>
<code>constraint.maxForce = ...; constraint.maxError = ...;</code><br/>
<text>Additionally, a constraint may be defined to 'break' under reaching either of these limits, with a further property defining whether upon breaking, the constraint should be removed from the space, or simply de-activated</text><br/>
<code>constraint.breakUnderForce = ...; constraint.breakUnderError = ...; constraint.removeOnBreak = ...;</code>

<hr/>
<text class="header3">Compound's</text><br/><br/>

<bullet/><text>When constructing things like ragdolls, or cars it is often useful to abstract the internal representation, and treat the entire object as a single physics object with respect to addition/removal from the space, copying and in the callback system</text><br/>
<text>This is done through the </text><link type="class" href="Compound">Compound</link><text> class which groups together various Body's and Constraint's (As well as other Compounds forming a tree) You can think of the Space itself as being a Compound with the same overall API.</text>
<code><![CDATA[var compound = new Compound();
var body = createSomeBody(); body.compound = compound;
var constraint = someConstraint(); constraint.compound = compound;

//adding the entire compound to the space, noting that the body and constraint are 'not' in the space beforehand.
compound.space = space;

//to remove a particular body from the space, you would instead remove it from the compound.
body.compound = null;

//the compound can be broken apart keeping all internal state regarding the Space intact
compound.breakApart();

//which means that to remove the constraint, we now directly remove from the space instead
constraint.space = null;
]]></code>

<hr/>
<text class="header3">Debug views</text><br/><br/>

<bullet/><text>To view the state of a simulation, you can use Nape's debug views, </text><link type="class" href="ShapeDebug">ShapeDebug</link><text> and (for flash players from 10 up to but not including 11.2) </text><link type="class" href="BitmapDebug">BuitmapDebug</link><text> which provides a much faster rendering</text><br/>
<code>var debug = new ***Debug(width : Float, height : Float, bgColor : Int);</code>
<text>In the case of the ShapeDebug, the arguments are not so important (especcialy bgColor), but the width/height are important if you are debugging a larger world and you want to enable culling to improve performance (so that only things visible are rendered)</text><br/>
<br/>
<text>The visible region is always defined by (0,0) to (width,height), but the Debug views also have a transform : </text><link type="class" href="Mat23">Mat23</link><text> property which is a transformation matrix applied to all drawing operations to permit rotation/scaling/translation of the world</text><br/>
<br/>
<text>Clearly, this is not entirely cross-platform, but through NME we can atleast make use of the ShapeDebug class. To add the debug view to the display list you would use (in flash's API)</text>
<code>addChild(debug.display);</code>
<text>With rendering controlled by methods clear(), draw() and (for BitmapDebug) flush(); A typical main loop with no added logic may look like:</text><br/>
<code><![CDATA[{
   debug.clear();
   space.step(...);
   debug.draw(space);
   debug.flush();
}]]></code>
<br/>

<hr/>
<text class="header3">Fluid shapes</text><br/><br/>

<bullet/><text>Nape provides 'solid' fluids which are defined by rigid shapes which instead of colliding provide buoyancy and drag forces with the objects they intersect.</text><br/>
<br/>
<text>This is controlled per-Shape by setting the fluidEnabled property to true, with fluid properties defined by the Shape's </text><link type="class" href="FluidProperties">FluidProperties</link><text> object.</text>
<br/>

<hr/>
<text class="header3">Filtering interactions</text><br/><br/>

<bullet/><text>There are 3 types of interaction that can occur in nape: collisions, fluid interactions, and sensor interactions.</text><br/><br/>
<text>The choice of what interaction occurs depends on: The type of Body (static-static pairs will never interact, kinematic can never collide or 'flow' with static or kinematic bodies), the properties of the Shape (unless one shape involved is fluid enabled, a fluid interaction can never occur), and more importantly the </text><link type="class" href="InteractionFilter">InteractionFilter</link><text>'s on the Shapes</text><br/><br/>

<text>The InteractionFilter provides 3 pairs of bit-vectors describing a group and mask for each interaction type.</text><br/>
<indent>
	<bullet/><text>The bit's set in the group value (default = 1), denote which 'layers' if you will, the shape exists in for that interaction type.</text><br/>
	<bullet/><text>The bit's set in the mask value (default = -1 = 0xffffffff), denote which 'layers' if you will, the shape is allowed to interact in for the specific interaction type.</text>
</indent><br/>
<text>What this amounts to is that given 2 pairs of group/value bit-vectors, the two shapes are elligble for that interaction type if</text>
<code>(shape1.group &amp; shape2.mask) != 0 &amp;&amp; (shape2.group &amp; shape1.mask) != 0</code>

<br/>

<text>Finally, to resolve any possible ambiguity, it is defined that fluid interactions have highest priority, followed by collision interactions and leaving sensory interactions in last</text><br/>

<br/>
<text>Whilst perhaps slightly more complex, this allows much more flexibility allowing you to have shapes which depending on the the other shape may interact in different ways; sometimes sensing, sometimes colliding, sometimes acting through buoyancy</text>

<br/>
<hr/>
<text class="header3">Sensor shapes</text><br/><br/>

<bullet/><text>It follows then, that to produce a 'sensor' shape, it suffices to set that shape's collisionMask to 0, so that by default it will instead sense with any viable object instead of colliding</text>

<br/>
<hr/>
<text class="header3">InteractionGroup's</text><br/><br/>

<bullet/><text>Ontop of the InteractionFilter's exists a higher-level (if less powerful) feature in </text><link type="class" href="InteractionGroup">InteractionGroup</link><text>'s.</text><br/>
<br/>
<code>var group = new InteractionGroup(?ignore = false);</code><br/>
<text>InteractionGroups are assigned to any Shape, Body or Compound (or other InteractionGroup's forming trees), such that given any two shapes, if their most recent common ancestor in the tree is an InteractionGroup with ignore=true set, the two shapes will not interact.</text><br/>
<br/>
<text>By putting a group of bodies say into an InteractionGroup with ignore=true, then assuming no other interaction groups exist to change the MRCA, those bodies will not interact, and we do not have to mess with group/mask values in the Shape's (Which I find really nice :P)</text>
<br/>

<hr/>
<text class="header3">Callback system</text><br/><br/>

<bullet/><text>Compared to say Box2D, nape's callback system is at a much higher-level; instead of getting interaction events based on single shapes, we instead classify Shapes/Bodys/Compounds as 'belonging' (think of interfaces in AS3/HaXe) to a certain </text><link type="class" href="CbType">CbType</link><text> and listen for events occuring between any two such types.</text><br/>
<br/>
<text>A near-future change will hopefully see the relaxation of this system to permit multiple CbType's per Interactor increasing modularity in user code greatly!</text><br/>
<br/>
<code>var boxtype = new CbType();
body.cbType = boxtype;</code><br/>
<text>Events are listened for by Listener objects assigned to a Space, these Listener's are given functions to be called at the 'end' of the space.step() call reporting on what has happened, meaning that things like removing bodies from the Space may be performed during the functions.</text><br/>
<text>Listener's are added like normal to the space with:</text>
<code>listener.space = space;</code>
<br/>

<text class="header3">Body events</text><br/><br/>
<bullet/><text>For singular Body's we have such events as CbEvent.WAKE and CbEvent.SLEEP; how useful these are given the abstractions hiding the need to ever really know that Body's even 'go' to sleep in nape I don't know, but they exist anyways :P</text><br/>
<code>var listener = new BodyListener(CbEvent.#, cbType, handler : BodyCallback -> Void);</code>
<br/>
<text class="small1 italic">Given the explicitness to a single Body, it is the Body which must have the CbType for these events.</text><br/>
<br/>
<text>The </text><link type="class" href="BodyCallback">BodyCallback</link><text> object contains the body associated with the callback, as well as common attributes for the Callback's like the listener which spawned the callback and the event type</text><br/>
<br/>

<text class="header3">Constraint events</text><br/><br/>
<bullet/><text>Constraints similarly have their own version of the WAKE,SLEEP events, together with the CbEvent.BREAK option which would be issued when the constraint is broken.</text><br/>
<br/>

<text class="header3">Interaction events</text><br/><br/>
<bullet/><text>The most useful part of the Callback system is for interaction events, which can occur between any viable pairing of Shape/Body/Compound that exists; producing a single event in any case. That means if you handle callbacks between two ragdolls, then you can get a single begin/end event when any part of one ragdoll starts touching the other, and when all touching parts have seperated!</text><br/>
<br/>
<text>Interaction events are split into two sub-types, Pre-events, and standard Interaction-events.</text><br/>
<br/>
<bullet/><text>Standard events</text><br/>
<indent>
	<text>Standard events are those corresponding to CbEvent.BEGIN/END/ONGOING. </text><br/>
	<text>The 'begin' event occurs in the first step of which the two Interactors began to interact.</text><br/>
	<text>The 'end' event occurs in the first step in which the two Interactors 'no longer' interact.</text><br/>
	<text>The 'ongoing' event occurs in all steps in which the two Interactors interact. (overlapping with the 'begin' event)</text><br/>
<br/>
	<text>When we use these callbacks, we speak of interaction in terms of a specific type given in the Listener constructor; so that if we listen for collision event, then even if the two Interactors are interacting (but through non-collision means) we will not get a 'begin' event until they begin to collide in some manner</text><br/>
	<code>new InteractionListener(CbEvent.#, InteractionType.#, cbType1, cbType2, handler : InteractionCallback -> Void);</code>
</indent>
<bullet/><text>Pre events</text><br/>
<indent>
	<text>Pre-events are special, in that the function supplied in the Listener, is called directly inside of the simulation step as soon as it is determined that the two interactions 'will' interact, and with details like contact points, or intersection centroids depending on interaction type. They are powerful in allowing you to have fine-grain control over whether the interaction should proceed or not depending on this information; think one-way platforms!</text><br/>
	<br/>
	<text>The associated CbEvent type is PRE, and is implict in construction</text><br/>
	<code>new PreListener(InteractionType.#, cbType1, cbType2, handler : PreCallback -> PreFlag);</code><br/>
	<text>Like with standard events, we define what type of interaction is to be handled; so that if we handle collisions, the pre listener is invoked only when the first collision interaction is about to occur; and the return flag decides on how any subsequent collision interactinos are to behave until an appropriate 'end' event could be generated</text><br/>
	<br/>
	<text>The PreListener can occur even between two Compounds as usual, but note well that the only information available to decide the fate of the interaction, is that of the first Shape-Shape pair to begin overlapping; initiating the interaction</text><br/>
	<br/>
	<text>PreListener's are also special in that they are the one place where the abstraction in nape involving sleeping can be 'leaked', given that these are a more advanced area I think this is permissable. Should you consistently return from the handler, either PreFlag.IGNORE_ONCE or PreFlag.ACCEPT_ONCE, then nape can make no assumption abuot the purity of your handler (Whether a future unrelated change may cause your handler to return a different value requiring the waking of the objects); and as such will not permit the two related to come to sleep.</text><br/>
	<br/>
	<text>If you 'know' that your handler is pure, then you can set the 'pure' property on the listener to true and allow nape to let the objects go to sleep in this situation. Even if your handler is not strictly pure, but you know the times when it's behaviour changes; you can set the listener to pure and re-assign the handler like listener.handler = listener.handler; to tell nape that it's behaviour has changed (and as such is a strictly 'new' handler) and wake up the objects when necessary.</text>
</indent>
</long>
</doc>
</root>
