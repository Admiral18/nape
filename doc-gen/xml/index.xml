<?xml version="1.0" encoding="utf-8" ?>
<data>
<index>
	<text class="header3">Current documented version:</text><br/><text>Milestone 10.1 : "r3"</text>
	<br/><br/>
	<text> For general development purposes, you should always use a debug build. Release builds should only be used when you are ready to release a final product to get that little bit of extra speed. Debug builds contain lots of error catching in the API to make sure that you aren't doing anything undefined or simply wrong, you'll save yourself a lot of headache using the debug build. </text>
	<br/><br/>
	<text> If you happen to be helping me out with some bug hunting, then I'll likely ask you to use the assert build which contains thousands of assertions throughout the internal engine for things which aren't your fault! DO NOT use these for general purpose use as they run very slowly! </text><br/><br/>
	<text class="header3">Download:</text><br/>
	<text>For Haxe you can use haxelib project nape to keep up to date</text><br/>
	<text>For AS3 users, build versions can be downloaded below:</text><br/>

	<!-- woop -->
	<html file="menu.jsphp"/>
	<!-- woop -->

	<link type="outside" href="http://deltaluca.me.uk/napenew/">Versions prior to 9.1</link>
	<br/>
	<br/>
	<text class="header3">Haxe compiler options</text><br/>
	<indent>
		<text>For </text><text class="italic">debug</text><text> builds, no additional options are required.</text><br/>
		<text>For </text><text class="italic">release</text><text> builds, specify: </text><code inline="true">-D NAPE_RELEASE_BUILD</code><br/>
		<text>For </text><text class="italic">assert</text><text> builds, specify: </text><code inline="true">-D NAPE_ASSERT -D NAPE_NO_INLINE</code><br/>
		<indent>
			<text>If working solely in Haxe you can/should use </text><code inline="true">--no-inline</code><text> instead of </text><code inline="true">-D NAPE_NO_INLINE</code><text> as well as </text><code inline="true">-debug</code><br/>
		</indent>
		<text>For creating AS3 .swcs or Haxe .swfs for use with -swf-lib you need to use my flib tool available on my github page as well as specifying the additional options: </text><code inline="true">-D swc -D flib</code><br/>
	</indent>
	<br/>
	<hr/>
	<br/>
	<text class="header3">Note on conventions.</text><br/>
	<bullet/><text>Throughout documentation I make use of the pseudo modifier 'const' (after C/C++ const modifier) on both arguments and methods to specify that the given argument will not be modified, or that the given method will not modify the object on which it is called.</text><br/>
	<br/>
	<text>For example:</text><code inline="true"><![CDATA[const function example(x:const Vec2) ]]></code>
	<text>Specifies that in calling the function example, neither the argument 'x' nor the 'this' object on which the method is called will be modified.</text>
	<br/>
	<br/>
	<bullet/><text>Along with the 'const' pseudo-modifier, I also make use of the 'Maybe' pseudo-type to specify that in the return of a method, the value may be null.</text>
	<br/>
	<br/>
	<bullet/><text>In the documentation 'CompatiblePolygon' refers to either: a Vec2List, an Array&lt;Vec2&gt;, a flash.Vector&lt;Vec2&gt; for flash9+ targets, or a GeomPoly. Whilst a Polygon Shape type is not a CompatiblePolygon; polygon::localVertices or polygon::worldVertices are CompatiblePolygon's as these are Vec2List's</text>

	<hr/>
</index>

<e404>
	<br/>
	<text>Sorry, this page does not yet exist!</text>
</e404>
</data>
