<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.phys" name="Compound" super="Interactor">
	<file>Compound.hx</file>
	<short>Compound of Bodies, Constraints and other Compounds</short>
	<description>
		<text>Compound's are a way of grouping together related Bodys and Constraints together into tree structures which act (with respect to Callbacks, and handling with Space's) as a single physical object. </text><br/><br/>
		<img file="../../../exgif/Compound.png"/>
		<text>For example if you have a complex car built with several bodies and constraints, you might store this in a Compound providing an easy way of removing/adding/copying the car around a Space as well as getting a singular callback for things like one-way platforms with complex characters. </text><br/>
		<br/>
		<text>For more information about how callbacks between all the Interactor types work, check the </text><link type="class" href="InteractionListener">InteractionListener</link><text> class</text>
	</description>
		
	<method name="copy" return="Compound" const="true">
		<description>Produce a deep* copy of this Compound</description>
		<detail>
			<description>
				<text>Copying a compound will produce in a deep copy with respect to it's children, should any constraints within the compound have dangling references to outside bodies, these references will be null in the copy.</text>
				<img file="../../../exgif/CompoundCopy.png"/>
				<text>Given the left compound tree, copying C1 would produce a full copy, whereas copying C2 would produce in the right hand side. As the constraint Co1 references a body which is not a child of C2, this refernce is set to null</text>
			</description>
		</detail>
	</method>
</class>

</data>
