<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.phys" name="CompoundList" super="List[Compound]">
	<file>Compound.hx</file>
	<description>Instance of List&lt;T&gt; for Compound types</description>
	<short>List of Compounds</short>
	
	<constructor>
		<description>Construct new CompoundList</description>
		<detail><description>Construct new CompoundList</description></detail>
	</constructor>
</class>

<class package="nape.phys" name="CompoundIterator" super="ListIterator[Compound]">
	<file>Compound.hx</file>
	<description>Instance of ListIterator&lt;T&gt; for Compound types</description>
	<short>Iterator to list of Compounds</short>
</class>

<class package="nape.phys" name="Compound" super="Interactor">
	<file>Compound.hx</file>
	<short>Compound of Bodies, Constraints and other Compounds</short>
	<description>
		<text>Compound's are a way of grouping together related Bodys and Constraints together into tree structures which act (with respect to Callbacks, and handling with Space's) as a single physical object. </text><br/><br/>
		<img file="../../../exgif/Compound.png"/>
		<text>For example if you have a complex car built with several bodies and constraints, you might store this in a Compound providing an easy way of removing/adding/copying the car around a Space as well as getting a singular callback for things like one-way platforms with complex characters. </text><br/>
		<br/>
		<text>When adding a compound to the Space all of it's constituents become part of the space also, the constituents belong to the compound and cannot be added to the Space (or removed from it) seperately. </text><br/>
		<text>Once inside the space, any new objects inserted to the compound become part of the space, and any object removed from the compound are removed from the space</text>
		<br/>
		<text>For more information about how callbacks between all the Interactor types work, check the </text><link type="class" href="InteractionListener">InteractionListener</link><text> class</text>
	</description>

	<property name="compound" type="Compound">
		<description>Parent compound</description>
		<detail>
			<description>The parent compound for this compound in the tree</description>
		</detail>
	</property>	
	<property name="compounds" type="CompoundList" readonly="true">
		<description>List of compounds</description>
		<detail>
			<description>Mutable list of this compounds direct children</description>
		</detail>
	</property>
	<property name="bodies" type="BodyList" readonly="true">
		<description>List of bodies</description>
		<detail>
			<description>Mutable list of bodies directly related to the compound</description>
		</detail>
	</property>
	<property name="constraints" type="ConstraintList" readonly="true">
		<description>List of constraints</description>
		<detail>
			<description>Mutable list of constraints directly related to the compound</description>
		</detail>
	</property>

	<property/>
	<property name="space" type="Space">
		<description>Space compound is contained in</description>
		<detail>
			<description>As with Body's this value is always defined (for utility) even if this compound is part of a larger compound which was added to the space and is readonly when this is the case.</description>
			<set><code inline="true">this.compound!=null</code><text> Only the root of the tree has a mutable space property</text></set>
		</detail>
	</property>

	<constructor>
		<description>Construct a new Compound</description>
		<detail>
			<description>
				Construct a new Compound.
			</description>
		</detail>
	</constructor>

	<method name="breakApart" return="Void">
		<description>Break compound apart in-place</description>
		<detail>
			<description>
				<text>This method will break apart the compound in-place so that all objects inside of the compound are assigned either to the space if this compound is the root, or to the parent compound otherwise.</text><br/><br/>
				<text>Apart from being more conveneniant than doing this manually, the added benefit of doing such an operation this way is that the bodies/constraints that are contained somewhere within the compound will not be removed from the space during the cause of the operation and with respect to any on-going collisions (including PreListener induced ignorance of collisions) will continue as though nothing happened.</text>
			</description>
		</detail>
	</method>
	
	<method name="copy" return="Compound" const="true">
		<description>Produce a deep* copy of this Compound</description>
		<detail>
			<description>
				<text>Copying a compound will produce in a deep copy with respect to it's children, should any constraints within the compound have dangling references to outside bodies, these references will be null in the copy.</text>
				<img file="../../../exgif/CompoundCopy.png"/>
				<text>Given the left compound tree, copying C1 would produce a full copy, whereas copying C2 would produce in the right hand side. As the constraint Co1 references a body which is not a child of C2, this refernce is set to null</text>
			</description>
		</detail>
	</method>
</class>

</data>
