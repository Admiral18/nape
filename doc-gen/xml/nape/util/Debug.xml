<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.util" name="ShapeDebug" super="Debug">
	<file>Debug.hx</file>
	<short> Debug drawer using flash graphics API</short>
	<description> Debug drawer using flash graphics API. This debug drawer produces quality alpha renderings, but is not amazingly fast</description>

	<constructor>
		<arg name="width" type="Int"/>
		<arg name="height" type="Int"/>
		<arg name="bgColor" type="Int" optional="true" default="0x333333"/>
		<description> Construct a new ShapeDebug </description>
		<detail>
			<description> Construct a new ShapeDebug with given background colour. ShapeDebug uses the background colour only to choose better colours for faded objects and so is not very important. Dimensions are used for culling operations. </description>
		</detail>
	</constructor>

	<property name="thickness" type="Float">
		<description>Line thickness</description>
		<detail>
			<description>Line thickness, default 0.1</description>
		</detail>
	</property>
</class>

<class package="nape.util" name="BitmapDebug" super="Debug">
	<file>Debug.hx</file>
	<short> Debug drawer with Alchemy opcode powered Bitmap display </short>
	<description> Debug drawer using a fixed size bitmap display, utilising alchemy opcodes for very fast (albeit low quality) rendering</description>

	<constructor>
		<arg name="width" type="Int"/>
		<arg name="height" type="Int"/>
		<arg name="bgColor" type="Int" optional="true" default="0x333333"/>
		<arg name="alpha" type="Bool" optional="true" default="false"/>
		<description>Construct a new BitmapDebug</description>
		<detail>
			<description> Construct a new BitmapDebug with fixed size rendering viewport. When alpha=false (by default as it is faster) the background colour is very important as it defines the colour which will fill the bitmap display on every call to clear() method </description>
		</detail>
	</constructor>
</class>

<class package="nape.util" name="Debug">
	<file>Debug.hx</file>
	<short> Debug drawing util superclass </short>
	<description> Superclass for nape debug drawers. </description>

	<property name="display" type="flash.display.DisplayObject">
		<description>Debug graphic</description>
		<detail>
			<description>Display object to which debug operations are rendered</description>
		</detail>
	</property>
	<property name="bgColor" type="Int">
		<description>Debug background colour</description>
		<detail>
			<description>Depending on specific Debug type the backgruodn colour may be more or less important. In the very least it helps to choose better colours when drawing faded objects such as sleeping bodies</description>
		</detail>
	</property>
	<property name="transform" type="Mat23">
		<description>Debug draw transform</description>
		<detail>
			<description>Transformation to be applied to all debug draw operations. When equal to the identity transform a faster drawing path is used in the internal routines.</description>
		</detail>
	</property>

	<property/>	

	<property name="drawCollisionArbiters" type="Bool" value="false">
		<description>Draw collision information</description>
		<detail>
			<description>If true, contact positions will be drawn.</description>
		</detail>
	</property>
	<property name="drawFluidArbiters" type="Bool" value="false">
		<description>Draw fluid interaction information</description>
		<detail>
			<description>If true, the position relating to the geometric centre of shape overlaps in fluid interactions will be drawn.</description>
		</detail>
	</property>
	<property name="drawSensorArbiters" type="Bool" value="false">
		<description>Draw sensor information</description>
		<detail>
			<description>If true, the position relating to the geometric centre of shape overlaps in fluid interactions will be drawn.</description>
		</detail>
	</property>
	
	<property name="drawBodies" type="Bool" value="true">
		<description>Draw bodies</description>
		<detail>
			<description>If true, bodies will be drawn.</description>
		</detail>
	</property>
	<property name="drawShapeDetail" type="Bool" value="false">
		<description>Draw shape detailed information</description>
		<detail>
			<description>If true, Shape bounds and centre of mass will be drawn.</description>
		</detail>
	</property>
	<property name="drawBodyDetail" type="Bool" value="false">
		<description>Draw body detailed information</description>
		<detail>
			<description>If true, Body bounds, origin and centre of mass will be drawn.</description>
		</detail>
	</property>
	
	<property name="drawConstraints" type="Bool" value="false">
		<description>Draw constraints</description>
		<detail>
			<description>If true, constraints will be drawn.</description>
		</detail>
	</property>
	<property name="drawConstraintSprings" type="Bool" value="true">
		<description>Draw constraint springs</description>
		<detail>
			<description>If true (and constraints are drawn), then springs representing positional errors will be drawn for soft constraints</description>
		</detail>
	</property>
	<property name="drawConstraintErrors" type="Bool" value="false">
		<description>Draw constraint errors</description>
		<detail>
			<description>If true (and constraints are drawn), then representation of positional errors will be drawn for stiff constraints</description>
		</detail>
	</property>

	<property/>
	<property name="cullingEnabled" type="Bool" value="false">
		<description>Perform object culling</description>
		<detail>
			<description>For the moment is not general purpose. However when calling Debug::draw() with a Space object, then only those shapes/bodies inside of the viewport defined by the transform and the width/height of the debug display will be drawn</description>
		</detail>
	</property>

	<property/>
	<property name="colour" type="Int->Int" value="null">
		<description>Colour tuning</description>
		<detail>
			<description>Optional function to be used to decide what colour shapes are to be drawn with (also what colour things like body bounding boxes should have). The input is the id of the shape/body/whatever and the output should be an RGB value</description>
		</detail>
	</property>

	<method name="clear">
		<description>Clear debug drawer</description>
		<detail>
			<description>
				Clear debug graphics
			</description>
		</detail>
	</method>
	
	<method name="draw">
		<arg name="object" type="Dynamic" const="true"/>
		<description>Draw nape object</description>
		<detail>
			<description>
				<text>Draw nape object to debug graphic.</text><br/>
				<text>object must be of type Body,Shape,Space,Arbiter,Contact,Constraint or derivative</text><br/><br/>
				<text>For the time being, only objects in a space, and shapes in a body in a space will be drawn.</text>
			</description>
			<throws>object is not a drawable type</throws>
		</detail>
	</method>

	<method name="flush">
		<description>Update debug graphic</description>
		<detail>
			<description>Commit any pending draw operations to the debug's graphic. For ShapeDebug this operation does nothing as any draw operations are committed immediately</description>
		</detail>
	</method>

	<method/>

	<method name="drawAABB">
		<arg name="aabb" type="AABB" const="true"/>
		<arg name="colour" type="Int"/>
		<description>Draw an AABB to display</description>
		<detail>
			<description>Draw the outline of the given AABB to the debug display</description>
		</detail>
	</method>
	<method name="drawCircle">
		<arg name="position" type="Vec2" const="true"/>
		<arg name="radius" type="Float"/>
		<arg name="colour" type="Int"/>
		<description>Draw a Circle to display</description>
		<detail>
			<description>Draw the outline of a circle to the debug display</description>
		</detail>
	</method>
	<method name="drawLine">
		<arg name="start" type="Vec2" const="true"/>
		<arg name="end" type="Vec2" const="true"/>
		<arg name="colour" type="Float"/>
		<description>Draw a line to display</description>
		<detail>
			<description>Draw a line to the debug display</description>
		</detail>
	</method>
	<method name="drawFilledCircle">
		<arg name="position" type="Vec2" const="true"/>
		<arg name="radius" type="Float"/>
		<arg name="colour" type="Int"/>
		<description>Draw a Circle to display</description>
		<detail>
			<description>Draw a filled circle to the debug display</description>
		</detail>
	</method>
	<method name="drawFilledTriangle">
		<arg name="p0" type="Vec2" const="true"/>
		<arg name="p1" type="Vec2" const="true"/>
		<arg name="p2" type="Vec2" const="true"/>
		<arg name="colour" type="Float"/>
		<description>Draw a triangle to display</description>
		<detail>
			<description>Draw a filled triangle to the debug display</description>
		</detail>
	</method>
	<method name="drawPolygon">
		<arg name="polygon" type="CompatiblePolygon" const="true"/>
		<arg name="colour" type="Int"/>
		<description>Draw a polygon to display</description>
		<detail>
			<description>Draw a polygon to the display as a set of line segments with given colour</description>
		</detail>
	</method>
	<method name="drawFilledPolygon">
		<arg name="polygon" type="CompatiblePolygon" const="true"/>
		<arg name="colour" type="Int"/>
		<description>Draw a filled polygon to display</description>
		<detail>
			<description>Draw a filled polygon to the display. For ShapeDebug native operations are used, for BitmapDebug the geometric utilities of GeomPoly are used to perform a possible simple and convex decomposition on the input polygon first.</description>
		</detail>
	</method>
	
	<method name="createGraphic" static="true" return="flash.display.DisplayObject">
		<arg name="body" type="Body" const="true" />
		<description>Create debug graphic for Body</description>
		<detail>
			<description>
				For flash9+ only, create a debug graphic for use with assigning to the body's graphic property.
			</description>
			<throws>body == null</throws>
		</detail>
	</method>
	
	<method static="true"/>
	<method name="version" static="true" return="String">
		<description>Get build version of library.</description>
		<detail>
			<description>
				From Milestone 5.2 onwards, added this method to be able to programaticaly determine what build someone is using ^^.
			</description>
		</detail>
	</method>
	<method name="clearObjectPools" static="true">
		<description>Clear out all public and private internal pools</description>
		<detail>
			<description>
				Should not have any general use. Kinda pointless to clear pools that are there for re-use; however may be helpful for tracking any memory leak style bugs
			</description>
		</detail>
	</method>

</class>

</data>
