<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.dynamics" name="ArbiterType">
	<file>Arbiter.hx</file>
	<short>Arbiter type identifiers</short>
	<description>Identifiers for Arbiter types</description>
	
	<property static="true" name="COLLISION" type="ArbiterType" readonly="true">
		<description>Collision arbiter type</description>
		<detail><description>Collision arbiter type</description></detail>
	</property>
	
	<property static="true" name="FLUID" type="ArbiterType" readonly="true">
		<description>Fluid arbiter type</description>
		<detail><description>Fluid arbiter type</description></detail>
	</property>
	
	<property static="true" name="SENSOR" type="ArbiterType" readonly="true">
		<description>Sensor arbiter type</description>
		<detail><description>Sensor arbiter type</description></detail>
	</property>
</class>
	
<!-- ------------------------------------------------------------------------------------------- -->
	
<class package="nape.dynamics" name="ArbiterList" super="List[Arbiter]">
	<file>Arbiter.hx</file>
	<description>Instance of List&lt;T&gt; for Arbiter types</description>
	<short>List of Arbiters</short>
	
	<constructor>
		<description>Construct new ArbiterList</description>
		<detail><description>Construct new ArbiterList</description></detail>
	</constructor>
</class>

<class package="nape.dynamics" name="ArbiterIterator" super="ListIterator[Arbiter]">
	<file>Arbiter.hx</file>
	<description>Instance of ListIterator&lt;T&gt; for Arbiter types</description>
	<short>Iterator to list of Arbiters</short>
</class>

<!-- ------------------------------------------------------------------------------------------- -->
	
<class package="nape.dynamics" name="Arbiter">
	<file>Arbiter.hx</file>
	<short>Arbiter acting between shapes</short>
	<description>Arbiter holds information regarding the interaction of two shapes</description>
	
	<property name="id" type="Int" readonly="true">
		<description>Pairwise id of shapes</description>
		<detail>
			<description>Combined id of shapes that uniquely identifies the arbiter</description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
		</detail>
	</property>
	<property name="type" type="ArbiterType" readonly="true">
		<description>Arbiter type</description>
		<detail>
			<description>Type of Arbiter, whether one holding contact information (collision type), fluid interaction information (fluid type) or no extra information at all (sensor type).</description>
		</detail>
	</property>
	<property name="state" type="PreFlag">
		<description>Arbiter state</description>
		<detail>
			<description>Arbiter state (corresponding to pre-interaction return types). This value is mutable (allowing disabling of an interaction outside of a space step() call</description>
		</detail>
	</property>
	<property name="isSleeping" type="Bool">
		<description>If arbiter is sleeping</description>
		<detail> <description>If arbiter is sleeping</description> </detail>
	</property>
	<property/>
	
	<property name="collisionArbiter" type="Maybe[CollisionArbiter]" readonly="true">
		<description>Reference to inner CollisionArbiter type</description>
		<detail><description>Use this in preference to a casting operation.</description></detail>
	</property>
	<property name="fluidArbiter" type="Maybe[FluidArbiter]" readonly="true">
		<description>Reference to inner FluidArbiter type</description>
		<detail><description>Use this in preference to a casting operation.</description></detail>
	</property>
	
	<property/>
	
	<property name="shape1" type="Shape" readonly="true">
		<description>Shape with lowest id in arbiter</description>
		<detail>
			<description>Shape with the lowest id in arbiter, or if a particle arbiter, the only shape</description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
		</detail>
	</property>
	
	<property name="shape2" type="Maybe[Shape]" readonly="true">
		<description>Shape with highest id in arbiter</description>
		<detail>
			<description>Shape with the highest id in arbiter, if it exists.</description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
		</detail>
	</property>

	<property/>
	
	<property name="body1" type="Body" readonly="true">
		<description>The parent body containing first shape</description>
		<detail>
			<description><text>The parent body containing the first shape, defined so that </text><code inline="true">shapeA.body == bodyA</code> </description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
		</detail>
	</property>
	<property name="body2" type="Body" readonly="true">
		<description>The parent body containing second shape</description>
		<detail>
			<description><text>The parent body containing the second shape, defined so that </text><code inline="true">shapeB.body == bodyB</code> </description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
		</detail>
	</property>
	
	<method name="isCollisionArbiter" return="Bool" const="true">
		<description>Whether is collision type</description>
		<detail><description>If true, then collisionArbiter is well defined, this is invariant of whether arbiter is in use or not.</description></detail>
	</method>
	<method name="isFluidArbiter" return="Bool" const="true">
		<description>Whether is fluid type</description>
		<detail><description>If true, then fluidArbiter is well defined, this is invariant of whether arbiter is in use or not.</description></detail>
	</method>
	<method name="isSensorArbiter" return="Bool" const="true">
		<description>Whether is sensor type</description>
		<detail><description>There is no subtype for sensor arbiters, so not much to say here. Is invariant of whether arbiter is in use or not.</description></detail>
	</method>
	
	<method/>
	
	<method name="totalImpulse" return="Vec3" const="true" abstract="true">
		<description>Total arbiter impulse</description>
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<arg name="freshOnly" type="Bool" optional="true" default="false"/>
		<detail>
			<description>
				<text>For sensor arbiters, the return value will always be the zero vector.</text><br/>
				<text>For fluid arbiters, the freshOnly parameter has no use.</text><br/>
			</description>
			<seealso><link type="class" href="CollisionArbiter" anchor="totalImpulse">CollisionArbiter::totalImpulse</link> </seealso>
			<seealso><link type="class" href="FluidArbiter" anchor="totalImpulse">FluidArbiter::totalImpulse</link> </seealso>
			<throws>body is non-null and not related to arbiter</throws>
		</detail>
	</method>
</class>

<!-- ------------------------------------------------------------------------------------------- -->
	
<class package="nape.dynamics" name="CollisionArbiter" super="Arbiter">
	<file>Arbiter.hx</file>
	<short>Collision type arbiter</short>
	<description>Arbiter subtype for collision interactions, provides contact information.</description>
	
	<property name="contacts" type="ContactList">
		<description>List of contacts</description>
		<detail>
			<description>List of contacts between the shapes</description>
			<get>Arbiter no longer in use - hint; dangerous to store your own references to arbiters. This list is immutable when not part of an on-going pre-interaction event handler.</get>
			<set>Arbiter is not part of an on-going pre-interaction event handler</set>
		</detail>
	</property>
	
	<property name="normal" type="Vec2">
		<description>Vec2 of contact normal*</description>
		<detail>
			<description>Vec2 corresponding to the global normal of the contact points. Immutable when arbiter is not part of an on-going pre-interaction event handler.</description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
			<set>Arbiter is not part of an on-going pre-interaction event handler</set>
		</detail>
	</property>

	<property name="radius" type="Float">
		<description>Positional-fattening</description>
		<detail>
			<description>Position iterations work on either two points, or an edge and a point. The radius describes in the first case, the sum of the circle radii or the single circle radius in the case of a circle/vertex case. In the edge-point case, the radius corresponds to the circle radius or 0 if a poly-poly interaction.</description>
			<get>Arbiter no longer in use - hint: dangerous to store your own references to arbiters</get>
			<set>Arbiter is not part of an on-going pre-interaction event handler</set>
		</detail>
	</property>
	
	<method name="normalImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<arg name="freshOnly" type="Bool" optional="true" default="false"/>
		<description> Normal contact impulses </description>
		<detail>
			<description><text>When body is null, returns the normal impulse which was applied to each body at the contact positions summed together, when body is non-null returns the actual impulse applied to the specific body.</text><br/><br/><text>If body is null then </text><code inline="true">return.z</code><text> will always be 0</text><br/><br/><text>If freshOnly is true, then only 'new' contacts will be considered; this is most appropriate in relation to determining impact strengths</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
	
	<method name="tangentImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<arg name="freshOnly" type="Bool" optional="true" default="false"/>
		<description> Tangent contact impulses </description>
		<detail>
			<description><text>When body is null, returns the tangent impulse which was applied to each body at the contact positions summed together, when body is non-null returns the actual impulse applied to the specific body.</text><br/><br/><text>If body is null then </text><code inline="true">return.z</code><text> will always be 0</text><br/><br/><text>If freshOnly is true, then only 'new' contacts will be considered; this is most appropriate in relation to determining impact strengths</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
	
	<method name="rollingImpulse" const="true" return="Float">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<arg name="freshOnly" type="Bool" optional="true" default="false"/>
		<description> Rolling contact impulses </description>
		<detail>
			<description><text>When body is null, returns the rolling impulse which was applied to each body, when body is non-null returns the impulse applied to the specific body.</text><br/><br/><text>If freshOnly is true, then only 'new' contacts will be considered; this is most appropriate in relation to determining impact strengths</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
	
	<method name="totalImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<arg name="freshOnly" type="Bool" optional="true" default="false"/>
		<description> Total contact impulses </description>
		<detail>
			<description><text>When body is null, returns the total impulse which was applied to each body at the contact positions summed together, when body is non-null returns the actual impulse applied to the specific body.</text><br/><br/><text>If freshOnly is true, then only 'new' contacts will be considered; this is most appropriate in relation to determining impact strengths</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
</class>

<class package="nape.dynamics" name="FluidArbiter" super="Arbiter">
	<file>Arbiter.hx</file>
	<short>Fluid interaction type arbiter</short>
	<description>Arbiter subtype for fluid interactions, provides overlap information.</description>
	
	<property name="position" type="Vec2">
		<description>Vec2 of geometric centre of overlap</description>
		<detail>
			<description>Vec2 representing the geometric centre of the overlapping region between shapes. Immutable when arbiter is not part of an on-going pre-interaction event.</description>
			<get>Arbiter no longer in use - hint; dangerous to store your own references to arbiters</get>
			<set>Arbiter is not part of an on-going pre-interaction event.</set>
		</detail>
	</property>
	
	<property name="overlap" type="Float">
		<description>Overlap area of shapes</description>
		<detail>
			<description>The amount of overlap between the shapes in px^2</description>
			<get>Arbiter no longer in use - hint; dangerous to store your own references to arbiters</get>
			<set>Arbiter is not part of an on-going pre-interaction event.</set>
		</detail>
	</property>
	
	<method name="buoyancyImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<description> Buoyancy impulse </description>
		<detail>
			<description><text>When body is null, returns the buoyancy impulse which was applied to each body at the centre of buoyancy, when body is non-null returns the actual impulse applied to the specific body.</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
	
	<method name="dragImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<description> Fluid drag impulse </description>
		<detail>
			<description><text>When body is null, returns the fluid drag impulse which was applied to each body at the centre of buoyancy, when body is non-null returns the actual impulse applied to the specific body.</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
	
	<method name="totalImpulse" const="true" return="Vec3">
		<arg name="body" type="Body" const="true" optional="true" default="null"/>
		<description> Total fluid impulse </description>
		<detail>
			<description><text>When body is null, returns the total impulse which was applied to each body at the centre of buoyancy, when body is non-null returns the actual impulse applied to the specific body.</text></description>
			<throws>body is non-null and not related to arbiter</throws>
			<throws>arbiter no longer in use</throws>
		</detail>
	</method>
</class>
	
</data>
