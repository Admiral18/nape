<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.dynamics" name="InteractionGroupList" super="List[InteractionGroup]">
	<file>InteractionGroup.hx</file>
	<description>Instance of List&lt;T&gt; for InteractionGroup types</description>
	<short>List of InteractionGroups</short>
	
	<constructor>
		<description>Construct new InteractionGroupList</description>
		<detail><description>Construct new InteractionGroupList</description></detail>
	</constructor>
</class>

<class package="nape.dynamics" name="InteractionGroupIterator" super="ListIterator[InteractionGroup]">
	<file>InteractionGroup.hx</file>
	<description>Instance of ListIterator&lt;T&gt; for InteractionGroup types</description>
	<short>Iterator to list of InteractionGroups</short>
</class>


<class package="nape.phys" name="InteractorList" super="List[Interactor]">
	<file>Interactor.hx</file>
	<description>Instance of List&lt;T&gt; for Interactor types</description>
	<short>List of Interactors</short>
	
	<constructor>
		<description>Construct new InteractorList</description>
		<detail><description>Construct new InteractorList</description></detail>
	</constructor>
</class>

<class package="nape.phys" name="InteractorIterator" super="ListIterator[Interactor]">
	<file>Interactor.hx</file>
	<description>Instance of ListIterator&lt;T&gt; for Interactor types</description>
	<short>Iterator to list of Interactors</short>
</class>

<class package="nape.dynamics" name="InteractionGroup">
	<file>InteractionGroup.hx</file>
	<short>InteractionGroup</short>
	<description>
		<text>InteractionGroup's are another way of controlling what should collide with what, in the general case they form trees (and such property is enforced).</text><br/><br/>
		<text>Before InteractionFilter's are considered, nape will first check for the most-recent common ancestor between the two Shapes (if it exists) in the InteractionGroup tree, and if that group says they should not interact, they will be ignored.</text><br/><br/>
		<text>For the purposes of this check, should a Shape have no InteractionGroup, it will use the first InteractionGroup found whilst walking up the Interactor chain (Aka check the body, and if body's is null, check the body compound and so forth)</text><br/><br/>
		<text class="bold">Example:</text><br/>
		<img file="../../../exgif/InteractionGroup.png"/>
		<text>If we look at which InteractionGroup is used for which Shape following the above rule then the left graph is transformed into the InteractionGroup tree on the right hand side. It is immediately clear then, that the MRCA (Most-recent common ancestor) is such that:</text>
		<code><![CDATA[MRCA(S1,S3) == G1;
MRCA(S2,S3) == G2;
MRCA(S4,__) == null;]]></code><br/>
		<text>If we were to say that G1.ignore = true; G2.ignore = false; Then Shapes S1/S3 would not interact, whilst Shapes S2/S3 would (unless something else prevents them).</text><br/><br/>
		<text>The purpose of G3 here is purely to prevent S4 from binding with G2 as it would when walking up the Interactor tree should G3 not exist, as the MRCA of S4 with any of the other shapes is null, it is irrelevant the value of G3.ignore</text>
		<br/><br/>
		<text class="small1">InteractionGroup trees can be fairly expressive, but note that they are strictly less powerful than InteractionFilters which can describe more complex relations (The limitation of the InteractionGroup is not being able to have multiple groups assigned to one object which would just complicate things further especcialy when it comes to internal implementation of the MRCA function which would need to branch and become non-linear in complexity, as well as producing ambiguities as such a relaxation would be 'too' powerful)</text>
	</description>

	<property name="id" type="Int" readonly="true">
		<description>Unique id</description>
		<detail>
			<description> A unique id for each InteractionGroup object </description>
		</detail>
	</property>
	<property name="ignore" type="Bool">
		<description>Ignore flag</description>
		<detail>
			<description>When true, should two Shape's MRCA result in this group, those shapes will be ignored</description>
		</detail>
	</property>

	<property/>

	<property name="group" type="InteractionGroup">
		<description>Parent group</description>
		<detail>
			<description> The parent group for this InteractionGroup, in our example G1's parent is G2</description>
		</detail>
	</property>
	<property name="groups" type="InteractionGroupList" readonly="true">
		<description>Mutable Group list</description>
		<detail>
			<description>Mutable list of all InteractionGroup's assigned as children of this InteractionGroup</description>
		</detail>
	</property>

	<property/>

	<property name="interactors" type="InteractorList" readonly="true">
		<description>Mutable interactor list</description>
		<detail>
			<description>Mutable list of all Interactor's assigned to this InteractionGroup</description>
		</detail>
	</property>
	<property name="shapes" type="ShapeList" readonly="true">
		<description>Mutable shape list</description>
		<detail>
			<description>Mutable list of all Shape's assigned to this InteractionGroup. This is a sublist of the Interactors list</description>
		</detail>
	</property>
	<property name="bodies" type="BodyList" readonly="true">
		<description>Mutable body list</description>
		<detail>
			<description>Mutable list of all Body's assigned to this InteractionGroup. This is a sublist of the Interactors list</description>
		</detail>
	</property>
	<property name="compounds" type="CompoundList" readonly="true">
		<description>Mutable compound list</description>
		<detail>
			<description>Mutable list of all Compound's assigned to this InteractionGroup. This is a sublist of the Interactors list</description>
		</detail>
	</property>

	<constructor>
		<arg name="ignore" type="Bool" default="false" optional="true"/>
		<description>Construct new InteractionGroup </description>
		<detail>	
			<description>Construct new InteractionGroup </description>
		</detail>
	</constructor>
</class>

</data>	
