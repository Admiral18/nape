<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape" name="List[T]">
	<description><text>
		This is not a real class or interface, but is written like this to avoid mass duplication as each list type is consistent with this interface through other means.</text><br/><br/>
		<text class="small1">Note: In many cases a List type will be returned from a function internal to nape and will be marked internally as an 'immutable' List. This is documented in those cases; trying to modify (mutate) such a List will result in an error.</text><br/><br/>
		<text>Iteration over these list types should be done like:</text>
		<indent>
			<bullet/><text>haXe:</text><code><![CDATA[for(var obj in list) {}
//or through explicit use of iterator()]]></code><br/>
			<bullet/><text>AS3:</text><code><![CDATA[for(var i:int = 0; i&lt;list.length; i++) {
	var obj:T = list.at(i);
	//use obj
}
//or through use of iterator()]]></code>
		</indent>
	</description>
	<short>Pseudo interface for List types in nape</short>
	
	<property name="length" type="Int" readonly="true">
		<description> Number of elements in list </description>
		<detail>
			<description>Number of elements in list</description>
		</detail>
	</property>
	
	<method name="fromArray" static="true" return="List[T]">
		<arg name="array" type="Array[T]" const="true"/>
		<description>
			Construct List from Array type.
		</description>
		<detail>
			<description>
				Construct List from Array type.
			</description>
			<throws>Array contains non T elements.</throws>
		</detail>
	</method>
	<method name="fromVector" static="true" return="List[T]">
		<arg name="vector" type="flash.Vector[T]" const="true"/>
		<description>
			(flash9+) Construct List from Vector type.
		</description>
		<detail>
			<description>
				Construct List from Vector type for flash9+ targets.
			</description>
		</detail>
	</method>
	
	<method name="empty" inline="true" const="true" return="Bool">
		<description>
			Whether list is empty
		</description>
		<detail>
			<description>
				<text>Returns whether list is empty or not</text>
				<br/><br/>
				<text class="small1">This is usually an O(1) operation.</text>
			</description>
		</detail>
	</method>
	
	<method name="copy" inline="true" const="true" return="List[T]">
		<description> Produce a copy of the list </description>
		<detail>
			<description>
				<text>Performs a shallow copy on the list</text><br/>
				<text class="small1">(Note: If List was immutable then copied list will now be mutable, equally any restrictions placed on the original list and what can be done with it are revoked such as if old list could not have same object added twice, the copied list will allow it)</text><br/><br/>
				<text class="small1">This is an O(n) operation.</text>
			</description>
		</detail>
	</method>
	
	<method/>
	
	<method name="at" inline="true" const="true" return="T">
		<arg name="index" type="Int"/>
		<description>
			Return element at index
		</description>
		<detail>
			<description>
				<text>Returns element in list at given index</text><br/><br/>
				<text class="small1">Normally this operation due to underlying list structure would be an O(n) operation, for the purposes of speed; optimisations are in place that make sequential access in general O(1). </text>
			</description>
			
			<throws><code inline="true">index &lt; 0 || index &gt;= length</code> </throws>
		</detail>
	</method>
	
	<method name="iterator" inline="true" const="true" return="ListIterator[T]">
		<description>
			Return iterator to list.
		</description>
		<detail>
			<description>
				<text>This is a standard haXe iterator for haXe users of nape, though nothing stopping AS3 users using the iterators either. The iterator internally uses the at() operation on the list and so is subject to the same optimisation concerns</text><text class="small1">(Note: this means that performing nested iteration will only be optimised for the innermost loop)</text>
			</description>
		</detail>
	</method>
	
	<method/>
	
	<method name="push" inline="true" return="Bool">
		<arg name="obj" type="T" const="true" />
		<description>
			Push element to back of list
		</description>
		<detail>
			<description>
				<text>Pushes element to back of list, returns true if operation was successful. Lists in nape tend to be managed, and so this operation may well return false for example trying to push the same shape into a rigid body twice.</text><br/>
				<br/>
				<text class="small1">Normally this operation due to underlying list structure would be an O(n) operation, for the purpose of speed; optimisations are in place that make sequential pushing in general O(1).</text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
	
	<method name="unshift" inline="true" return="Bool">
		<arg name="obj" type="T" const="true" />
		<description>
			Push element to front of list
		</description>
		<detail>
			<description>
				<text>Pushes element to front of list, returns true if operation was successful. (*See push)</text><br/>
				<br/>
				<text class="small1">This operation is always O(1)</text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
	
	<method name="add" inline="true" return="Bool">
		<arg name="obj" type="T" const="true" />
		<description>
			Add element to list
		</description>
		<detail>
			<description>
				<text>Adds element to list returning true on success (*See push), no guarantee is made on where; normally it would be a case of adding to the front of the list but it may be in some cases that it instead adds to the back of list. The choice depends on what is more effecient at that time. </text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
	
	<method/>
	
	<method name="pop" inline="true" return="T">
		<description>
			Pop element from back of list
		</description>
		<detail>
			<description>
				<text>Pops element from back of list.</text>
				<br/><br/>
				<text class="small1">This is always an O(n) operation!</text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
	
	<method name="shift" inline="true" return="T">
		<description>
			Pop element from front of list
		</description>
		<detail>
			<description>
				<text>Pops element from front of list.</text>
				<br/><br/>
				<text class="small1">This is always an O(1) operation</text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
	
	<method name="remove" inline="true" return="Bool">
		<arg name="obj" type="T" const="true"/>
		<description> Remove given element from list </description>
		<detail>
			<description>
				<text>Removes given element from the list, returns true on success. If element exists more than once, the first occurence in list is removed. </text>
				<br/><br/>
				<text class="small1">This is always an O(n) operation</text>
			</description>
			
			<throws>List is immutable</throws>
		</detail>
	</method>
</class>

<!---------------------------------------------------------------------------------------------- -->
<!---------------------------------------------------------------------------------------------- -->

<class package="nape" name="ListIterator[T]">
	<description><text>
		This is not a real class or interface, but is written like this to avoid mass duplication as each list iterator type is consistent with this interface through other means.</text><br/><br/>
		<text>For AS3 users use of iterators should follow:</text>
		<code><![CDATA[var ite:ListIterator&lt;T&gt; = list.iterator();
while(ite.hasNext()) {
    var obj:T = ite.next();
    //use obj
}]]></code>
	</description>
	<short>Pseudo interface for ListIterator types in nape</short>
	
	<seealso><link type="class" href="List[T]">List&lt;T&gt;</link> </seealso>
	
	<method name="hasNext" inline="true" const="true" return="Bool">
		<description>Whether there are any elements left</description>
		<detail>
			<description>Returns true if there are any elements remaining in the list for iteration</description>
		</detail>
	</method>
	
	<method name="next" inline="true" return="T">
		<description>Returns next element in list</description>
		<detail>
			<description>Returns the next element in the list advancing iterator as a side-effect</description>
		</detail>
	</method>
</class>

</data>
	