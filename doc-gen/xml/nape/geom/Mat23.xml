<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.geom" name="Mat23">
	<file>Mat23.hx</file>
	<description>
		<text>2D Matrix class.</text><br/>
		<code><![CDATA[[ a b tx ]
[ c d ty ]]]></code><br/><text>NOTE: in flash, a flash.geom.Matrix has 'b' and 'c' swapped in position because Adobe are silly and inconsistent, so for conversions between them you should use the nape methods to keep things clear and avoid mistakes</text>
	</description>
	<short>
		2D Matrix class.
	</short>
	
	<property name="a" type="Float">
		<description>(1,1) entry in matrix</description>
		<detail>
			<description>(1,1) entry in matrix</description>
		</detail>
	</property>
	<property name="b" type="Float">
		<description>(1,2) entry in matrix</description>
		<detail>
			<description>(1,2) entry in matrix</description>
		</detail>
	</property>
	<property name="c" type="Float">
		<description>(2,1) entry in matrix</description>
		<detail>
			<description>(2,1) entry in matrix</description>
		</detail>
	</property>
	<property name="d" type="Float">
		<description>(2,2) entry in matrix</description>
		<detail>
			<description>(2,2) entry in matrix</description>
		</detail>
	</property>
	<property name="tx" type="Float">
		<description>(1,3) entry in matrix (x-translation)</description>
		<detail>
			<description>(1,3) entry in matrix responsible for x-translation when transforming a vector</description>
		</detail>
	</property>
	<property name="ty" type="Float">
		<description>(2,3) entry in matrix (y-translation)</description>
		<detail>
			<description>(2,3) entry in matrix responsible for y-translation when transforming a vector</description>
		</detail>
	</property>
	<property/>
	<property name="determinant" type="Float" readonly="true">
		<description> Determinant of matrix </description>
		<detail>
			<description> The determinant of the matrix corresponding to the proportional change in area that results from applying this matrix to a shape. </description>
		</detail>
	</property>
	
	<constructor>
		<arg name="a" type="Float" optional="true" default="1"/>
		<arg name="b" type="Float" optional="true" default="0"/>
		<arg name="c" type="Float" optional="true" default="0"/>
		<arg name="d" type="Float" optional="true" default="1"/>
		<arg name="tx" type="Float" optional="true" default="0"/>
		<arg name="ty" type="Float" optional="true" default="0"/>
		<description> Construct a new matrix </description>
		<detail>
			<description> Construct a new matrix. Empty arguments corresponding to identity matrix.</description>
		</detail>
	</constructor>
	
	<method name="fromMatrix" static="true" inline="true" return="Mat23">
		<arg name="m" type="flash.geom.Matrix" const="true"/>
		<description> (flash9+) Construct matrix from flash matrix. </description>
		<detail>
			<description> For flash9+ targets, construct matrix from given flash matrix.</description>
		</detail>
	</method>
	
	<method name="rotation" static="true" inline="true" return="Mat23">
		<arg name="angle" type="Float"/>
		<description> Construct rotation matrix </description>
		<detail>
			<description> Construct a rotation matrix corresponding to a rotation about the origin by angle radians counterclockwise.</description>
		</detail>
	</method>
	<method name="translation" static="true" inline="true" return="Mat23">
		<arg name="tx" type="Float"/>
		<arg name="ty" type="Float"/>
		<description> Construct translation matrix </description>
		<detail>
			<description> Construct a translation matrix corresponding to a translation of (tx,ty)</description>
		</detail>
	</method>
	<method name="scale" static="true" inline="true" return="Mat23">
		<arg name="sx" type="Float"/>
		<arg name="sy" type="Float" optional="true" default="Math.NaN"/>
		<description> Construct a scaling matrix </description>
		<detail>
			<description> Construct a scaling matrix corresponding to a scaling of (sx,sy). If second argument is omitted, then an equal scaling is used of (sx,sx) </description>
		</detail>
	</method>

	<method name="toMatrix" inline="true" const="true" return="flash.geom.Matrix">
		<description> (flash9+) Construct flash matrix from Mat23 </description>
		<detail>
			<description> For flash9+ targets, construct flash matrix from this matrix </description>
		</detail>
	</method>	
	<method name="copy" inline="true" const="true" return="Mat23">
		<description> Produce a copy of this matrix. </description>
		<detail>
			<description> Produce a copy of this matrix. </description>
		</detail>
	</method>
	<method/>
	<method name="singular" inline="true" const="true" return="Bool">
		<description> Whether matrix is singular or not. </description>
		<detail>
			<description> Returns true if matrix is singular and cannot be inverted. </description>
		</detail>
	</method>
	<method name="orthogonal" inline="true" const="true" return="Bool">
		<description> Whether main 2x2 block is an orthogonal matrix </description>
		<detail>
			<description> Returns true if the main 2x2 block is an orthogonal matrix; that is to say it's columns are perpendicular and of unit length. If true, this means that the matrix could be decomposed into a rotation and translation. </description>
		</detail>
	</method>
	<method name="equiorthogonal" inline="true" const="true" return="Bool">
		<description> Whether main 2x2 block is an equiorthogonal matrix </description>
		<detail>
			<description><text>Returns true if the main 2x2 block is an equiorthogonal matrix; that is to say it's columns are perpendicular and of the same, non-zero length. If true, this means that the matrix could be decomposed into a rotation, equal scaling, and translation.</text><br/><br/><text>Equiorthogonality is the requirement for a matrix to be used in transforming circles as any other matrix would not produce a circle at the end.</text></description>
		</detail>
	</method>
	
	<method/>
	<method name="inverse" inline="true" const="true" return="Mat23">
		<description> Produce inverse matrix </description>
		<detail>
			<description><text>For non singular matrices, will return the inverse matrix such that </text><code inline="true">x.concat(x.inverse())</code><text> is the identity matrix.</text></description>
			<throws>singular()</throws>
		</detail>
	</method>
	<method name="transpose" inline="true" const="true" return="Mat23">
		<description> Produce partial transposition </description>
		<detail>
			<description>Will return a matrix with the main 2x2 block transposed.</description>
		</detail>
	</method>
	<method/>
	
	<method name="concat" inline="true" const="true" return="Mat23">
		<arg name="m" type="Mat23" const="true"/>
		<description> pre-multiply matrices </description>
		<detail>
			<description>
				<text>Returns the pre-multiplication</text><code inline="true">this.concat(m) = m*this</code><text>, such that </text><code inline="true">x.concat(y)</code><text> results in a matrix that first performs the transformation corresponding to x, and then to that corresponding to y. Aka, </text><code inline="true">(x.concat(y)).transform(p) = y.transform(x.transform(p))</code>
			</description>
		</detail>
	</method>
	<method name="transform" inline="true" const="true" return="Vec2">
		<arg name="p" type="Vec2" const="true"/>
		<arg name="no_translation" type="Bool" optional="true" default="false"/>
		<arg name="weak" type="Bool" optional="true" default="false"/>
		<description> Transform vector </description>
		<detail>
			<description> Returns the possibly weak vector resultant by transforming the given vector by this matrix as a post multiplication this*p.</description>
		</detail>
	</method>
	<method/>
	<method name="inverse_transform" inline="true" const="true" return="Vec2">
		<arg name="p" type="Vec2" const="true"/>
		<arg name="no_translation" type="Bool" optional="true" default="false"/>
		<arg name="weak" type="Bool" optional="true" default="false"/>
		<description> Transform vector by inverse </description>
		<detail>
			<description> Returns the possibly weak vector resultant by transforming the given vector by this matrix's inverse as a post multiplication this*inv(p).</description>
		</detail>
	</method>
	<method/>
		
	<method name="orthogonalise" inline="true" return="Mat23">
		<description> Make matrix orthogonal </description>
		<detail>
			<description> Transforms this matrix into the most similar, but orthogonal matrix returning the this matrix.</description>
			<throws>singular()</throws>
		</detail>
	</method>
	<method name="equiorthogonalise" inline="true" return="Mat23">
		<description> Make matrix equiorthogonal </description>
		<detail>
			<description> Transforms this matrix into the most similar, but equiorthogonal matrix returning the this matrix.</description>
			<throws>singular()</throws>
		</detail>
	</method>
</class>
</data>
