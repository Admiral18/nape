<?xml version="1.0" encoding="utf-8" ?>
<data>

<!-- ------------------------------------------------------------------------------------------- -->

<class package="nape.callbacks" name="ListenerList" super="List[Listener]">
	<file>Listener.hx</file>
	<description>Instance of List&lt;T&gt; for Listener types</description>
	<short>List of Listeners</short>
	
	<constructor>
		<description>Construct new ListenerList</description>
		<detail><description>Construct new ListenerList</description></detail>
	</constructor>
</class>

<class package="nape.callbacks" name="ListenerIterator" super="ListIterator[Listener]">
	<file>Listener.hx</file>
	<description>Instance of ListIterator&lt;T&gt; for Listener types</description>
	<short>Iterator to list of Listeners</short>
</class>

<!-- ------------------------------------------------------------------------------------------- -->

<class package="nape.callbacks" name="PreFlag">
	<file>Listener.hx</file>
	<short>Return values for pre listeners</short>
	<description>Return values for PRE immediate callback listeners</description>

	<property static="true" name="ACCEPT" type="PreFlag" readonly="true">
		<description> Accept interaction </description>
		<detail>
			<description> Accept interaction for this, and all subsequent steps until end of interaction </description>
		</detail>
	</property>
	<property static="true" name="IGNORE" type="PreFlag" readonly="true">
		<description> Ignore interaction </description>
		<detail>
			<description> Ignore interaction for this, and all subsequent steps until end of interaction </description>
		</detail>
	</property>

	<property static="true" name="ACCEPT_ONCE" type="PreFlag" readonly="true">
		<description> Accept interaction once</description>
		<detail>
			<description> Accept interaction for this step, ask again next step. </description>
		</detail>
	</property>
	<property static="true" name="IGNORE_ONCE" type="PreFlag" readonly="true">
		<description> Ignore interaction once</description>
		<detail>
			<description> Ignore interaction for this step, ask again next step. </description>
		</detail>
	</property>
</class>

<class package="nape.callbacks" name="ListenerType">
	<file>Listener.hx</file>
	<short>Listener type</short>
	<description>Listener type</description>

	<property static="true" name="BODY" type="ListenerType" readonly="true">
		<description>Body listener type</description>
		<detail>
			<description>Listener type for Body callbacks</description>
		</detail>
	</property>
	<property static="true" name="CONSTRAINT" type="ListenerType" readonly="true">
		<description>Constraint listener type</description>
		<detail>
			<description>Listener type for Constraint callbacks</description>
		</detail>
	</property>
	<property static="true" name="INTERACTION" type="ListenerType" readonly="true">
		<description>Interaction listener type</description>
		<detail>
			<description>Listener type for Interaction callbacks</description>
		</detail>
	</property>
	<property static="true" name="PRE" type="ListenerType" readonly="true">
		<description>Pre interaction listener type</description>
		<detail>
			<description>Listener type for pre-interaction callbacks</description>
		</detail>
	</property>
</class>

<class package="nape.callbacks" name="InteractionType">
	<file>Listener.hx</file>
	<short>Interaction type for listeners</short>
	<description>Used for Interaction and Pre listeners to define what sort of interaction they should handle</description>
	
	<property static="true" name="COLLISION" type="InteractionType" readonly="true">
		<description>Collision type interaction</description>
		<detail>
			<description>Collision type interaction</description>
		</detail>
	</property>
	<property static="true" name="SENSOR" type="InteractionType" readonly="true">
		<description>Sensor type interaction</description>
		<detail>
			<description>Sensor type interaction</description>
		</detail>
	</property>
	<property static="true" name="FLUID" type="InteractionType" readonly="true">
		<description>Fluid type interaction</description>
		<detail>
			<description>Fluid type interaction</description>
		</detail>
	</property>
	<property static="true" name="ANY" type="InteractionType" readonly="true">
		<description>Any type of interaction</description>
		<detail>
			<description>Any type of interaction</description>
		</detail>
	</property>
</class>

<!-- ------------------------------------------------------------------------------------------- -->

<class package="nape.callbacks" name="Listener">
	<file>Listener.hx</file>
	<short>Super type for listener objects</short>
	<description>super type for all listener objects</description>

	<property name="type" type="ListenerType" readonly="true">
		<description>Listener object type</description>
		<detail>
			<description>Type of listener</description>
		</detail>
	</property>
	<property name="event" type="CbType">
		<description>Listener event kind</description>
		<detail>
			<description>Listener event type</description>
			<set>Invalid CbEvent for listener type</set>
		</detail>
	</property>

	<property name="space" type="Space">
		<description>Space listener's assigned to</description>
		<detail>
			<description>Space listener is assigned to, can set this to assign to the space</description>
		</detail>
	</property>
</class>

<class package="nape.callbacks" name="BodyListener" super="Listener">
	<file>Listener.hx</file>
	<short>Body event listener</short>
	<description>Listener type for Body events. Allowed types are CbEvent.WAKE/SLEEP</description>

	<property name="cbType" type="CbType">
		<description> CbType for Body's handled by listener </description>
		<detail>
			<description> CbType matching the Body's listener is intended for</description>
		</detail>
	</property>

	<property name="handler" type="BodyCallback->Void">
		<description> Function handler for listener </description>
		<detail>
			<description> Function handler for this listener.</description>
		</detail>
	</property>

	<constructor>
		<arg name="event" type="CbEvent"/>
		<arg name="cbType" type="CbType"/>
		<arg name="handler" type="BodyCallback->Void"/>
		<description>construct new BodyListener</description>
		<detail>
			<description>Construct new BodyListener</description>
		</detail>
	</constructor>
</class>

<class package="nape.callbacks" name="ConstraintListener" super="Listener">
	<file>Listener.hx</file>
	<short>Constraint event listener</short>
	<description>Listener type for Constraint events. Allowed types are CbEvent.WAKE/SLEEP/BREAK</description>

	<property name="cbType" type="CbType">
		<description> CbType for Constraint's handled by listener </description>
		<detail>
			<description> CbType matching the Constraint's listener is intended for</description>
		</detail>
	</property>

	<property name="handler" type="ConstraintCallback->Void">
		<description> Function handler for listener </description>
		<detail>
			<description> Function handler for this listener.</description>
		</detail>
	</property>


	<constructor>
		<arg name="event" type="CbEvent"/>
		<arg name="cbType" type="CbType"/>
		<arg name="handler" type="ConstraintCallback->Void"/>
		<description>construct new ConstraintListener</description>
		<detail>
			<description>Construct new ConstraintListener</description>
		</detail>
	</constructor>
</class>

<class package="nape.callbacks" name="InteractionListener" super="Listener">
	<file>Listener.hx</file>
	<short>Interaction event listener</short>
	<description>
		<text>Listener type for Interaction events. Allowed types are CbEvent.BEGIN/END/ONGOING</text><br/><br/>
		<text>These callbacks can occur between any applicable combination of Interactors, whether a Shapes, Bodys or Compounds</text>
		<text class="bold">Example:</text>
		<img file="../../../exgif/IntCb.png"/>
		<text>The possible Interactor pairs for this nape world are formed by taking each valid pair of shapes (So no two shapes from the same body), finding their MRCA (most-recent common ancestor) and pairing up all the Interactors on the way. For this example we have:</text>
		<code><![CDATA[MRCA(S1,S2) = C1   => Interactor pairs = [S1,B1] x [S2,B2,C2]
MRCA(S1,S3) = null => Interactor pairs = [S1,B1,C1] x [S3,B3,C3]
MRCA(S2,S3) = null => Interactor pairs = [S2,B2,C2,C1] X [S3,B3,C3]]]></code><br/>
		<text>Of course not all of these will generate callbacks! only those for which a listener exists between the two cbType's. Presently it is infact only allowed that one such pairing from two shapes should generate a callback</text><br/><br/>
		<text>Furthermore an Interaction type for the listener to operate upon is specified which works even in mixed cases where many type of interaction is happening at once. The listeners are at present implemented so that there cannot be more than one listener for an interaction type</text>
	</description>

	<property name="cbType1" type="CbType">
		<description> First CbType for shapes/bodies handled by listener </description>
		<detail>
			<description> CbType matching the first shape/body's listener is intended for</description>
		</detail>
	</property>
	<property name="cbType2" type="CbType">
		<description> Second CbType for shapes/bodies handled by listener </description>
		<detail>
			<description> CbType matching the second shape/body's listener is intended for</description>
		</detail>
	</property>

	<property name="interactionType" type="InteractionType">
		<description> Type of interaction handled </description>
		<detail>
			<description> Type of interactino handled by this listener </description>
		</detail>
	</property>

	<property name="handler" type="InteractionCallback->Void">
		<description> Function handler for listener </description>
		<detail>
			<description> Function handler for this listener.</description>
		</detail>
	</property>

	<constructor>
		<arg name="event" type="CbEvent"/>
		<arg name="interactionType" type="InteractionType"/>
		<arg name="cbType1" type="CbType"/>
		<arg name="cbType2" type="CbType"/>
		<arg name="handler" type="InteractionCallback->Void"/>
		<description>Construct new InteractionListener</description>
		<detail>
			<description>Construct new InteractorListener </description>
		</detail>
	</constructor>

</class>

<class package="nape.callbacks" name="PreListener" super="Listener">
	<file>Listener.hx</file>
	<short>Immediate interaction event listener</short>
	<description>
		<text>Listener type for immediate interaction events. Allowed types are CbEvent.PRE only and as such is not an argument to the constructor.</text><br/>
		<br/>
		<text>For information about how interaction events work between various Interactors see the description in </text><link type="class" href="InteractionListener"><text>InteractionListener</text></link>
	</description>

	<property name="cbType1" type="CbType">
		<description> First CbType for shapes/bodies handled by listener </description>
		<detail>
			<description> CbType matching the first shape/body's listener is intended for</description>
		</detail>
	</property>
	<property name="cbType2" type="CbType">
		<description> Second CbType for shapes/bodies handled by listener </description>
		<detail>
			<description> CbType matching the second shape/body's listener is intended for</description>
		</detail>
	</property>

	<property name="interactionType" type="InteractionType">
		<description> Type of interaction handled </description>
		<detail>
			<description> Type of interactino handled by this listener </description>
		</detail>
	</property>

	<property name="handler" type="Arbiter->PreFlag">
		<description> Function handler for listener </description>
		<detail>
			<description> Function handler (non-optional). Note that although the argument is an Arbiter (The first such arbiter to be handled internally) this action can occur between shapes/bodies. It is not guaranteed that the same arbiter will be supplied in the case of the handler returning #_ONCE.</description>
		</detail>
	</property>
	<property name="pure" type="Bool">
		<description> Marks handler as pure </description>
		<detail>
			<description> Marks that the handler is to be treat as pure whenever the two body/shapes remain unchanged and so allow nape to put the objects to sleep. If the handler is not pure, then nape will make no assumptions and not allow the objects to sleep when the handler returns #_ONCE. If you mark the handler as pure when it is not, then the objects may sleep when you do not expect them to and you 'can' do 'listener.handler = listener.handler' to refresh nape that the handler has infact changed even though it has been marked pure </description>
		</detail>
	</property>

	<constructor>
		<arg name="interactionType" type="InteractionType"/>
		<arg name="cbType1" type="CbType"/>
		<arg name="cbType2" type="CbType"/>
		<arg name="handler" type="Arbiter->PreFlag"/>
		<arg name="pure" type="Bool" optional="true" default="false"/>
		<description>Construct new PreListener</description>
		<detail>
			<description>Construct new PreListener. If pure, nape will assume that the result of invoking the handler will not change whenever the two interactors are unchanged and allow the objects to go to sleep should the handler be returning IGNORE_ONCE/ACCEPT_ONCE.</description>
		</detail>
	</constructor>
</class>

</data>
