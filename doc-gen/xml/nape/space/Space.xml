<?xml version="1.0" encoding="utf-8" ?>
<data>

<class package="nape.space" name="Broadphase">
	<file>Space.hx</file>
	<short>Broadphase type</short>
	<description>Type identifiers for nape broadphase models</description>
	
	<property static="true" name="SWEEP_AND_PRUNE" type="Broadphase" readonly="true">
		<description>1D Sweep and Prune broadphase</description>
		<detail><description>This broadphase type uses a single sorted list maintained each step, this is a fast broadphase but is superceeded in general by the dynamic aabb tree if your world is not mainly lots of dynamic objects always moving</description></detail>
	</property>
	<property static="true" name="DYNAMIC_AABB_TREE" type="Broadphase" readonly="true">
		<description>Pair of AABB Trees broadphase</description>
		<detail><description>This broadphase uses a pair of dynamic aabb trees which are incrementally rebuilt each step. One tree contains static objects, sleeping dynamic objects and un-moving kinematics whilst they other contains non-sleeping dynamic and moving kinematic objects. This broadphase deals with large ranges in sizes of objects easily as well as being more performant than the sweep and prune if your world contains a lot of static or sleeping geometry or lots of fast moving objects.</description>
		</detail>
	</property>
</class>


<class package="nape.space" name="Space">
	<file>Space.hx</file>
	<short>Space simulation type</short>
	<description>
		responsible for simulations in nape.
	</description>

	<property name="id" type="Int">
		<description>Unique space id</description>
		<detail>
			<description>Unique id for each Space instantiated. Perhaps a bit strange to do so, but you never know!</description>
		</detail>
	</property>
	<property name="userData" type="Dynamic">
		<description>User defined data</description>
		<detail>
			<description>User defined data</description>
		</detail>
	</property>
	<property/>


	<property name="broadphase" type="Broadphase" readonly="true">
		<description>Broadphase typed used by this space</description>
		<detail>
			<description><text>The type of broadphase being used by this space, this cannot be changed once the Space has been constructed!</text></description>
		</detail>
	</property>	
	<property name="sortContacts" type="Bool" value="true">
		<description>Control whether contacts are sorted</description>
		<detail>
			<description><text>If true (default), then dynamic contact arbiters are sorted based on penetration depths. Apart from making behaviour between broadphase types roughly equivalent (full sorting on all arbiter types would be needed for true equivalence), sorting arbiters in this way can help with stability of large piles/stacks at a constant cost equal to the number of arbiters active in the simulation.</text><br/><br/>
				<text>This is left configurable as there is no speed penalty in keeping it so. The speed penalty is fairly small (For the StressPyramid demo, disabling contact sorting raises the fps (on my computer) from ~29fps to ~31fps.</text>
			</description>
		</detail>
	</property>
	<property name="gravity" type="Vec2">
		<description>Global gravity</description>
		<detail>
			<description><text>Global acceleration due to gravity.</text><br/><text class="small1">setter is copy by value, not copy by reference and equivalent to </text><code inline="true">gravity.set(v)</code> </description>
		</detail>
	</property>

	<property name="worldLinearDrag" type="Float" value="0.015">
		<description>Linear drag applied to all objects</description>
		<detail>
			<description>Every step a force is applied to objects, such that under no outside influence, an object will lose 'worldLinearDrag' amount of its velocity per second. Note that this is purely a force applied as opposed to a fluid's drag which is implemented as a constraint in the physics</description>
		</detail>
	</property>

	<property name="worldAngularDrag" type="Float" value="0.015">
		<description>Angular drag applied to all objects</description>
		<detail>
			<description>Every step a torque is applied to objects, such that under no outside influence, an object will lose 'worldAngularDrag' amount of its angular velocity per second. Note that this is purely a torque applied as opposed to a fluid's drag which is implemented as a constraint in the physics</description>
		</detail>
	</property>

	<property/>
	<property name="elapsedTime" type="Float" readonly="true">
		<description>Amount of simulated time passed</description>
		<detail>
			<description>The amount of simulated time via calls to space.step() that has passed since Space instantiation (measured in seconds)</description>
		</detail>
	</property>
	<property name="timeStamp" type="Int" readonly="true">
		<description>Internal discrete clock</description>
		<detail>
			<description>An internal discrete clock corresponding to the number of calls made to space.step()</description>
		</detail>
	</property>
	
	<property/>
	<property name="compounds" type="CompoundList" readonly="true">
		<description>List of all compounds added to the space</description>
		<detail>
			<description>List of all compounds add to the space, note that this does 'not' include compounds that are part of some compound tree that was added to the space.</description>
		</detail>
	</property>
	<property name="bodies" type="BodyList" readonly="true">
		<description>List of all bodies added to the space</description>
		<detail>
			<description>List of all bodies add to the space, note that this does 'not' include bodies that are part of some compound tree that was added to the space.</description>
		</detail>
	</property>
	<property name="constraints" type="ConstraintList" readonly="true">
		<description>List of all constraints added to the space</description>
		<detail>
			<description>List of all constraints added to the space, note that this does 'not' include constraints that are part of some compound tree that was added to the space.</description>
		</detail>
	</property>

	<property/>

	<property name="liveBodies" type="BodyList" readonly="true">
		<description>Immutable list of all live bodies</description>
		<detail>
			<description>An immutable list of all the non-sleeping bodies currently being simulated.</description>
		</detail>
	</property>
	<property name="liveConstraints" type="ConstraintList" readonly="true">
		<description>Immutable list of all live, active constraints in space</description>
		<detail>
			<description>An immutable list of all constraints which are currently non-sleeping and activated.</description>
		</detail>
	</property>

	<property/>

	<property name="world" type="Body" readonly="true">
		<description>Static reference body for constraints</description>
		<detail>
			<description>An immutable, static, stationary body which can be used for constraints to do things like pin an object to a static point in space</description>
		</detail>
	</property>
	
	<property/>
	
	<property name="arbiters" type="ArbiterList" readonly="true">
		<description>Immutable list of live arbiters</description>
		<detail>
			<description>Reference to the immutable list of all living, active arbiters belonging to this Space. Sleeping arbiters are not included as this would be rather messy and annoying to deal with internally! </description>
		</detail>
	</property>
	<property name="listeners" type="ListenerList" readonly="true">
		<description>Mutable listeners list</description>
		<detail>
			<description>List of all listeners assigned to this Space for callback generation</description>
		</detail>
	</property>
	
	<constructor>
		<arg name="gravity" type="Vec2" optional="true"/>
		<arg name="broadphase" type="Broadphase" optional="true"/>
		<description>Construct new Space</description>
		<detail>
			<description>Construct a new Space with given gravity, default being (0,0) and given broadphase type, the default being a dynamic aabb tree</description>
		</detail>
	</constructor>
	
	<method name="step">
		<arg name="deltaTime" type="Float"/>
		<arg name="velocityIterations" type="Int" optional="true" default="10"/>
		<arg name="positionIterations" type="Int" optional="true" default="10"/>
		<description>Perform simulation step</description>
		<detail>
			<description><text>Perform simulation step of given time period with given iterations</text><br/><br/><text>For best stability, deltaTime should be kept constant for each step though as long as it does not fluctuate too wildly stability should be acceptable</text><br/><text>The more velocity iterations there are the more accurate collision responses and constraints will be</text><br/><text>Positional iterations are used for contacts, and for stiff constraints to correct positional errors, the more iterations there are the more stable and accurate such calculations will be</text></description>
			<throws><code inline="true">deltaTime&lt;=0</code> </throws>
			<throws><code inline="true">velocityIterations&lt;=0</code> </throws>
			<throws><code inline="true">positionIterations&lt;=0</code> </throws>
		</detail>
	</method>

	<method name="interactionType">
		<arg name="shape1" type="Shape"/>
		<arg name="shape2" type="Shape"/>
		<description>Determine InteractionType if any between two shapes</description>
		<detail>
			<description><text>Given two shapes, which exist within a defined Body this function will determine what sort of interaction 'would' occur between them during a call to space.step() taking into account filters/interaction groups/body types and existence of any active constraints in the space etc so that there is a direct correspondence with what will actually happen. null will be returned if 'no' interaction would occur</text><br/><br/><text>Although the Shape's Bodys do not need to be in the Space, it is not acceptable to have the Shape's Body's in 'different' Spaces than the one on which this function is called</text></description>
			<throws><code inline="true">shape1.body==null || shape2.body==null</code></throws>
			<throws><code inline="true">(shape1.body.space!=null &amp;&amp; shape1.body.space!=this) || (shape2.body.space!=null &amp;&amp; shape2.body.space!=this)</code></throws>
		</detail>
	</method>
	
	<method/>
		<method name="visitBodies">
		<arg name="lambda" type="Body->Void"/>
		<description>Visitor for all bodies</description>
		<detail>
			<description> Apply given function to all bodies contained within the space and down the tree</description>
		</detail>
	</method>

	<method name="visitConstraints">
		<arg name="lambda" type="Constraint->Void"/>
		<description>Visitor for all constraints</description>
		<detail>
			<description> Apply given function to all constraints contained within the space and down the tree</description>
		</detail>
	</method>

	<method name="visitCompounds">
		<arg name="lambda" type="Compound->Void"/>
		<description>Visitor for all inner compounds</description>
		<detail>
			<description> Apply given function to all compounds contained within the space and down the tree</description>
		</detail>
	</method>

	<method/>

	<method name="shapesUnderPoint" return="ShapeList" const="true">
		<arg name="point" type="Vec2" const="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all shapes beneath a point</description>
		<detail>
			<description><text>Returns a list of all shapes beneath the given point.</text><br/><text>If the filter argument is non-null, then only shape who's interactionFilter agrees to "collide" will be considered</text></description>
		</detail>
	</method>
	<method name="bodiesUnderPoint" return="BodyList" const="true">
		<arg name="point" type="Vec2" const="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all bodies beneath a point</description>
		<detail>
			<description><text>Returns a list of all objects who's shapes are beneath the given point.</text><br/><text>If the filter argument is non-null, then only Bodies with a shape at this point for which the shape's interactionFilter agrees to "collide" will be considered</text></description>
		</detail>
	</method>

	<method/>
	<method name="shapesInAABB" return="ShapeList" const="true">
		<arg name="aabb" type="AABB" const="true"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="strict" type="Bool" optional="true" default="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all shapes within an AABB</description>
		<detail>
			<description><text>Returns a list of all shapes within the given bounding box.</text><br/><text>If the filter argument is non-null, then only shape who's interactionFilter agrees to "collide" will be considered</text><br/><br/><text>When strict is false, the shape AABB is considered instead of the shape itself so that a faster query is performed, but erroneous shapes may be considered</text><br/><br/><text>If containment is true, then only shapes entirely contained in the given AABB will be included</text></description>
		</detail>
	</method>
	<method name="bodiesInAABB" return="BodyList" const="true">
		<arg name="aabb" type="AABB" const="true"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="strict" type="Bool" optional="true" default="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all bodies within an AABB</description>
		<detail>
			<description><text>Returns a list of all bodies with a shape within the given AABB.</text><br/><text>If the filter argument is non-null, then only Bodies with a shape within the AABB for which the shape's interactionFilter agrees to "collide" will be considered</text><br/><br/><text>When strict is false, the AABB of the shapes is considered instead of the shapes themselves so that a faster query is performed, but erroneous bodies may be considered</text><br/><br/><text>If containment is true, then only bodies entirely contained in the given AABB will be included</text></description>
		</detail>
	</method>
	
	<method/>
	<method name="shapesInCircle" return="ShapeList" const="true">
		<arg name="position" type="Vec2" const="true"/>
		<arg name="radius" type="Float"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all shapes within a circle</description>
		<detail>
			<description><text>Returns a list of all shapes within the given circle.</text><br/><text>If the filter argument is non-null, then only shape who's interactionFilter agrees to "collide" will be considered</text><br/><br/><text>If containment is true, then only shapes entirely contained in the given circle will be included</text></description>
		</detail>
	</method>
	<method name="bodiesInCircle" return="BodyList" const="true">
		<arg name="position" type="Vec2" const="true"/>
		<arg name="radius" type="Float"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all bodies within an circle</description>
		<detail>
			<description><text>Returns a list of all bodies with a shape within the given circle.</text><br/><text>If the filter argument is non-null, then only Bodies with a shape within the circle for which the shape's interactionFilter agrees to "collide" will be considered</text><br/><br/><text>If containment is true then only bodies entirely contained in the given circle will be included</text></description>
		</detail>
	</method>
	
	<method/>
	<method name="shapesInShape" return="ShapeList" const="true">
		<arg name="shape" type="Shape" const="true"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all shapes within another Shape</description>
		<detail>
			<description><text>Returns a list of all shapes within the given shape. The given shape must belong to a Body to be well defined though this Body need not be inside of any Space.</text><br/><text>If the filter is non-null then only shapes that agree to "collide" will be considered, noting that the Shape is treat as purely geometric and it's own filter/interaction group etc are ignored.</text><br/><br/><text>If containment is true, then only shapes entirely contained in the given shape will be included</text></description>
			<throws><code inline="true">shape.body==null</code> </throws>
		</detail>
	</method>
	<method name="bodiesInShape" return="BodyList" const="true">
		<arg name="shape" type="Shape" const="true"/>
		<arg name="containment" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all bodies within a shape</description>
		<detail>
			<description><text>Returns a list of all bodies with a shape within the given shape. The given shape must belong to a Body to be well defined though this Body need not be inside of any Space.</text><br/><text>If the filter is non-null then only bodies who's shapes agree to "collide" will be considered, noting that the Shape is treat as purely geometric and it's own filter/interaction group etc are ignored.</text><br/><br/><text>If containment is true, then only bodies entirely contained in the given shape will be included</text></description>
			<throws><code inline="true">shape.body==null</code> </throws>
		</detail>
	</method>

	<method name="shapesInBody" return="ShapeList" const="true">
		<arg name="body" type="Body" const="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all shapes within a Body</description>
		<detail>
			<description>
				<text>Returns a list of all shapes intersecting with a shape of the given Body. The input body need not belong to any Space.</text>
				<br/><text>If the filter is non-null, then only shapes who agree to "collide" will be considered, noting that the Body is treat as purely geometric and it's own interaction group/shape filters/constraints are ignored.</text><br/><br/><text>There is no easy way of performing a containment test in a compound Body.</text>
			</description>
		</detail>
	</method>
	<method name="bodiesInBody" return="BodyList" const="true">
		<arg name="body" type="Body" const="true"/>
		<arg name="filter" type="InteractionFilter" optional="true" const="true"/>
		<description>Find all bodies within a Body</description>
		<detail>
			<description>
				<text>Returns a list of all bodies with shapes intersecting the shapes of the given Body. The input body need not belong to any Space.</text>
				<br/><text>If the filter is non-null, then only shapes who agree to "collide" will be considered, noting that the Body is treat as purely geometric and it's own interaction group/shape filters/constraints are ignored.</text><br/><br/><text>There is no easy way of performing a containment test in a compound Body.</text>
			</description>
		</detail>
	</method>
	
	<method/>
	
	<method name="rayCast" return="Maybe[RayResult]" const="true">
		<arg name="ray" type="Ray" const="true"/>
		<arg name="inner" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" default="null"/>
		<description>Perform a ray cast, terminating at first intersection</description>
		<detail>
			<description><text>Perform a ray cast up to the ray's defined maximum distance, terminating at the first intersection.</text><br/><br/><text>If inner is true, then the ray will also intersect with the inner surfaces of shapes such that a circle would have 2 intersections.</text><br/><br/><text>If filter is non-null, then only shapes which should collide based on interaction filters will be intersected with.</text></description>
		</detail>
	</method>
	
	<method name="rayMultiCast" return="RayResultList" const="true">
		<arg name="ray" type="Ray" const="true"/>
		<arg name="inner" type="Bool" optional="true" default="false"/>
		<arg name="filter" type="InteractionFilter" optional="true" default="null"/>
		<description>Perform a ray cast, finding all intersections</description>
		<detail>
			<description><text>Perform a ray cast up to the ray's defined maximum distance, finding all valid intersections based on arguments. (See normal rayCast)</text></description>
		</detail>
	</method>
</class>
</data>
