package zpp_nape.phys;
$(import);

class PR(Compound) extends PR(Interactor) {
	public var outer:Compound;

	//----------------------------------------------------

	public var bodies:List(PR(Body)); 
	public var constraints:List(PR(Constraint));
	public var compounds:List(PR(Compound)); 

	public var wrap_bodies:BodyList;
	public var wrap_constraints:ConstraintList;
	public var wrap_compounds:CompoundList;

	//----------------------------------------------------

	public var compound:PR(Compound);
	public var space:PR(Space);

	//----------------------------------------------------

	public function __setCbType(cbType:PR(CbType)) {
		throw "not done yet";
	}
	flibmdel public inline function __imutable_midstep(name:String) {
		DEBUG(if(space!=null && space.midstep) throw "Error: "+name+" cannot be set during space step()";)
	}

	//----------------------------------------------------

	public function new() {
		super();
		icompound = this;

		var me = this;
		$(mixin list(b,B) list(b,B,$(mixin check(x){}) check));
		$(mixin list(b,B,check)
			b = new List(PR(B))();
			wrap_`b = PR(B`List).get(b);
			wrap_`b.pr(inner).adder = function(x:B) {
				check(x);
				if(x.pr(inner).compound!=me) {
					if(x.pr(inner).compound!=null) x.pr(inner).compound.wrap_`b.remove(x);
					elif(x.pr(inner).space!=null) x.pr(inner).space.wrap_`b.remove(x);

					x.pr(inner).compound = me;
					if(me.space!=null) me.space.add`B(x.pr(inner));

					return true;
				}else return false;
			}
			wrap_`b.pr(inner).subber = function(x:B) {
				x.pr(inner).compound = null;
				if(me.space!=null) me.space.rem`B(x.pr(inner));
			}
			DEBUG(wrap_`b.pr(inner)._modifiable = function() {
				me.immutable_midstep("Compound::"+$str(b));
			})
		);

		list(bodies,Body)
		list(constraints,Constraint)
		list(compounds,Compound,$(mixin check(x) DEBUG(
			var cur = me;
			while(cur!=null && cur!=x.pr(inner)) cur = cur.compound;
			if(cur==x.pr(inner)) {
				throw "Error: Assignment would cause a cycle in the Compound tree: assigning "+x.toString()+".compound = "+me.outer.toString();
				return false;
			})) check
		)
	}
}
