package zpp_nape.geom;
$(import);

class PR(Vec2) {
	public var _invalidate:PR(Vec2)->Dynamic;
	public var _validate:Void->Dynamic;
	public var immutable:Bool;
	public var _immutable:Void->Dynamic;
	
	flibmdel public inline function validate() {
		if(_validate!=null) _validate();
	}
	flibmdel public inline function invalidate() {
		if(_invalidate!=null) _invalidate(this);
	}
	
	public var outer:Vec2;
	flibmdel public inline function wrapper() {
		if(outer==null) {
			outer = new Vec2(); //don't care
			Free(PR(Vec2),outer.pr(inner));
			outer.pr(inner) = this;
		}
		return outer;
	}

	//used by Vec2::destroy
	flibmdel public inline function __destroy() {
		_invalidate = null;
		_validate = null;
		_immutable = null;
		assert(next==null,"Vec2 was a list type?");
	}
	
	//----------------------------------------------------------------------------------------------

	public var weak:Bool;
	
	MixPoolNoNext(PR(Vec2))
	flibmdel public inline function free() {
		if(outer!=null)
			outer.pr(inner) = null;
		outer = null;
		_immutable = null;
		_validate = null;
		_invalidate = null;
		weak = false;
	}
	flibmdel public inline function alloc() {}
	
	MixListMixin(PR(Vec2))
	vec_new(public,$(->));
	
	//----------------------------------------------------------------------------------------------
	
	public function new() { weak = false; }
	flibstaticdel(get) public inline static function get(x:Float, y:Float, ?immutable=false) {
		var ret = Get(PR(Vec2));
		ret.immutable = immutable;
		vec_set(ret.,);
		return ret;
	}
	
	flibmdel public inline function copy() return get(x,y)
	
	//----------------------------------------------------------------------------------------------
	
	flibmdel public inline function toString() return "{ x: "+x+" y: "+y+" }"
}
