package zpp_nape.geom;
$(import);

$(mixin Vertex() PR(GeomVert));

class Vertex {
	vec_new(public,$(->));
	
	MixPoolNoNext(Vertex)
	public var prev:Vertex;
	public var next:Vertex;

	flibmdel public inline function free () {}
	flibmdel public inline function alloc() {}

	public static inline function get(x:Float,y:Float) {
		var ret = Get(Vertex);
		vec_set(ret.,$(->));
		return ret;
	}
	public function new() {}
}

class PR(GeomPoly) {
	public var outer:GeomPoly;
	public var vertices:Vertex;

	public function new(outer:GeomPoly) {
		this.outer = outer;
	}
}

$(mixin global geom(block)
	block

	$(mixin assert_size_3(poly) {
		mix_circular(Vertex,
			#if NAPE_ASSERT if(size(poly)<3) throw "Error: Size of polygon less than 3 makes no sense: geom::area"; #end
		)
	});

	$(mixin signed_area(poly) ({
		assert_size_3(poly);

		var area = 0.0;
		mix_circular(Vertex,
			for_iter(v,poly,area += v.x*(v.next.y-v.prev.y));
		)
		area;
	}));
	$(mixin area(poly) ({
		var ret = signed_area(poly);
		if(ret<0) (-ret) else ret;
	}));

	$(mixin clockwise(poly) (signed_area(poly)>0.0));

	$(mixin degenerate(poly) ({
		if(poly==null || poly.next==null || poly.next==poly.prev) true;
		else { var a = signed_area(poly); a*a < PR(Const).EPSILON*PR(Const).EPSILON; }
	}));

	$(mixin convex(poly) ({
		assert_size_3(poly);
		mix_circular(Vertex,
			var neg = false;
			var pos = false;
			var ret = true;
			for_iter(v,poly,{
				var u = v.prev;
				var w = v.next;
	
				vec_new(a); vec_sub(w.,v.,a);
				vec_new(b); vec_sub(v.,u.,b);
				var dot = vec_cross(a,b);
				if  (dot>0.0) pos = true;
				elif(dot<0.0) neg = true;
	
				if(pos&&neg) { ret = false; break; }
			});
		)
		ret;
	}));
);
