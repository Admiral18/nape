package zpp_nape.geom;
$(import);

class PR(Distance) {
    flibstaticdel(distance)
    public static function distance(
        outa:PR(Vec2),outb:PR(Vec2),
        s1:PR(Shape), s2:PR(Shape),
        cache:PR(SCache)
    ) {
        if(s2.isPolygon()) {
            return if(s1.isPolygon()) poly2poly_distance(s1.polygon,s2.polygon,outa,outb, cache);
            else circle2poly_distance(s1.circle,s2.polygon,outa,outb);
        }else
            return circle2circle_distance(s1.circle.worldCOM,s2.circle.worldCOM,s1.circle.radius,s2.circle.radius,outa,outb);
    }

    $(mixin circle2circle_distance(c1,c2, r1,r2, outa,outb) {
        vec_new(d); vec_sub(c2,c1,d);
        var r = r1+r2;
        var dl = vec_lsq(d);
        if(dl<r*r) -1.0;
        else {
            var id = PR(Math).invsqrt(dl); vec_muleq(d,id);
            vec_set(outa.,c1); vec_addeq(outa.,d,r1);
            vec_set(outb.,c2); vec_subeq(outb.,d,r2);
            1/id - r;
        }
    });

    $(mixin circle2poly_distance(circle,poly, outa,outb) {
        var max = -PR(Const).FMAX;
        var a0 = null, vi = null;

        var vite = poly.gverts.begin();
        Iter(a,poly.edges,{
            var dist = vec_dot(a.gnorm,circle.worldCOM) - a.gprojection - circle.radius;
            if(dist>max) {
                max = dist;
                a0 = a;
                vi = vite;
            }
            vite = vite.next;
        });

        var v0 = vi.elem();
        var v1 = if(vi.next==null) poly.gverts.front() else vi.next.elem();
        var dt = vec_cross(a0.gnorm,circle.worldCOM);
        if     (dt<=vec_cross(a0.gnorm,v0.)) circle2circle_distance(circle.worldCOM,v0.,circle.radius,0,outa,outb)
        else if(dt>=vec_cross(a0.gnorm,v1.)) circle2circle_distance(circle.worldCOM,v1.,circle.radius,0,outa,outb)
        else if (max>=0.0) {
            vec_set(outa.,circle.worldCOM);
            vec_subeq(outa.,a0.gnorm,circle.radius);
            vec_set(outb.,outa.);
            vec_subeq(outb.,a0.gnorm,max);
            max;
        }else -1.0;
    });

    public static var defcache = new PR(SCache)();
    $(mixin poly2poly_distance(p1,p2, outa,outb, scache) {
        if(scache==null) {
            scache = defcache;
            scache.set(p1,p2);
        }
        scache.validate();

        var count = scache.count;
        var v1 = scache.v1;
        var v2 = scache.v2;
        var v3 = scache.v3;

        var ida = [];
        var idb = [];

        var ind = 0;
        while(ind++<2000) {
            //previous id's
            var pcount = count;
            ida[0] = v1.ia; idb[0] = v1.ib;
            if(count>=2) { ida[1] = v2.ia; idb[1] = v2.ib; }
            if(count==3) { ida[2] = v3.ia; idb[2] = v3.ib; }

            //break simplex
            if     (count==2) solve2;
            else if(count==3) solve3;
            if(count==3) break;

            vec_new(d); search_dir(d);
            if(vec_lsq(d) < PR(Const).EPSILON) break;

            //form new simplex
            var vertex = (count==1 ? v2 : v3);
            support(vertex,a, p1, d,-1.0);
            support(vertex,b, p2, d, 1.0);
            vec_sub(vertex.b,vertex.a, vertex.v);

            //check for duplication
            var dup = false;
            for(i in 0...pcount) {
                if(vertex.ia == ida[i] && vertex.ib == idb[i]) {
                    dup = true;
                    break;
                }
            }
            if(dup) break;

            count++;
        }

        if(scache!=defcache)
            scache.write(count, v1,v2,v3);

        //get points on polys
        if(count==1) {
            vec_set(outa.,v1.a);
            vec_set(outb.,v1.b);
            Math.sqrt(vec_dsq(outa.,outb.));
        }else if(count==2) {
            vec_set(outa.,0,0); vec_addeq(outa., v1.a,v1.w); vec_addeq(outa., v2.a,v2.w);
            vec_set(outb.,0,0); vec_addeq(outb., v1.b,v1.w); vec_addeq(outb., v2.b,v2.w);
            Math.sqrt(vec_dsq(outa.,outb.));
        }else
            -1.0;
    });

    $(mixin support(vertex,id, poly, d,dmul) {
        vertex.i`id = 0;
        var best = poly.gverts.front();
        var bestv = vec_dot(best.,d)*dmul;

        var ind = 1;
        IterIte(vert, poly.gverts, poly.gverts.begin().next, {
            var value = vec_dot(vert.,d)*dmul;
            if(value>bestv) {
                bestv = value;
                best = vert;
                vertex.i`id = ind;
            }
            ind++;
        });

        vertex.id = best;
        vec_set(vertex.id,best.);
    });

    $(mixin search_dir(d) {
        if     (count==1) vec_set(d, -v1.vx,-v1.vy);
        else if(count==2) {
            vec_new(e); vec_sub(v2.v,v1.v, e);
            var sgn = vec_cross(v1.v,e);
            if(sgn>0) vec_set(d, -ey,ex);
            else      vec_set(d, ey,-ex);
        }else vec_set(d,0,0);
    });

    $(mixin solve2() {
        vec_new(e); vec_sub(v2.v,v1.v,e);
        var d2 = -vec_dot(v1.v,e);
        if(d2<=0.0) {
            v1.w = 1.0;
            count = 1;
        }else {
            var d1 = vec_dot(v2.v,e);
            if(d1<=0.0) {
                v2.w = 1.0;
                count = 1;
                swap(v1,v2);
            }else {
                var id = 1/(d1+d2);
                v1.w = d1*id;
                v2.w = d2*id;
            }
        }
    });

    $(mixin solve3() {
        $(mixin vero(a,b)
            vec_new(e`a`b); vec_sub(v`b.v,v`a.v,e`a`b);
            var d`a`b`_1 =  vec_dot(v`b.v,e`a`b);
            var d`a`b`_2 = -vec_dot(v`a.v,e`a`b);
        );
        vero(1,2) vero(1,3) vero(2,3)

        var dn = vec_cross(e12,e13);
        var d1 = dn*vec_cross(v2.v,v3.v);
        var d2 = dn*vec_cross(v3.v,v1.v);
        var d3 = dn*vec_cross(v1.v,v2.v);

        if (d12_2<=0.0 && d13_2<=0.0) {
            v1.w = 1.0;
            count = 1;
        }else if(d12_1>0.0 && d12_2>0.0 && d3<=0.0) {
            var id = 1.0/(d12_1 + d12_2);
            v1.w = d12_1*id;
            v2.w = d12_2*id;
            count = 2;
        }else if(d13_1>0.0 && d13_2>0.0 && d2<=0.0) {
            var id = 1.0/(d13_1 + d13_2);
            v1.w = d13_1*id;
            v3.w = d13_2*id;
            count = 2;
            swap(v2,v3);
        }else if(d12_1<=0.0 && d23_2<=0.0) {
            v2.w = 1.0;
            count = 1;
            swap(v1,v2);
        }else if(d13_1<=0.0 && d23_1<=0.0) {
            v3.w = 1.0;
            count = 1;
            swap(v1,v3);
        }else if(d23_1>0.0 && d23_2>0.0 && d1<=0.0) {
            var id = 1.0/(d23_1 + d23_2);
            v2.w = d23_1*id;
            v3.w = d23_2*id;
            count = 2;
            swap(v1,v3);
        }else {
            var id = 1.0/(d1 + d2 + d3);
            v1.w = d1*id;
            v2.w = d2*id;
            v3.w = d3*id;
        }
    });
}

class PR(SVertex) {
    public var ia:Int;     public var ib:Int; //index for a,b
    public var a:PR(Vec2); public var b:PR(Vec2);

    vec_new(public, a); vec_new(public, b);
    vec_new(public, v); // = b-a <-> minkowski vertex
    public var w:Float; //barycentric weight

    public function new() {}
}

class PR(SCache) {
    public var metric:Float;

    public var count:Int;
    public var v1:PR(SVertex);
    public var v2:PR(SVertex);
    public var v3:PR(SVertex);

    public var p1:PR(Polygon);
    public var p2:PR(Polygon);

    public function new() {}

    public function set(p1:PR(Polygon),p2:PR(Polygon)) {
        v1 = new PR(SVertex)();
        v2 = new PR(SVertex)();
        v3 = new PR(SVertex)();
        this.p1 = p1;
        this.p2 = p2;
        count = 0;
    }

    public function validate() {
        $(mixin up(c) {
            vec_set(c.a,c.a.);
            vec_set(c.b,c.b.);
            vec_sub(c.b,c.a,c.v);
            c.w = 0.0;
        });
        if(count!=0) up(v1);
        if(count>1) {
            up(v2);
            if(count==3) up(v3);

            var old = metric;
            metric = get_metric();
            if(metric < 0.5*old || 2*old < metric || metric < PR(Const).EPSILON)
                count = 0;
        }
        if(count==0) {
            count = 1;
            v1.a = p1.gverts.front();
            v1.b = p2.gverts.front();
            vec_set(v1.a, v1.a.); v1.ia = 0;
            vec_set(v1.b, v1.b.); v1.ib = 0;
            vec_sub(v1.b,v1.a,v1.v);
            v1.w = 0.0;
        }
    }

    public function get_metric() {
        return switch(count) {
            default: 0.0;
            case 2: vec_dsq(v1.v,v2.v);
            case 3:
                vec_new(a); vec_sub(v2.v,v1.v,a);
                vec_new(b); vec_sub(v3.v,v1.v,b);
                vec_cross(a,b);
        }
    }

    public function write(
        count:Int,
        v1:PR(SVertex),
        v2:PR(SVertex),
        v3:PR(SVertex)
    ) {
        this.count = count;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
        metric = get_metric();
    }
}
