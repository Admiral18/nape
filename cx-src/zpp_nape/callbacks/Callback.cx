package zpp_nape.callbacks;
$(import);

class PR(Callback) {
	public var outer:Callback;
	public static var internal = false;
	flibmdel public inline function wrapper() {
		if(outer==null) {
			internal = true;
			outer = new Callback();
			internal = false;
			outer.pr(inner) = this;
		}
		return outer;
	}
	
	//----------------

	public var event:Int;

    //to check for validity in API.
    public var space:PR(Space);
    public var index:Int;

    //queue
    QueueMix(PR(Callback))

    //pool
    MixPoolNoNext(PR(Callback))
    flibmdel public inline function free() {}
	
	//----------------
	
	//BEGIN,END,ONGOING
	public var arbiter:PR(Arbiter);
	//SLEEP/WAKE
	public var body:PR(Body);
	//SLEEP/WAKE/BREAK
	public var constraint:PR(Constraint);
	
    //SLEEP/WAKE
	public var swefBody:Bool; //else constraint

    //all
    public var listener:PR(Listener);
    public var handler:Bool;
	
	//----------------
	
	public function new() {
        length = 0;
    }
}
