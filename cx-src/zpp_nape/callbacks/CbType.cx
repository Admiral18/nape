package zpp_nape.callbacks;
$(import);

//one CbSet exists for each unique combinatino of CbTypes Interactors within a Space
//habe present so that lists can be computed per-CbSet instead of per-Interactor
class PR(CbSet) {
	//actually an ordered 'set'.
	//don't use a real set so that comparisons are cheaper.
	public var cbTypes:List(PR(CbType));

	//reference counted
	public var count:Int;
	//object pooled
	MixPool(PR(CbSet))

	flibmdel public inline function increment() count++
	flibmdel public inline function decrement() {
		assert(count>0,"decrementing ref.count into negatives??");
		return (--count) == 0;
	}

	//-------------------------------------------------------------------------------

	$(mixin listlist(T,n,r)
		public var n:List(PR(T));
		public var inv(n):Bool;
		flibmdel public inline function invalidate_`n() {
			inv(n) = true;
		}
		flibmdel public inline function validate_`n() {
			if(inv(n)) {
				inv(n) = false;
				realvalidate_`n();
			}
		}
		public function realvalidate_`n() {
			n.clear();
			//merge sorted list(set) from cbTypes into a new sorted list(set)
			//effeciency is not of great concern here, so we adopt a simple algorithm.
			Iter(cb,cbTypes,{
				//merge n and cb.n avoiding duplicates based on ==
				var npre = null;
				var nite = n.begin();
				var cite = cb.n.begin();
				while(cite!=null) {
					var cx = cite.elem();
					if(nite==null || PR(Listener).set_lt(cx,nite.elem())) {
						assert(!n.has(cx),"merged list already contains listener");
						npre = n.insert(npre,cx);
						cite = cite.next;
					}elif(nite!=null && nite.elem()==cx)
						cite = cite.next;
					else {
						npre = nite;
						nite = nite.next;
					}
				}
			});
		}
		initlist(T,n)
		freelist(T,n)
	);

	//all lists are only updated when listener is added to a space!
	//set of interaction/pre listeners associated with CbSet
	listlist(InteractionListener,listeners,int)

	//set of body listeners associated with CbSet
	listlist(BodyListener,bodylisteners,body)
	//set of constraint listeners associated with CbSet
	listlist(ConstraintListener,conlisteners,con)

    ///---------------------------------------------------------------------------------------------

	//only ACTIVE shape/constriants/bodies are referenced to avoid memory leaks
	public var interactors:List(PR(Interactor)); public var wrap_interactors:InteractorList;
    public var constraints:List(PR(Constraint)); public var wrap_constraints:ConstraintList;

    flibmdel public inline function addConstraint(con:PR(Constraint)) constraints.add(con)
	flibmdel public inline function addInteractor(intx:PR(Interactor)) interactors.add(intx)
	
	flibmdel public inline function remConstraint(con:PR(Constraint)) constraints.remove(con)
	flibmdel public inline function remInteractor(intx:PR(Interactor)) interactors.remove(intx)

	//-------------------------------------------------------------------------------

	//for Set
	public static function set_lt(a:PR(CbSet),b:PR(CbSet)) {
		//lexicographical sorting
		var i = a.cbTypes.begin();
		var j = b.cbTypes.begin();
		while(i!=null && j!=null) {
			var ca = i.elem();
			var cb = j.elem();
			if(ca.id < cb.id) return true;
			if(ca.id > cb.id) return false;
			else {
				i = i.next;
				j = j.next;
			}
		}
		//at least one of i,j is always null here.
		//
		//need to ensure that (a=b) => !(a<b) ^ !(b<a)
		//a=b <=> i=null ^ j=null
		return j!=null && i==null;
	}

	//-------------------------------------------------------------------------------

	public function new() {
		cbTypes = new List(PR(CbType))();
		$(expand object initlist(T,n)
			n = new List(PR(T))();
			inv(n) = true;
		);
        constraints = new List(PR(Constraint))();
		interactors = new List(PR(Interactor))();
	}

	flibmdel public inline function free() {
		assert(constraints.empty(),"non-empty constraints");
		assert(interactors.empty(),"non-empty interactors");
		assert(count==0,"deallocating with count!=0?");
		$(expand object freelist(T,n)
			n.clear();
			inv(n) = true;
		);
		ClearWith(cb,cbTypes, cb.cbsets.remove(this));
	}
	flibmdel public inline function alloc() {}

	#if NAPE_ASSERT
	//check ordering of cbTypes
	public static function assert_cbTypes(cbTypes:List(PR(CbType))) {
		var pre = null;
		Iter(cur,cbTypes,{
			if(pre!=null)
				assert(cur.id>pre.id,"cbTypes of CbSet not well-ordered!");
			pre = cur;
		});
	}
	#end

	public static function get(cbTypes:List(PR(CbType))) {
		var ret = Get(PR(CbSet));
		var ite = null;
		#if NAPE_ASSERT assert_cbTypes(cbTypes); #end
		Iter(cb,cbTypes,{
			ite = ret.cbTypes.insert(ite,cb);
			cb.cbsets.add(ret);
		});
		return ret;
	}
	
	//----------------------------------------------------------------------------------------------

	//determines if cbSets share an interaction listener
	public static function empty_intersection(a:PR(CbSet),b:PR(CbSet)) {
		var ret = true;
		var aite = a.listeners.begin();
		var bite = b.listeners.begin();
		while(aite!=null && bite!=null) {
			var ax = aite.elem(); var bx = bite.elem();
			if(ax==bx) {
				ret = false;
				break;
			}elif(PR(Listener).set_lt(ax,bx))
			     aite = aite.next;
			else bite = bite.next;
		}
		return ret;
	}

	//inlined for inline function call when used anonymously
	inline public static function find_all(a:PR(CbSet),b:PR(CbSet), event:Int, cb:PR(InteractionListener)->Void) {
		var aite = a.listeners.begin();
		var bite = b.listeners.begin();
		while(aite!=null && bite!=null) {
			var ax = aite.elem(); var bx = bite.elem();
			if(ax==bx && ax.event==event) {
				cb(ax);
				aite = aite.next;
				bite = bite.next;
			}elif(PR(Listener).set_lt(ax,bx))
			     aite = aite.next;
			else bite = bite.next;
		}
	}
}

GENID(CbType)
class PR(CbType) {
    public var outer:CbType;

    static public var internal:Bool = false;
    public function wrapper() {
        if(outer==null) {
            internal = true;
            outer = new CbType();
            internal = false;
            outer.pr(inner) = this;
        }
        return outer;
    }

    ///---------------------------------------------------------------------------------------------

    public var id:Int;

	public var cbsets:List(PR(CbSet));

    ///---------------------------------------------------------------------------------------------

	//only ACTIVE shape/constriants/bodies are referenced to avoid memory leaks
	public var interactors:List(PR(Interactor)); public var wrap_interactors:InteractorList;
    public var constraints:List(PR(Constraint)); public var wrap_constraints:ConstraintList;

    flibmdel public inline function addConstraint(con:PR(Constraint)) constraints.add(con)
	flibmdel public inline function addInteractor(intx:PR(Interactor)) interactors.add(intx)
	
	flibmdel public inline function remConstraint(con:PR(Constraint)) constraints.remove(con)
	flibmdel public inline function remInteractor(intx:PR(Interactor)) interactors.remove(intx)

    ///---------------------------------------------------------------------------------------------

	$(mixin listlist(T,n,r)
		public var n:List(PR(T));
		flibmdel public inline function add`r(x:PR(T)) {
			assert(!n.has(x),"listener already in list");
			//want highest precedence at start of list
			Insert(x,n,PR(Listener).set_lt);
			invalidate`r();
		}
		flibmdel public inline function remove`r(x:PR(T)) {
			n.remove(x);
			invalidate`r();
		}
		flibmdel public inline function invalidate`r() {
			Iter(cb,cbsets,cb.invalidate_`n());
		}
		initlist(T,n)
	);

	//all lists are only updated when listener is added to a space!
	//set of interaction/pre listeners using the cbType
	listlist(InteractionListener,listeners,int)

	//set of body listeners using the cbType
	listlist(BodyListener,bodylisteners,body)
	//set of constraint listeners using the cbType
	listlist(ConstraintListener,conlisteners,con)

    ///---------------------------------------------------------------------------------------------

    public function new() {
        id = ID(CbType);

		$(expand object initlist(T,n)
			n = new List(PR(T))();
		)
        constraints = new List(PR(Constraint))();
		interactors = new List(PR(Interactor))();

		cbsets = new List(PR(CbSet))();
    }

	//----------------------------------------------------------------------------------------------

	//determines if cbTypes share an interaction listener
	#if swc
		public static var log:Bool = false; /// ADOBE BUG IN iOS EXPORTER WORK AROUND
	#end
	public static function empty_intersection(a:PR(CbType),b:PR(CbType)) {
		var id = if(a.id<b.id) a.id else b.id;
		var di = if(a.id<b.id) b.id else a.id;
		assert(id<di || (a==b && id==di), "id/di in empty_intersectino not well ordered");

		var ret = false;
		var lx = (a.listeners.length<b.listeners.length) ? a.listeners : b.listeners;
	
		Iter(x,lx,{
			assert(!(x.cid==di && x.cdi==id) || id==di,"listener id order didn't match cbtype id order??");
			if(x.cid==id && x.cdi==di) { 
				ret = true;
				break;
			}
		});
		#if swc
			log = ret;
		#end
		return !ret;
	}

	//inlined for inline function call when used anonymously
	inline public static function find_all(a:PR(CbType),b:PR(CbType), event:Int, cb:PR(InteractionListener)->Void) {
		var id = if(a.id<b.id) a.id else b.id;
		var di = if(a.id<b.id) b.id else a.id;
		assert(id<di || (a==b && id==di), "id/di in empty_intersectino not well ordered");

		var lx = (a.listeners.length<b.listeners.length) ? a.listeners : b.listeners;
		Iter(x,lx,{
			assert(!(x.cid==di && x.cdi==id) || id==di,"listener id order didn't match cbtype id order??");
			if(x.cid==id && x.cdi==di && x.event==event)
				cb(x);
		});
	}
}
