package zpp_nape.callbacks;
$(import);

GENID(CbType)
class PR(CbType) {
    public var outer:CbType;

    static public var internal:Bool = false;
    public function wrapper() {
        if(outer==null) {
            internal = true;
            outer = new CbType();
            internal = false;
            outer.pr(inner) = this;
        }
        return outer;
    }

    ///---------------------------------------------------------------------------------------------

    public var id:Int;

    ///---------------------------------------------------------------------------------------------

	//only ACTIVE shape/constriants/bodies are referenced to avoid memory leaks
	public var interactors:List(PR(Interactor)); public var wrap_interactors:InteractorList;
    public var constraints:List(PR(Constraint)); public var wrap_constraints:ConstraintList;

    flibmdel public inline function addConstraint(con:PR(Constraint)) constraints.add(con)
	flibmdel public inline function addInteractor(intx:PR(Interactor)) interactors.add(intx)
	
    flibmdel public inline function remConstraint(con:PR(Constraint)) constraints.remove(con)
	flibmdel public inline function remInteractor(intx:PR(Interactor)) interactors.remove(intx)

    ///---------------------------------------------------------------------------------------------

    ///these are only assigned when listener is added to the space!
    //store actual references as these are one-one
    public var _bodywake :PR(BodyListener);
    public var _bodysleep:PR(BodyListener);
    public var _conwake  :PR(ConstraintListener);
    public var _consleep :PR(ConstraintListener);
    public var _break    :PR(ConstraintListener);

    ///---------------------------------------------------------------------------------------------

	public function clear() {
		while(!interactors.empty()) interactors.front().outer_i.cbType = null;
		while(!constraints.empty()) constraints.front().outer.cbType = null;
	}
	public function destroy() {
		clear();
		interactors = null;
		constraints = null;
		if(wrap_interactors!=null) {
			wrap_interactors.pr(inner).__destroy();
			wrap_interactors = null;
		}
		if(wrap_constraints!=null) {
			wrap_constraints.pr(inner).__destroy();
			wrap_constraints = null;
		}
		id = -1;
		outer = null;
	}

    ///---------------------------------------------------------------------------------------------

    public function new() {
        id = ID(CbType);

        constraints = new List(PR(Constraint))();
		interactors = new List(PR(Interactor))();
    }
}
