package zpp_nape.callbacks;
$(import);

class PR(CbType) {
    public var outer:CbType;

    static public var internal:Bool = false;
    flibmdel public inline function wrapper() {
        if(outer==null) {
            internal = true;
            outer = new CbType();
            internal = false;
            outer.pr(inner) = this;
        }
        return outer;
    }

    ///---------------------------------------------------------------------------------------------

    public static var nextId = 0;
    public var id:Int;

    static public var map = new ARRAY(PR(CbType))();
    static public var DEFAULT = new PR(CbType)();

    ///---------------------------------------------------------------------------------------------

	//only ACTIVE shape/constriants/bodies are referenced to avoid memory leaks
    public var shapes     :List(PR(Shape));      public var wrap_shapes     :ShapeList;
    public var constraints:List(PR(Constraint)); public var wrap_constraints:ConstraintList;
    public var bodies     :List(PR(Body));       public var wrap_bodies     :BodyList;

    flibmdel public inline function addShape     (shape:PR(Shape))      shapes.     add   (shape)
    flibmdel public inline function addConstraint(con  :PR(Constraint)) constraints.add   (con)
    flibmdel public inline function addBody      (body :PR(Body))       bodies.     add   (body)

    flibmdel public inline function remShape     (shape:PR(Shape))      shapes.     remove(shape)
    flibmdel public inline function remConstraint(con  :PR(Constraint)) constraints.remove(con)
    flibmdel public inline function remBody      (body :PR(Body))       bodies.     remove(body)

    ///---------------------------------------------------------------------------------------------

    ///these are only assigned when listener is added to the space!

    //store actual references as these are one-one
    public var _bodywake :PR(BodyListener);
    public var _bodysleep:PR(BodyListener);
    public var _conwake  :PR(ConstraintListener);
    public var _consleep :PR(ConstraintListener);
    public var _break    :PR(ConstraintListener);

	//store count of listeners on this cbtype
	//use space maps to determine if one actually exists for specific pair.
    public var _begin  :Int;
    public var _end    :Int;

    public var _prebegin  :Int;
    public var _preongoing:Int;

    public var listeners:List(PR(Listener));
    public var wrap_listeners:ListenerList;

    ///---------------------------------------------------------------------------------------------

    public function new() {
        id = nextId++;
        assert(id<=0xffff,"invalid cbtype id");
        map.push(this);

        shapes = new List(PR(Shape))();
        constraints = new List(PR(Constraint))();
        bodies = new List(PR(Body))();

        _begin = _end = 0;
        _prebegin = _preongoing = 0;

        listeners = new List(PR(Listener))();
    }
}
