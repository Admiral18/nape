package zpp_nape.util;
$(import);

class Array2<T> {
	public var list:ARRAY(T);
	public var width:Int;
	#if NAPE_ASSERT public var height:Int; #end
	public function new(width:Int,height:Int) {
		this.width = width;
		#if NAPE_ASSERT this.height = height; #end

		#if flash9
			list = new flash.Vector<T>(width*height,true);
		#else
			list = new Array<T>();
		#end
	}

	flibmdel public inline function get(x:Int,y:Int) {
		assert(x>=0 && x<width && y>=0 && y<height, "out of bounds Array");
		return list[y*width+x];
	}

	flibmdel public inline function set(x:Int,y:Int,obj:T) {
		assert(x>=0 && x<width && y>=0 && y<height, "out of bounds Array");
		return list[y*width+x] = obj;
	}
}
