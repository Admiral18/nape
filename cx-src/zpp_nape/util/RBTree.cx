package zpp_nape.util;
$(import);


$(mixin global SetIter(i,set,closure) ${assert/2->
	assert(set!=null,"Iterate  null set?");
	if(!set.empty()) {
		var set_ite = set.parent; //root
		while(set_ite.prev!=null) set_ite = set_ite.prev;
	
		while(set_ite!=null) {
			var i = set_ite.data;
			closure;
	
			if(set_ite.next!=null) {
				set_ite = set_ite.next;
				while(set_ite.prev!=null) set_ite = set_ite.prev;
			}else {
				while(set_ite.parent!=null && set_ite==set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
});

$(mixin global SetLowerBound(obj,set,closure) ${SetIter/3,assert/2->
	var ret = null;
	SetIter(elt,set,{
		if(!closure(elt,obj)) {
			ret = elt;
			break;
		}
	});
	ret;
});

$(mixin global Set(T)
	genSet(T)
	ZPP_Set_`T
);

$(expand genSet(T) class Set(T) {

	MixPoolNoNext(Set(T))
	flibmdel public inline function free() {
		data = null;
	}
	flibmdel public inline function alloc() {}

	public var data:T;

	public var prev:Set(T);
	public var next:Set(T);
	public var parent:Set(T);

	public var colour:Int;
	$(mixin RED 0);
	$(mixin BLACK 1);
	$(mixin NEG_RED() (-1));
	$(mixin DBL_BLACK 2);

	public function new() {}

	//parent doubles as the 'root' of the tree for the dummy object.
	//(Like MixList intrusive lists).

	public function empty() return parent==null	

	public inline function has(obj:T) {
		var cur = obj.rb_set;
		while(cur!=null && cur!=parent) cur = cur.parent;
		return cur!=null;
	}

	public inline function lower_bound(obj:T) {
		return SetLowerBound(obj,this,$(mixin lt(a,b) (a.rb_lt(b))) lt);
/*		var ret = null;
		SetIter(elt, this, {
			if(!elt.rb_lt(obj)) {
				ret = elt;
				break;
			}
		});
		return ret;*/
	}

	inline function might_has(obj:T) {
		#if NAPE_ASSERT
			if(!has(obj)) throw "Assertion: not in tree :(";
		#end
	}

	public inline function remove(obj:T) {
		might_has(obj);
		remove_node(obj.rb_set);
	}

	$(mixin set_link(cur,link,obj) { cur.link = obj; if(obj!=null) obj.parent = cur; });
	$(mixin rep_node(cur,obj) {
		var par = cur.parent;
		if(par==null) {
			parent = obj;
		}else if(par.prev==cur) par.prev = obj;
		else                    par.next = obj;
		if(obj!=null) obj.parent = par;
	});
	
	public inline function successor(obj:T) {
		might_has(obj);
		var cur = obj.rb_set;
		if(cur.next!=null) {
			cur = cur.next;
			while(cur.prev!=null) cur = cur.prev;
		}else {
			var pre = cur;
			cur = cur.parent;
			while(cur!=null && cur.prev!=pre) { pre = cur; cur = cur.parent; }
		}
		return cur == null ? null : cur.data;
	}
	public inline function predecessor(obj:T) {
		might_has(obj);
		var cur = obj.rb_set;
		if(cur.prev!=null) {
			cur = cur.prev;
			while(cur.next!=null) cur = cur.next;
		}else {
			var pre = cur;
			cur = cur.parent;
			while(cur!=null && cur.next!=pre) { pre = cur; cur = cur.parent; }
		}
		return cur == null ? null : cur.data;
	}

	function remove_node(cur:Set(T)) {
		//cur has two children so swap with it's successor
		if(cur.next!=null && cur.prev!=null) {
			var sm = cur.next;
			while(sm.prev!=null) sm = sm.prev;
			swap(cur.data,sm.data);
			swap(cur.data.rb_set,sm.data.rb_set);
			cur = sm;
		}

		assert(cur.next==null || cur.prev==null,"node still has two children??");
		var child = if(cur.prev==null) cur.next else cur.prev;
		
		//rebalance
		if(cur.colour==BLACK) {
			if(cur.prev!=null || cur.next!=null)
				child.colour = BLACK;
			else if(cur.parent!=null) {
				//yay :(
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;

					$(mixin DO(D) {
						var child = parent.D;
						if(child.colour==NEG_RED) {
							__fix_neg_red(child);
							break;
						}else if(child.colour==RED) {
							$(mixin DO2(S) {
								if(child.S!=null && child.S.colour==RED) {
									__fix_dbl_red(child.S);
									break;
								}
							});
							DO2(prev) DO2(next)
						}
					});
					DO(prev) DO(next)

					if(parent.colour==DBL_BLACK) {
						if(parent.parent==null) { parent.colour = BLACK; }
						else { parent = parent.parent; continue; }
					}

					break;
				}
			}
		}

		//and finally
		rep_node(cur,child);

		cur.parent = cur.prev = cur.next = null;
		cur.data.rb_set = null;
		Free(Set(T),cur);
	}

	public inline function __fix_neg_red(negred:Set(T)) {
		var parent = negred.parent;

		$(mixin DO(L,R) {
			var nl = negred.L; var nr = negred.R;
			var trl = nr.L; var trr = nr.R;
			nl.colour = RED;
			negred.colour = parent.colour = BLACK;
			set_link(negred,R,trl);
			swap(parent.data,nr.data);
			swap(parent.data.rb_set,nr.data.rb_set);
			set_link(nr,L,trr);
			set_link(nr,R,parent.R);
			set_link(parent,R,nr);
			nl;
		});

		var child = if(parent.prev==negred)
			 DO(prev,next);
		else DO(next,prev);

		if  (child.prev!=null && child.prev.colour==RED) __fix_dbl_red(child.prev);
		elif(child.next!=null && child.next.colour==RED) __fix_dbl_red(child.next);
	}

	public inline function __fix_dbl_red(x:Set(T)) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g==null) { par.colour = BLACK; break; }

			var n1:Set(T), n2:Set(T), n3:Set(T), t1:Set(T), t2:Set(T), t3:Set(T), t4:Set(T);
			if(par==g.prev) {
				n3 = g; t4 = g.next;
				if(x==par.prev) {
					n1 = x; n2 = par;
					t1 = x.prev; t2 = x.next; t3 = par.next;
				}else {
					n1 = par; n2 = x;
					t1 = par.prev; t2 = x.prev; t3 = x.next;
				}
			}else {
				n1 = g; t1 = g.prev;
				if(x==par.prev) {
					n2 = x; n3 = par;
					t2 = x.prev; t3 = x.next; t4 = par.next;
				}else {
					n2 = par; n3 = x;
					t2 = par.prev; t3 = x.prev; t4 = x.next;
				}
			}

			rep_node(g,n2);

			set_link(n1,prev,t1); set_link(n1,next,t2);
			set_link(n2,prev,n1); set_link(n2,next,n3);
			set_link(n3,prev,t3); set_link(n3,next,t4);

			n2.colour = g.colour-1;
			n1.colour = BLACK;
			n3.colour = BLACK;

			if(n2==parent) parent.colour = BLACK;
			else if(n2.colour==RED && n2.parent.colour==RED) {
				x = n2;
				continue;
			}

			break;
		}
	}

	public function insert(obj:T) {
		assert(!has(obj),"object already in set");

		var x = Get(Set(T));
		x.data = obj;

		if(parent==null) parent = x; //roots
		else {
			var cur = parent; //root
			while(true) {
				if(x.data.rb_lt(cur.data)) {
					if(cur.prev==null) { cur.prev = x; x.parent = cur; break; }
					else cur = cur.prev;
				}else {
					if(cur.next==null) { cur.next = x; x.parent = cur; break; }
					else cur = cur.next;
				}
			}
		}

		if(x.parent==null)
			x.colour = BLACK;
		else {
			x.colour = RED;
			if(x.parent.colour==RED) __fix_dbl_red(x);
		}

		obj.rb_set = x;
	}
});
