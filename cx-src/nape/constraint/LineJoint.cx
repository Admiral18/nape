package nape.constraint;
$(import);

withConstraint(
class LineJoint extends Constraint {
    public var pr(inner_zn):PR(LineJoint);

    wrap_body_new(body1, b1, $(mixin isNew(b) pr(inner_zn).b2 != b) isNew)
    wrap_body_new(body2, b2, $(mixin isNew(b) pr(inner_zn).b1 != b) isNew)

    wrap_anchor_new(anchor1, a1)
    wrap_anchor_new(anchor2, a2)

    wrap_anchor_new(direction, n)

    property(jointMin, Float, {
        return pr(inner_zn).jointMin;
    }, {
        pr(inner).immutable_midstep("LineJoint::jointMin");
        DEBUG(
            if (isNaN(jointMin)) {
                throw "Error: AngleJoint::jointMin cannot be NaN";
            }
        )

        if (this.jointMin != jointMin) {
            pr(inner_zn).jointMin = jointMin;
            pr(inner).wake();
        }
    })

    property(jointMax, Float, {
        return pr(inner_zn).jointMax;
    }, {
        pr(inner).immutable_midstep("LineJoint::jointMax");
        DEBUG(
            if (isNaN(jointMax)) {
                throw "Error: AngleJoint::jointMax cannot be NaN";
            }
        )

        if (this.jointMax != jointMax) {
            pr(inner_zn).jointMax = jointMax;
            pr(inner).wake();
        }
    })

    flibopts(0)
    public function new(
        body1:Null<Body>,
        body2:Null<Body>,
        anchor1:Vec2,
        anchor2:Vec2,
        direction:Vec2,
        jointMin:Float,
        jointMax:Float
    ) {
        pr(inner_zn) = new PR(LineJoint)();
        pr(inner) = pr(inner_zn);
        pr(inner).outer = this;
        pr(inner_zn).outer_zn = this;

        DEBUG(try { super(); } catch (e:Dynamic) {})
        RELEASE(super();)

        this.body1 = body1;
        this.body2 = body2;
        this.anchor1 = anchor1;
        this.anchor2 = anchor2;
        this.direction = direction;
        this.jointMin = jointMin;
        this.jointMax = jointMax;
    }

    public override function impulse():MatMN {
        var ret = new MatMN(2, 1);
        ret.setx(0, 0, pr(inner_zn).jAccx + pr(inner_zn).pjAccx);
        ret.setx(1, 0, pr(inner_zn).jAccy + pr(inner_zn).pjAccy);
        return ret;
    }

    public override function bodyImpulse(body:Body):Vec3 {
        DEBUG(
            if (body == null) {
                throw "Error: Cannot evaluate impulse on null body";
            }
            if (body != body1 && body != body2) {
                throw "Error: Body is not linked to this constraint";
            }
        )

        if(!active) {
            return Vec3.get();
        }
        else {
            return pr(inner_zn).bodyImpulse(body.pr(inner));
        }
    }

    public override function visitBodies(lambda:Body->Void):Void {
        if (body1 != null) {
            lambda(body1);
        }
        if (body2 != null && body2 != body1) {
            lambda(body2);
        }
    }
})
