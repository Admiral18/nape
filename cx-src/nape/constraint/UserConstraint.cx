package nape.constraint;
$(import);

class UserConstraint extends Constraint {
	public var pr(inner_zn):PR(UserConstraint);

	//------------------------------------------------------------------------

	public function __copy():UserConstraint {
		DEBUG(throw "Error: UserConstraint::__copy must be overriden";)
		return null;
	}
	public function __destroy():Void {}
	public function __validate():Void {}

	//------------------------------------------------------------------------

	public function __position():ARRAY(Float) return null
	public function __velocity():ARRAY(Float) {
		DEBUG(throw "Error: Userconstraint::__velocity must be overriden";)
		return null;
	}
	public function __eff_mass():ARRAY(Float) {
		DEBUG(throw "Error: UserConstraint::__eff_mass must be overriden";)
		return null;
	}
	public function __clamp(jAcc:ARRAY(Float)) {}

	//------------------------------------------------------------------------

	public function __vel_impulse(imp:ARRAY(Float)) {
		DEBUG(throw "Error: UserConstraint::__vel_impulse must be overriden";)
	}
	public function __pos_impulse(imp:ARRAY(Float)) {
		DEBUG(throw "Error: UserConstraint::__pos_impulse must be overriden";)
	}

	public function __body_impulse(imp:ARRAY(Float),body:Body):Vec3 {
		DEBUG(throw "Error: UserConstraint::__body_impulse must be overriden";)
		return null;
	}

	//------------------------------------------------------------------------

	public function new(dimensions:Int) {
		DEBUG(try { super(); } catch (e:Dynamic) {})
		RELEASE(super();)

		DEBUG(if(dimensions<1) throw "Error: Constraint dimension must be at least 1";)

		pr(inner_zn) = new PR(UserConstraint)(dimensions);
		pr(inner) = pr(inner_zn);
		pr(inner).outer = this;
		pr(inner_zn).outer_zn = this;
	}

	//------------------------------------------------------------------------

	public override function impulse() {
		var ret = new MatMN(pr(inner_zn).dim,1);
		for(i in 0...pr(inner_zn).dim)
			ret.setx(i,0, pr(inner_zn).jAcc[i] + pr(inner_zn).pjAcc[i]);
		return ret;
	}

	public override function bodyImpulse(body:Body) {
		DEBUG(
			if(body==null) throw "Error: Cannot evaluate impulse on null body";
			var found = false;
			for(b in pr(inner_zn).bodies) {
				if(b.body==body.pr(inner)) { found = true; break; }
			}
			if(!found) throw "Error: Body is not linked to this constraint";
		)
		if(!active) return new Vec3();
		else        return pr(inner_zn).bodyImpulse(body.pr(inner));
	}

	//------------------------------------------------------------------------

	public function registerBody(body:Body) {
		pr(inner).immutable_midstep("UserConstraint::registerBody");
		DEBUG(if(body==null) throw "Error: Cannot register null body";)
		pr(inner_zn).addBody(body.pr(inner));
	}
	public function unregisterBody(body:Body) {
		pr(inner).immutable_midstep("UserConstraint::unregisterBody");
		DEBUG(if(body==null) throw "Error: Cannot unregister null body";)
		if(!pr(inner_zn).remBody(body.pr(inner))) {
			DEBUG(throw "Error: Body is not registered to the constraint";)
		}
	}

}
