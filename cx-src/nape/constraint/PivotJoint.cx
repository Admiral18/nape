package nape.constraint;
$(import);

withConstraint(

class PivotJoint extends Constraint {
	public var pr(inner_zn):PR(PivotJoint);

	wrap_body_new(body1,b1, $(mixin new(b) pr(inner_zn).b2!=b) new)
	wrap_body_new(body2,b2, $(mixin new(b) pr(inner_zn).b1!=b) new)
	
	wrap_anchor_new(anchor1,a1)
	wrap_anchor_new(anchor2,a2)
	
	public function new(body1:Body, body2:Body, anchor1:Vec2, anchor2:Vec2) {
		DEBUG(try { super(); } catch (e:Dynamic) {})
		RELEASE(super();)
		
		pr(inner_zn) = new PR(PivotJoint)();
		pr(inner) = pr(inner_zn);
		pr(inner).outer = this;
		pr(inner_zn).outer_zn = this;
		
		this.body1 = body1;
		this.body2 = body2;
		this.anchor1 = anchor1;
		this.anchor2 = anchor2;
	}
	
	public override function impulse() {
		var ret = new MatMN(2,1);
		ret.setx(0,0, pr(inner_zn).jAccx+pr(inner_zn).pjAccx);
		ret.setx(1,0, pr(inner_zn).jAccy+pr(inner_zn).pjAccy);
		return ret;
	}
	
	public override function bodyImpulse(body:Body) {
		DEBUG(if(body==null) throw "Error: Cannot evaluate impulse on null body";
			  if(body!=body1 && body!=body2) throw "Error: Body is not linked to this constraint";
		)
		if(!active) return new Vec3();
		else        return pr(inner_zn).bodyImpulse(body.pr(inner));
	}
}

)
