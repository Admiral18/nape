package nape.constraint;
$(import);

class Constraint {
    public var pr(inner):PR(Constraint);

    //
    // Field for user to store whatever they wish.
    //
    PublicUserData(pr(inner))

    property(compound, Null<Compound>, {
        /*return*/ if (pr(inner).compound == null) null
                   else pr(inner).compound.outer;
    }, {
        if (this.compound != compound) {
            if(this.compound != null) {
                this.compound.constraints.remove(this);
            }
            if(compound != null) {
                compound.constraints.add(this);
            }
        }
    })

    property(space, Null<Space>, {
        /*return*/ if (pr(inner).space == null) null
                   else pr(inner).space.outer;
    }, {
        DEBUG(
            if (pr(inner).compound != null) {
                throw "Error: Cannot set the space of a Constraint belonging to"
                    + " a Compound, only the root Compound space can be set";
            }
        )

        if(this.space != space) {
            // Prevent a WAKE callback being issued for constraint.
            if (pr(inner).component != null)
                pr(inner).component.woken = false;

            pr(inner).clearcache();

            if (pr(inner).space != null) {
                pr(inner).space.outer.constraints.remove(this);
            }

            if (space != null) {
                space.constraints.add(this);
            }
            else {
                pr(inner).space = null;
            }
        }
    })

    property(isSleeping, Bool, {
        DEBUG(
            if (pr(inner).space == null || !pr(inner).active) {
                throw "Error: isSleeping only makes sense if constraint is"
                    + " active and inside a space";
            }
        )

        /*return*/ pr(inner).component.sleeping;
    })

    property(active, Bool, {
        /*return*/ pr(inner).active;
    }, {
        if (this.active != active) {
            // Prevent a WAKE callback being issued for constraint.
            if (pr(inner).component != null)
                pr(inner).component.woken = false;

            pr(inner).clearcache();

            if (active) {
                pr(inner).active = active;
                pr(inner).activate();
                if (pr(inner).space != null) {
                    // Ensure that constraint is 'woken' even if component
                    // Exists and was set to be asleep.
                    if (pr(inner).component != null)
                        pr(inner).component.sleeping = true;

                    // Passing true ensure in this case no WAKE callback
                    // will be issued.
                    pr(inner).space.wake_constraint(pr(inner), true);
                }
            } else {
                if (pr(inner).space != null) {
                    // Wake the constraint if sleeping to ensure any
                    // Linked objects are woken up before constraint is
                    // removed.
                    pr(inner).wake();
                    pr(inner).space.live_constraints.remove(pr(inner));
                }
                pr(inner).active = active;
                pr(inner).deactivate();
            }
        }
    })

    property(ignore, Bool, {
        /*return*/ pr(inner).ignore;
    }, {
        if (this.ignore != ignore) {
            pr(inner).ignore = ignore;
            pr(inner).wake();
        }
    })

    property(stiff, Bool, {
        /*return*/ pr(inner).stiff;
    }, {
        if (this.stiff != stiff) {
            pr(inner).stiff = stiff;
            pr(inner).wake();
        }
    })

    property(frequency, Float, {
        /*return*/ pr(inner).frequency;
    }, {
        DEBUG(
            if (isNaN(frequency)) {
                throw "Error: Constraint::Frequency cannot be NaN";
            }
            if (frequency <= 0) {
                throw "Error: Constraint::Frequency must be >0";
            }
        )

        if (this.frequency != frequency) {
            pr(inner).frequency = frequency;
            if (!pr(inner).stiff) {
                pr(inner).wake();
            }
        }
    })

    property(damping, Float, {
        /*return*/ pr(inner).damping;
    }, {
        DEBUG(
            if (isNaN(damping)) {
                throw "Error: Constraint::Damping cannot be Nan";
            }
            if (damping < 0) {
                throw "Error: Constraint::Damping must be >=0";
            }
        )

        if (this.damping != damping) {
            pr(inner).damping = damping;
            if (!pr(inner).stiff) {
                pr(inner).wake();
            }
        }
    })

    property(maxForce, Float, {
        /*return*/ pr(inner).maxForce;
    }, {
        DEBUG(
            if (isNaN(maxForce)) {
                throw "Error: Constraint::maxForce cannot be NaN";
            }
            if (maxForce < 0) {
                throw "Error: Constraint::maxForce must be >=0";
            }
        )

        if (this.maxForce != maxForce) {
            pr(inner).maxForce = maxForce;
            pr(inner).wake();
        }
    })

    property(maxError, Float, {
        /*return*/ pr(inner).maxError;
    }, {
        DEBUG(
            if (isNaN(maxError)) {
                throw "Error: Constraint::maxError cannot be NaN";
            }
            if (maxError < 0) {
                throw "Error: Constraint::maxError must be >=0";
            }
        )

        if (this.maxError != maxError) {
            pr(inner).maxError = maxError;
            pr(inner).wake();
        }
    })

    property(breakUnderForce, Bool, {
        /*return*/ pr(inner).breakUnderForce;
    }, {
        if (this.breakUnderForce != breakUnderForce) {
            pr(inner).breakUnderForce = breakUnderForce;
            pr(inner).wake();
        }
    })

    property(breakUnderError, Bool, {
        /*return*/ pr(inner).breakUnderError;
    }, {
        if (this.breakUnderError != breakUnderError) {
            pr(inner).breakUnderError = breakUnderError;
            pr(inner).wake();
        }
    })

    property(removeOnBreak, Bool, {
        /*return*/ pr(inner).removeOnBreak;
    }, {
        /*return*/ pr(inner).removeOnBreak = removeOnBreak;
    })

    // (Abstract)
    //public function jacobian     ():MatMN { return null; }
    //public function effectiveMass():MatMN { return null; }

    //constraint space
    //public function positionError():MatMN { return null; }
    //public function velocityError():MatMN { return null; }
    public function impulse():MatMN { return null; }

    //world space
    public function bodyImpulse(body:Body):Vec3 { return null; }

    public function visitBodies(lambda:Body->Void):Void {}

    property(cbTypes, CbTypeList, {
        if(pr(inner).wrap_cbTypes == null) {
            pr(inner).setupcbTypes();
        }

        /*return*/ pr(inner).wrap_cbTypes;
    })

    public function new() {
        //implicit ANY type
        pr(inner).insert_cbtype(CbType.ANY_CONSTRAINT.pr(inner));
        DEBUG(throw "Error: Constraint cannot be instantiated derp!";)
    }

    @:$keep public function toString():String {
        return "{Constraint}";
    }

    public function copy():Constraint {
        return pr(inner).copy();
    }
}
