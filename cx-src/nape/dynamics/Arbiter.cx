package nape.dynamics;
$(import);

class Arbiter {
	public var pr(inner):PR(Arbiter);
	
    property(id,Int,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        pr(inner).id;
    })
	
    property(active,Bool,pr(inner).active)
	property(isSleeping,Bool,{
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		pr(inner).sleeping;
	})

	//----------------------------------------------------------------------------------------------
	
    property(type,ArbiterType,{
        [ArbiterType.COLLISION,ArbiterType.FLUID,ArbiterType.SENSOR][pr(inner).type];
    })
	
	keep public function isCollisionArbiter() {
		return pr(inner).type == PR(Arbiter).COL;
	}
	keep public function isFluidArbiter() {
		return pr(inner).type == PR(Arbiter).FLUID;
	}
	keep public function isSensorArbiter() {
		return pr(inner).type == PR(Arbiter).SENSOR;
	}
	
	//----------------------------------------------------------------------------------------------
	
    property(collisionArbiter,CollisionArbiter,{
        if(isCollisionArbiter()) pr(inner).colarb.outer_zn else null;
    })

    property(fluidArbiter,FluidArbiter,{
        if(isFluidArbiter()) pr(inner).fluidarb.outer_zn else null;
    })
	
	//----------------------------------------------------------------------------------------------
	
	$(mixin flip() (pr(inner).ws1.id > pr(inner).ws2.id));

    property(shape1,Shape,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        flip ? pr(inner).ws2.outer : pr(inner).ws1.outer;
    })
	property(shape2,Shape,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        flip ? pr(inner).ws1.outer : pr(inner).ws2.outer;
    })

    property(body1,Body,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        flip ? pr(inner).b2.outer : pr(inner).b1.outer;
    })
    property(body2,Body,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
        flip ? pr(inner).b1.outer : pr(inner).b2.outer;
    })

	//----------------------------------------------------------------------------------------------

	property(state,PreFlag,{
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		switch(pr(inner).immState) {
			case Flag(ImmState,ACCEPT) | Flag(ImmState,ALWAYS): PreFlag.ACCEPT;
			case Flag(ImmState,ACCEPT)                        : PreFlag.ACCEPT_ONCE;
			case Flag(ImmState,IGNORE) | Flag(ImmState,ALWAYS): PreFlag.IGNORE;
			default                                           : PreFlag.IGNORE_ONCE;
		}
	})

	//----------------------------------------------------------------------------------------------
	
	keep public function totalImpulse(?body:Body,?freshOnly:Bool=false) {
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)
		
		return new Vec3(0,0,0);
	}
	
	//----------------------------------------------------------------------------------------------
	
	public function new() {
		if(!PR(Arbiter).internal) {
			DEBUG(throw "Error: Cannot instantiate Arbiter derp!";)
		}
	}
	
	@:$keep public function toString() {
		var ret = if(isCollisionArbiter()) "CollisionArbiter";
		else if(isFluidArbiter()) "FluidArbiter";
		else "SensorArbiter";

		#if NAPE_POOL_STATS
		ret += "#"+pr(inner).arbid;
		#end
		
		if(pr(inner).cleared) return ret+"(object-pooled)";
		
		else
		return ret +"("+
			shape1.toString()
		+ "|" +
			shape2.toString()
		+ ")"+(isCollisionArbiter() ? "["+["SD","DD"][pr(inner).colarb.stat?0:1]+"]" : "");
	}
}
