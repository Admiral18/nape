package nape.dynamics;
$(import);

class CollisionArbiter extends Arbiter {

    property(contacts,ContactList,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		if(pr(inner).colarb.wrap_contacts==null)
			pr(inner).colarb.setupcontacts();
		pr(inner).colarb.wrap_contacts;
    })
	
    property(normal,Vec2,{
        DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		if(pr(inner).colarb.wrap_normal==null) pr(inner).colarb.getnormal();
		pr(inner).colarb.wrap_normal;
    },{
		DEBUG(if(!pr(inner).colarb.mutable) throw "Error: CollisionArbiter::normal is only mutable during a pre-handler";)
		DEBUG(if(normal==null) throw "Error: CollisionArbiter::normal cannot be null";)
		this.normal.set(normal);
	})

	property(radius,Float,{
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		pr(inner).colarb.radius;
	},{
		DEBUG(if(!pr(inner).colarb.mutable) throw "Error: CollisionArbiter::radius is only mutable during a pre-handler";)
		DEBUG(if(isNaN(radius)) throw "Error: CollisionArbiter::radius cannot be null";)
		pr(inner).colarb.radius = radius;
	})

	//----------------------------------------------------------------------------------------------
	
	keep public function normalImpulse(?body:Body=null,?freshOnly:Bool=false) {
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)
		
		vec3_new(ret, 0,0,0);
		var colarb = pr(inner).colarb;
		$(mixin con(c) {
			if(!freshOnly || c.fresh) {
				var imp = c.wrapper().normalImpulse(body);
				vec3_addeq(ret,imp.);
			}
		});
		con(colarb.oc1);
		if(colarb.hc2) con(colarb.oc2);
		
		return new Vec3(retx,rety,retz);
	}
	
	keep public function tangentImpulse(?body:Body=null,?freshOnly:Bool=false) {
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)
		
		vec3_new(ret, 0,0,0);
		
		var colarb = pr(inner).colarb;
		$(mixin con(c) {
			if(!freshOnly || c.fresh) {
				var imp = c.wrapper().tangentImpulse(body);
				vec3_addeq(ret,imp.);
			}
		});
		con(colarb.oc1);
		if(colarb.hc2) con(colarb.oc2);
		
		return new Vec3(retx,rety,retz);
	}
	
	keep public override function totalImpulse(?body:Body=null,?freshOnly:Bool=false) {
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)
		
		vec3_new(ret, 0,0,0);
		
		var colarb = pr(inner).colarb;
		$(mixin con(c) {
			if(!freshOnly || c.fresh) {
				var imp = c.wrapper().totalImpulse(body);
				vec3_addeq(ret,imp.);
			}
		});
		con(colarb.oc1);
		if(colarb.hc2) con(colarb.oc2);
		
		return new Vec3(retx,rety,retz);
	}
	
	keep public function rollingImpulse(?body:Body=null,?freshOnly:Bool=false) {
		DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
		DEBUG(if(body!=null && body!=body1 && body!=body2) throw "Error: Arbiter does not relate to body";)
		
		var colarb = pr(inner).colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body);
		else return 0.0;
	}
	
	//----------------------------------------------------------------------------------------------
	
    $(mixin prop(N,n)
        property(N,Float,{
            DEBUG(if(pr(inner).inactiveme()) throw "Error: Arbiter not currently in use";)
            var colarb = pr(inner).colarb;
            colarb.validate_props();
            colarb.n;
        })
    );
    prop(restitution,     restitution)
    prop(dynamicFriction, dyn_fric)
    prop(staticFriction,  stat_fric)
    prop(rollingFriction, rfric)

	//----------------------------------------------------------------------------------------------
	
	public function new() {
		DEBUG(if(!PR(Arbiter).internal)
			throw "Error: Cannot instantiate CollisionArbiter derp!";
		)
		super();
	}
}

