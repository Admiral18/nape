package nape.phys;
$(import);

class Compound extends Interactor {
	public var pr(inner):PR(Compound);

	property(bodies,BodyList,{
		Destroyed(this,Compound)
		pr(inner).wrap_bodies;
	})
	property(constraints,ConstraintList,{
		Destroyed(this,Compound)
		pr(inner).wrap_constraints;
	})
	property(compounds,CompoundList,{
		Destroyed(this,Compound)
		pr(inner).wrap_compounds;
	})

	property(compound,Compound,{
		Destroyed(this,Compound)
		if(pr(inner).compound==null) null else pr(inner).compound.outer;
	},{
		Destroyed(this,Compound)
		pr(inner).immutable_midstep("Compound::compound");
		if(this.compound!=compound) {
			if(this.compound!=null) this.compound.compounds.remove(this);
			if(compound!=null) compound.compounds.add(this);
		}
	})

	property(space,Space,{
		Destroyed(this,Compound)
		if(pr(inner).space==null) null else pr(inner).space.outer;
	},{
		Destroyed(this,Compound)
		DEBUG(if(pr(inner).compound!=null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";)
		pr(inner).immutable_midstep("Compound::space");
		if(this.space!=space) {
			if(this.space!=null) this.space.compounds.remove(this);
			if(space!=null) space.compounds.add(this);
		}
	})

	public function new() {
		DEBUG(try { super(); } catch (e:Dynamic) {})
		RELEASE(super();)

		pr(inner) = new PR(Compound)();
		pr(inner).outer = this;
		pr(inner).outer_i = this;
		pr(inner_i) = pr(inner);
	}

	@:$keep public override function toString() {
		Destroyed(this,Compound)
		return "Compound#"+id;
	}

	public override function destroy(recursive=false):Void {
		Destroyed(this,Compound)
		pr(inner).immutable_midstep("Compound::space");
		userData = null;
		pr(inner).__destroy(recursive);
		pr(inner) = null;
	}

	public function copy() {
		Destroyed(this,Compound)
		return pr(inner).copy();
	}

	public function breakApart() {
		Destroyed(this,Compound)
		pr(inner).breakApart();
	}

	public function visitBodies(lambda:Body->Void) {
		Destroyed(this,Compound)
		DEBUG(if(lambda==null) throw "Error: lambda cannot be null for Compound::visitBodies";)
		for(b in bodies) lambda(b);
		for(c in compounds) c.visitBodies(lambda);
	}
	public function visitConstraints(lambda:Constraint->Void) {
		Destroyed(this,Compound)
		DEBUG(if(lambda==null) throw "Error: lambda cannot be null for Compound::visitConstraints";)
		for(c in constraints) lambda(c);
		for(c in compounds) c.visitConstraints(lambda);
	}
	public function visitCompounds(lambda:Compound->Void) {
		Destroyed(this,Compound)
		DEBUG(if(lambda==null) throw "Error: lambda cannot be null for Compound::visitConstraints";)
		for(c in compounds) {
			lambda(c);
			c.visitCompounds(lambda);
		}
	}

	public function COM() {
		Destroyed(this,Compound)
		var ret = new Vec2();
		var total = 0.0;
		visitBodies(function (b) {
			ret.addeq(b.worldCOM.mul(b.mass,true));
			total += b.mass;
		});
		ret.muleq(1/total);
		return ret;
	}

	public function translate(translation:Vec2) {
		Destroyed(this,Compound)
		Destroyed(translation,Vec2);
		DEBUG(if(translation==null) throw "Error: Cannot translate by null Vec2";)
		var weak = translation.pr(inner).weak;
		translation.pr(inner).weak = false;

		visitBodies(function (b) b.position.addeq(translation));

		translation.pr(inner).weak = weak;
		WEAK(translation);
	}

	public function rotate(centre:Vec2,angle:Float) {
		Destroyed(this,Compound)
		Destroyed(centre,Vec2);
		DEBUG(if(centre==null) throw "Error: Cannot rotate about a null Vec2";)
		DEBUG(if(isNaN(angle)) throw "Error: Cannot rotate by NaN radians";)
		var weak = centre.pr(inner).weak;
		centre.pr(inner).weak = false;

		visitBodies(function (b) b.rotate(centre,angle));

		centre.pr(inner).weak = weak;
		WEAK(centre);
	}

}
