package nape.callbacks;
$(import);

class OptionType {
	public var pr(inner):PR(OptionType);

	$(mixin ANY(T)
		public static var ANY_`T(flibget_ANY_`T,never):OptionType;
		force_inline static function flibget_ANY_`T() {
			var ret = new OptionType();
			ret.pr(inner).includes.add(PR(CbType).ANY_`T);
			return ret;
		}
	);
	ANY(BODY) ANY(SHAPE) ANY(COMPOUND) ANY(CONSTRAINT)

	property(includes,CbTypeList,{
		if(pr(inner).wrap_includes==null) pr(inner).setup_includes();
		pr(inner).wrap_includes;
	})
	property(excludes,CbTypeList,{
		if(pr(inner).wrap_excludes==null) pr(inner).setup_excludes();
		pr(inner).wrap_excludes;
	})

	flibopts(2)
	public function new(includes:Dynamic=null, excludes:Dynamic=null) {
		pr(inner) = new PR(OptionType)();
		pr(inner).outer = this;
		if(includes!=null) include(includes);
		if(excludes!=null) exclude(excludes);
	}

	public function include(includes:Dynamic=null) {
		pr(inner).append(pr(inner).includes,includes);
		return this;
	}
	public function exclude(excludes:Dynamic=null) {
		pr(inner).append(pr(inner).excludes,excludes);
		return this;
	}

	@:$keep public function toString() {
		var inc =
			if  (pr(inner).includes.has(PR(CbType).ANY_BODY)) "[ANY_BODY"
			elif(pr(inner).includes.has(PR(CbType).ANY_SHAPE)) "[ANY_SHAPE"
			elif(pr(inner).includes.has(PR(CbType).ANY_COMPOUND)) "[ANY_COMPOUND"
			elif(pr(inner).includes.has(PR(CbType).ANY_CONSTRAINT)) "[ANY_CONSTRAINT"
			else "[";
		var inc2 = includes.toString();
		if(inc2=="[]") inc += "]";
		else inc += (if(inc=="[") "" else ",") + inc2.substr(1);

		var exc = excludes.toString();
		return "@{"+inc+"-"+exc+"}";
	}
}
