package nape.callbacks;
$(import);

class ConstraintListener extends Listener {
    public var pr(inner_zn):PR(ConstraintListener);

    property(options,OptionType,pr(inner_zn).options.outer,pr(inner_zn).options.set(options.pr(inner)))

    property(handler,ConstraintCallback->Void,pr(inner_zn).handler,{
        DEBUG(if(handler==null)throw "Error: ConstraintListener::handler cannot be null";)
        pr(inner_zn).handler = handler;
    })

    ///---------------------------------------------------------------------------------------------

    flibopts(1)
    public function new(event:CbEvent, options:Dynamic, handler:ConstraintCallback->Void, ?precedence=0) {
        PR(Listener).internal = true; super(); PR(Listener).internal = false;
        
        DEBUG(if(handler==null)throw "Error: ConstraintListener::handler cannot be null";)

        var xevent = -1;
        if     (event==CbEvent.WAKE)  xevent = Flag(CbEvent,WAKE);
        else if(event==CbEvent.SLEEP) xevent = Flag(CbEvent,SLEEP);
        else if(event==CbEvent.BREAK) xevent = Flag(CbEvent,BREAK);
        else { DEBUG(throw "Error: cbEvent '"+event.toString()+"' is not a valid event type for a ConstraintListener";) }

        pr(inner_zn) = new PR(ConstraintListener)(PR(OptionType).argument(options),xevent,handler);
        pr(inner) = pr(inner_zn);
        pr(inner).outer = this;
        pr(inner_zn).outer_zn = this;
        pr(inner).precedence = precedence;
    }
}


