package nape.callbacks;
$(import);

Flags(CbEvent,
	prop(BEGIN,0)
	prop(ONGOING,6)
	prop(END,1)
	
	prop(WAKE,2)
	prop(SLEEP,3)
	
	prop(BREAK,4)

	prop(PRE,5)
)

class Callback {
	public var pr(inner):PR(Callback);

    property(event,CbEvent,{
        [CbEvent.BEGIN,CbEvent.END,CbEvent.WAKE,CbEvent.SLEEP,CbEvent.BREAK,CbEvent.ONGOING][pr(inner).event];
    })

    property(listener,Listener,{
        pr(inner).listener.outer;
    })

    ///---------------------------------------------------------------------------------------------
	
	public function new() {
		DEBUG(if(!PR(Callback).internal) throw "Error: Callback cannot be instantiated derp!";)
	}

    @:$keep public function toString():String { return ""; }
}

class BodyCallback extends Callback {
	public function new() {
		super();
	}
	
    property(body,Body,pr(inner).body.outer)

	@:$keep public override function toString() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][pr(inner).event-Flag(CbEvent,WAKE)];
		ret += ":"+body.toString();
		ret += " : listener: "+listener;
		return ret;
	}
}

class ConstraintCallback extends Callback {
	public function new() {
		super();
	}
	
    property(constraint,Constraint,pr(inner).constraint.outer)

	@:$keep public override function toString() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][pr(inner).event-Flag(CbEvent,WAKE)];
		ret += ":"+constraint.toString();
		ret += " : listener: "+listener;
		return ret;
	}
}

class InteractionCallback extends Callback {
	public function new() {
		super();
	}

	property(int1,Interactor,pr(inner).int1.outer_i)
	property(int2,Interactor,pr(inner).int2.outer_i)

	property(arbiters,ArbiterList, pr(inner).wrap_arbiters)

	@:$keep public override function toString() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][pr(inner).event];
		ret += ":"+int1.toString()+"/"+int2.toString();
		ret += " : "+arbiters.toString();
		ret += " : listener: "+listener;
		return ret;
	}
}
