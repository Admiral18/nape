package nape.callbacks;

import nape.callbacks.Callback;
import nape.phys.Interactor;
import nape.dynamics.ArbiterList;
import nape.callbacks.CbType;
import nape.callbacks.CbEvent;
import nape.callbacks.InteractionType;
import zpp_nape.util.Flags;
import zpp_nape.util.Names;
import zpp_nape.callbacks.Listener;

class InteractionListener extends Listener {
	public var pr(inner_zn):PR(InteractionListener);

	property(cbType1,CbType,pr(inner_zn).cb1.wrapper(),{
		DEBUG(if(cbType1==null) throw "Error: Cannot assign null CbType to Listener";)

		var con = pr(inner_zn);
		if(con.cb1==null || con.cb1!=cbType1.pr(inner))
			con.swapCbType(1, cbType1.pr(inner));
	})
	property(cbType2,CbType,pr(inner_zn).cb2.wrapper(),{
		DEBUG(if(cbType2==null) throw "Error: Cannot assign null CbType to Listener";)

		var con = pr(inner_zn);
		if(con.cb2==null || con.cb2!=cbType2.pr(inner))
			con.swapCbType(2, cbType2.pr(inner));
	})

	property(interactionType,InteractionType,{
		var ret = pr(inner_zn).itype;
		if  (ret==Flag(InteractionType,COLLISION)) InteractionType.COLLISION;
		elif(ret==Flag(InteractionType,SENSOR))    InteractionType.SENSOR;
		elif(ret==Flag(InteractionType,FLUID))     InteractionType.FLUID;
		elif(ret==Flag(InteractionType,ANY))       InteractionType.ANY;
		else null;
	},{
        DEBUG(if(interactionType==null) throw "Error: Cannot set listener interaction type to null";)
        if(this.interactionType!=interactionType) {
            var xtype = interactionType == InteractionType.COLLISION ? Flag(InteractionType,COLLISION) :
                        interactionType == InteractionType.SENSOR    ? Flag(InteractionType,SENSOR)    :
                        interactionType == InteractionType.FLUID     ? Flag(InteractionType,FLUID)     :
                        Flag(InteractionType,ANY);
			pr(inner_zn).settype(xtype);
        }
	})

    property(handler,InteractionCallback->Void,pr(inner_zn).handleri,{
		DEBUG(if(handler==null)throw "Error: InteractionListener::handler cannot be null";)
		pr(inner_zn).handleri = handler;
	})

    ///---------------------------------------------------------------------------------------------

	flibopts(1)
	public function new(event:CbEvent, interactionType:InteractionType, cbType1:CbType, cbType2:CbType, handler:InteractionCallback->Void, ?precedence=0) {
		PR(Listener).internal = true; super(); PR(Listener).internal = false;

		DEBUG(if(handler==null)throw "Error: InteractionListener::handler cannot be null";)

		DEBUG(if(event==null) throw "Error: CbEvent cannot be null for InteractionListener";)
		var xevent = -1;
		if     (event==CbEvent.BEGIN)   xevent = Flag(CbEvent,BEGIN);
		else if(event==CbEvent.END)     xevent = Flag(CbEvent,END);
		else if(event==CbEvent.ONGOING) xevent = Flag(CbEvent,ONGOING);
		DEBUG(else throw "Error: CbEvent '"+event.toString()+"' is not a valid event type for InteractionListener";)
		
		DEBUG(if(cbType1==null) throw "Error: InteractionListener cbType1 cannot be null";)
		DEBUG(if(cbType2==null) throw "Error: InteractionListener cbType2 cannot be null";)

		pr(inner_zn) = new PR(InteractionListener)(xevent,Flag(ListenerType,INTERACTION));
		pr(inner) = pr(inner_zn);
		pr(inner).outer = this;
		pr(inner_zn).outer_zni = this;
		pr(inner).precedence = precedence;

		pr(inner_zn).handleri = handler;
		this.cbType1 = cbType1;
		this.cbType2 = cbType2;
		this.interactionType = interactionType;
	}
}

