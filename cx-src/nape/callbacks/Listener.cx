package nape.callbacks;

import zpp_nape.callbacks.Listener;
import zpp_nape.util.Names;
import zpp_nape.util.Flags;
import nape.space.Space;

class Listener {
    public var pr(inner):PR(Listener);

    property(type,ListenerType,{
        [ListenerType.BODY,ListenerType.CONSTRAINT,ListenerType.INTERACTION,ListenerType.PRE][pr(inner).type];
    })
    property(event,CbEvent,{
        [CbEvent.BEGIN,CbEvent.END,CbEvent.WAKE,CbEvent.SLEEP,CbEvent.BREAK,CbEvent.PRE][pr(inner).event];
    },{
        DEBUG(if(event==null) throw "Error: Cannot set listener event type to null";)
        if(this.event!=event) {
            var xevent = event == CbEvent.BEGIN   ? Flag(CbEvent,BEGIN)   :
						 event == CbEvent.ONGOING ? Flag(CbEvent,ONGOING) :
                         event == CbEvent.END     ? Flag(CbEvent,END)     :
                         event == CbEvent.SLEEP   ? Flag(CbEvent,SLEEP)   :
                         event == CbEvent.WAKE    ? Flag(CbEvent,WAKE)    :
						 event == CbEvent.PRE     ? Flag(CbEvent,PRE)     :
                         Flag(CbEvent,BREAK);
            if(pr(inner).type == Flag(ListenerType,BODY))
                pr(inner).body.swapEvent(xevent);
            else if(pr(inner).type == Flag(ListenerType,CONSTRAINT))
                pr(inner).constraint.swapEvent(xevent);
			else
				pr(inner).interaction.swapEvent(xevent);
        }
    })

    ///---------------------------------------------------------------------------------------------

    public function new() {
        DEBUG(if(!PR(Listener).internal) throw "Error: Cannot instantiate Listener derp!";)
    }

    ///---------------------------------------------------------------------------------------------

    property(space,Space,{
        if(pr(inner).space==null) null else pr(inner).space.outer;
    },{
        if(this.space!=space) {
            if(pr(inner).space!=null) pr(inner).space.outer.listeners.remove(this);
            if(space!=null) space.listeners.add(this); 
            else pr(inner).space = null;
        }
    })

    ///---------------------------------------------------------------------------------------------

    @:$keep public function toString() {
        var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][pr(inner).event];
        if(pr(inner).type == Flag(ListenerType,BODY)) {
            var body = pr(inner).body;
            return "BodyListener{"+event+"::"+body.outer_zn.cbType+"}";
        }else if(pr(inner).type == Flag(ListenerType,CONSTRAINT)) {
            var con = pr(inner).constraint;
            return "ConstraintListener{"+event+"::"+con.outer_zn.cbType+"}";
		}else {
			var con = pr(inner).interaction;
			var itype = switch(con.itype) {
				case Flag(InteractionType,COLLISION): "COLLISION";
				case Flag(InteractionType,SENSOR):    "SENSOR";
				case Flag(InteractionType,FLUID):     "FLUID";
				default: "ALL";
			}
			var ret = if(pr(inner).type==Flag(ListenerType,INTERACTION))
				 "InteractionListener{"+event+"#";
			else "PreListener{";
			return ret+itype+"::"+con.outer_zni.cbType1+":"+con.outer_zni.cbType2+"}";
		}
    }
}

