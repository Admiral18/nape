package nape.util;
$(import);

/**

	User exposed list types.
	
	WrapList(T,ListT,IteT, defs) :
		Type name, eg: Body
		Underlying list name, eg: List(PR(Body))
		Underlying iterator name, eg: Node(PR(Body))
		
		defs: list of further definitions as mixins.
			use_accept -> Bool; if true then this exposed list will transparently hide certain
								elements as described by accept(x)
			accept(x) -> Bool ; if true for given x, then x will be exposed to the user.
			
			use_inline -> Bool; if true then whichever methods can, will be inlined, goes hand in
								hand with inline macro, which should simply be '$inline' if you want
								inlining.
					
			copy_elt(o:T) -> T ; describe how an object in the user-exposed list must be copied.
			
			reversal(i:Int) -> Int ; return index of element 'i' when list has been reversed
					IF this is not the default, then LIST CANNOT BE MUTABLE (avoids complication)

	assumption: use_accept <=> immutable list (avoids complication also)

	//-----------
	
	if not using inlining, can override how the list is accessed in a more fundamental way than
	though accepting macro by overriding methods like push/pop/at, and also by overriding the
	pr(vm) and pr(gl) methods which only exist for non-inlined lists to handle validation of the list
	and length of the list respectively.
	
**/

$(mixin global WrapList(T,ListT,IteT, defs)
	$(mixin accept(x) true);
	$(mixin use_accept false);
	
	$(mixin inline $inline);
	$(mixin use_inline true);
	
	$(mixin copy_elt(o) { DEBUG(throw "Error: "+$str(T)+" is not a copyable type"; ) null; });
	
	$(mixin reversal(i) (length-1-i));
	
	class T`List {
		defs
		
		public var pr(inner):PR(T`List);
		
		public var length(flibget_length,never):Int;
		//this must truly be inlined for swc.
		#if use_inline
			force_inline function flibget_length() {
				pr(inner).valmod();
			
				if(pr(inner).inv(length)) {
					pr(inner).inv(length) = false;
					
					if(use_accept) {
						pr(inner).user_length = 0;
						Iter(i,pr(inner).inner,if(accept(i)) pr(inner).user_length++);
					}else
						pr(inner).user_length = pr(inner).length;
				}
				return pr(inner).user_length;
			}
		#else
			force_inline function flibget_length() {
				return pr(gl)();
			}
			public function pr(gl)() {
				pr(inner).valmod();
				
				if(pr(inner).inv(length)) {
					pr(inner).inv(length) = false;
					
					if(use_accept) {
						pr(inner).user_length = 0;
						Iter(i,pr(inner).inner,if(accept(i)) pr(inner).user_length++);
					}else
						pr(inner).user_length = pr(inner).length;
				}
				return pr(inner).user_length;
			}
			
			public function pr(vm)() {
				pr(inner).valmod();
			}
		#end
		
		keep public static function fromArray(array:#if flash9 Array<Dynamic> #else Array<T> #end) {
			var ret = new T`List();
			for(i in array) {
				#if flash9
					DEBUG(if(!Std.is(i,T)) throw "Error: Array contains non "+$str(T)+" types.";)
				#end
				ret.push(i);
			}
			return ret;
		}
		#if flash9
		keep public static function fromVector(vector:flash.Vector<T>) {
			var ret = new T`List();
			for(i in vector)
				ret.push(i);
			return ret;
		}
		#end

        keep public function has(obj:T):Bool {
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
            return pr(inner).inner.has(erusolc(obj));
		}

		//optimised for fast sequential access when preferebal to use of iterator.
		keep public function at(index:Int):T {
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			DEBUG(if(index<0 || index>=length) throw "Error: Index out of bounds";)
			
			if(pr(inner).reverse_flag) index = reversal(index);

			if(!use_accept) {
				if(index<pr(inner).at_index || pr(inner).at_ite==null) {
					pr(inner).at_index = index;
					pr(inner).at_ite = pr(inner).inner.iterator_at(index);
				}else {
					while(pr(inner).at_index!=index) {
						pr(inner).at_index++;
						pr(inner).at_ite = pr(inner).at_ite.next;
					}
				}
			}else {
				if(index<pr(inner).at_index || pr(inner).at_ite==null) {
					pr(inner).at_index = 0;
					pr(inner).at_ite = pr(inner).inner.begin();
					while(true) {
						var x = pr(inner).at_ite.elem();
						if(accept(x)) break;
						pr(inner).at_ite = pr(inner).at_ite.next;
					}
				}
				while(pr(inner).at_index!=index) {
					pr(inner).at_index++;
					pr(inner).at_ite = pr(inner).at_ite.next;
					while(true) {
						var x = pr(inner).at_ite.elem();
						if(accept(x)) break;
						pr(inner).at_ite = pr(inner).at_ite.next;
					}
				}
			}
			
			return closure(pr(inner).at_ite.elem());
		}
		
		keep public function push(obj:T) {
			DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
			pr(inner).modify_test();
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			var cont = if(pr(inner).adder!=null) pr(inner).adder(obj) else true;
			if(cont) {
				if(pr(inner).reverse_flag)
					pr(inner).inner.add(erusolc(obj));
				else {
					if(pr(inner).push_ite==null) pr(inner).push_ite = empty() ? null : pr(inner).inner.iterator_at(length-1);
					pr(inner).push_ite = pr(inner).inner.insert(pr(inner).push_ite,erusolc(obj));
				}
				pr(inner).invalidate();
				
				if(pr(inner).post_adder!=null) pr(inner).post_adder(obj);
			}
			return cont;
		}
		keep public function unshift(obj:T) {
			DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
			pr(inner).modify_test();
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			var cont = if(pr(inner).adder!=null) pr(inner).adder(obj) else true;
			if(cont) {
				if(pr(inner).reverse_flag) {
					if(pr(inner).push_ite==null) pr(inner).push_ite = empty() ? null : pr(inner).inner.iterator_at(length-1);
					pr(inner).push_ite = pr(inner).inner.insert(pr(inner).push_ite,erusolc(obj));
				}else
					pr(inner).inner.add(erusolc(obj));
				pr(inner).invalidate();
				
				if(pr(inner).post_adder!=null) pr(inner).post_adder(obj);
			}
			return cont;
		}
		
		keep public function pop():T {
			DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
			pr(inner).modify_test();
			DEBUG(if(empty()) throw "Error: Cannot remove from empty list";)
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			var ret = null;
			if(pr(inner).reverse_flag) {
				ret = pr(inner).inner.front();
				var retx = closure(ret);
				if(pr(inner).subber!=null) pr(inner).subber(retx);
				pr(inner).inner.pop();
			}else {
				if(pr(inner).at_ite!=null && pr(inner).at_ite.next == null) pr(inner).at_ite = null;
				var ite = length==1 ? null : pr(inner).inner.iterator_at(length-2);
				ret = ite == null ? pr(inner).inner.front() : ite.next.elem();
				var retx = closure(ret);
				if(pr(inner).subber!=null) pr(inner).subber(retx);
				pr(inner).inner.erase(ite);
			}
			
			pr(inner).invalidate();
			var retx = closure(ret);
			return retx;
		}
		keep public function shift():T {
			DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
			pr(inner).modify_test();
			DEBUG(if(empty()) throw "Error: Cannot remove from empty list";)
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			var ret = null;
			if(pr(inner).reverse_flag) {
				if(pr(inner).at_ite!=null && pr(inner).at_ite.next == null) pr(inner).at_ite = null;
				var ite = length==1 ? null : pr(inner).inner.iterator_at(length-2);
				ret = ite == null ? pr(inner).inner.front() : ite.next.elem();
				var retx = closure(ret);
				if(pr(inner).subber!=null) pr(inner).subber(retx);
				pr(inner).inner.erase(ite);
			}else {
				ret = pr(inner).inner.front();
				var retx = closure(ret);
				if(pr(inner).subber!=null) pr(inner).subber(retx);
				pr(inner).inner.pop();
			}
			
			pr(inner).invalidate();
			var retx = closure(ret);
			return retx;
		}
		
		keep public inline function add(obj:T) return if(pr(inner).reverse_flag) push(obj) else unshift(obj)
		keep public function remove(obj:T):Bool {
			DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
			pr(inner).modify_test();
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			
			var ret = Exists(x,pr(inner).inner, x==erusolc(obj));
			if(ret) {
				if(pr(inner).subber!=null) pr(inner).subber(obj);
				pr(inner).inner.remove(erusolc(obj));
				pr(inner).invalidate();
			}
			return ret;
		}
		
        keep public function clear() {
            DEBUG(if(pr(inner).immutable) throw "Error: "+$str(T)+"List is immutable";)
            if(pr(inner).reverse_flag) {
                while(!empty()) pop();
            }else {
                while(!empty()) shift();
            }
        }

		keep public inline function empty() {
			#if use_inline
				if(use_accept) return length==0;
				else return pr(inner).inner.empty();
			#else
				return length==0;
			#end
		}
		
		keep public inline function iterator() {
			#if use_inline pr(inner).valmod(); #else pr(vm)(); #end
			if(pr(inner).iterators==null) pr(inner).iterators = new List(T`Iterator)();
			
			return T`Iterator.get(this);
		}
		
		keep public function copy(?deep:Bool=false) {
			var ret = new T`List();
			for(i in this) ret.push(deep ? copy_elt(i) : i);
			return ret;
		}

		keep public function merge(xs:T`List):Void {
			DEBUG(if(xs==null) throw "Error: Cannot merge with null list";)
			for(x in xs) {
				if(!has(x)) add(x);
			}
		}

		public function new() {
			pr(inner) = new PR(T`List)();
			pr(inner).outer = this;
		}
		
		@:$keep public function toString() {
			var ret = "[";
			var fst = true;
			for(i in this) {
				if(!fst) ret += ",";
				ret += (i==null ? "NULL" : i.toString());
				fst = false;
			}
			return ret+"]";
		}

		keep public function foreach(lambda:T->Void) {
			DEBUG(if(lambda==null) throw "Error: Cannot execute null on list elements";)
			var it = iterator();
			while(it.hasNext()) {
				try {
					lambda(it.next());
				}catch(e:Dynamic) {
					RELEASE_ITERATOR(T`Iterator,it);
					break;
				}
			}
		}
		keep public function filter(lambda:T->Bool):T`List {
			DEBUG(if(lambda==null) throw "Error: Cannot select elements of list with null";)
			var i = 0;
			while(i<length) {
				var x = at(i);
				try {
					if(lambda(x)) i++;
					else {
						remove(x);
						i++;
					}
				}catch(e:Dynamic) {
					break;
				}
			}
			return this;
		}
	}
	class T`Iterator {
		public var pr(inner):T`List;
		public var pr(i):Int;
		public var pr(critical):Bool;
		
		//MixPool(T`Iterator) //cannot use this due to method 'next'
		CLEARITERATOR(T`Iterator)
		public static var pr(pool):T`Iterator;
		public var pr(next):T`Iterator;
		
		public function new() {
			DEBUG(if(!PR(T`List).internal)
				throw "Error: Cannot instantiate "+$str(T)+"Iterator derp!";
			)
		}
		
		public static function get(list:T`List) {
			var ret = if(pr(pool)==null) {
				PR(T`List).internal = true;
				var ret = new T`Iterator();
				PR(T`List).internal = false;
				ret;
			}else {
				var r = pr(pool);
				pr(pool) = r.pr(next);
				r;
			}
			ret.pr(i) = 0;
			ret.pr(inner) = list;
			ret.pr(critical) = false;
			list.pr(inner).iterators.add(ret);
			return ret;
		}
	
		$(mixin file RELEASE_ITERATOR(I,i) {
			i.pr(next) = I.pr(pool);
			I.pr(pool) = i;
			i.pr(inner).pr(inner).iterators.remove(i);
			i.pr(inner) = null;
		});
		
		keep public inline function hasNext() {
			#if use_inline pr(inner).pr(inner).valmod(); #else pr(inner).pr(vm)(); #end
			var length = pr(inner).length;
			pr(critical) = true;
			
			if(pr(i)<length) {
				return true;
			} else {
				//Free(T`Iterator,this);
				RELEASE_ITERATOR(T`Iterator,this);
				return false;
			}
		}
		keep public inline function next() {
			pr(critical) = false;
			return pr(inner).at(pr(i)++);
		}
	}
	
	PRWrapList(T,ListT,IteT)
);
