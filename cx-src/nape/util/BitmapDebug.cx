package nape.util;
$(import);

#if flash10

class BitmapDebug extends Debug {
    public var pr(inner_zn):PR(BitmapDebug);

    flibopts(2)
    public function new(width:Int, height:Int, bgColor:Int = 0x333333, transparent:Bool=false) {
        DEBUG(if(width <=0) throw "Error: Debug width must be > 0";)
        DEBUG(if(height<=0) throw "Error: Debug height must be > 0";)

        DEBUG(PR(Debug).internal = true;)
        super();
        DEBUG(PR(Debug).internal = false;)

        pr(inner_zn) = new PR(BitmapDebug)(width,height,bgColor,transparent);
        pr(inner_zn).outer_zn = this;
        pr(inner) = pr(inner_zn);
        pr(inner).outer = this;
    }

    ///---------------------------------------------------------------------------------------------

    public override function clear() {
        pr(inner_zn).prepare();
        pr(inner_zn).clear();
    }
    public override function flush() {
        pr(inner_zn).prepare();
        pr(inner_zn).flush();
    }

    ///---------------------------------------------------------------------------------------------

    public override function drawLine(start:Vec2, end:Vec2, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        Disposed(start,Vec2);
        Disposed(end,Vec2);
        DEBUG(
            if(start==null) throw "Error: drawLine::start cannot be null";
            if(end  ==null) throw "Error: drawLine::end cannot be null";
        )
        pr(inner_zn).prepare();
        if(pr(inner).xnull) {
            var x0:Int = fastint(start.x+0.5);
            var y0:Int = fastint(start.y+0.5);
            var x1:Int = fastint(end.x+0.5);
            var y1:Int = fastint(end.y+0.5);
            pr(inner_zn).__line(x0,y0,x1,y1,colour|0xff000000);

            WEAK(start);
            WEAK(end);
        }else {
            var v = pr(inner).xform.outer.transform(start);
            var x0:Int = fastint(v.x+0.5);
            var y0:Int = fastint(v.y+0.5);
            v.dispose();
            v = pr(inner).xform.outer.transform(end);
            var x1:Int = fastint(v.x+0.5);
            var y1:Int = fastint(v.y+0.5);
            v.dispose();
            pr(inner_zn).__line(x0,y0,x1,y1,colour|0xff000000);
        }
    }

    public override function drawCurve (start:Vec2, control:Vec2, end:Vec2, colour:Int):Void {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        Disposed(start,Vec2);
        Disposed(control,Vec2);
        Disposed(end,Vec2);
        DEBUG(
            if(start==null) throw "Error: drawCurve::start cannot be null";
            if(control==null) throw "Error: drawCurve::control cannot be null";
            if(end==null) throw "Error: drawCurve::end cannot be null";
        )
        pr(inner_zn).prepare();
        if(pr(inner).xnull) {
            pr(inner_zn).__curve(start,control,end,colour);

            WEAK(start);
            WEAK(control);
            WEAK(end);
        }else {
            var u = pr(inner).xform.outer.transform(start);
            var v = pr(inner).xform.outer.transform(control);
            var q = pr(inner).xform.outer.transform(end);
            pr(inner_zn).__curve(u,v,q,colour);
            u.dispose();
            v.dispose();
            q.dispose();
        }
    }

    public override function drawCircle(position:Vec2, radius:Float, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        Disposed(position,Vec2);
        DEBUG(
            if(position==null) throw "Error: drawCircle::position cannot be null";
            if(isNaN(radius) || radius<0) throw "Error: drawCircle::radius must be >=0";
        )
        pr(inner_zn).prepare();
        if(pr(inner).xnull) {
            var x:Int = fastint(position.x+0.5);
            var y:Int = fastint(position.y+0.5);
            var r:Int = fastint(radius+0.5);
            pr(inner_zn).__circle(x,y,r, colour|0xff000000);

            WEAK(position);
        }else {
            var v = pr(inner).xform.outer.transform(position);
            var x:Int = fastint(v.x+0.5);
            var y:Int = fastint(v.y+0.5);
            v.dispose();
            var r:Int = fastint(radius*pr(inner).xdet+0.5);
            pr(inner_zn).__circle(x,y,r, colour|0xff000000);
        }
    }

    public override function drawAABB(aabb:AABB, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        DEBUG(if(aabb==null) throw "Error: drawAABB::aabb cannot be null";)
        pr(inner_zn).prepare();
        if(pr(inner).xnull)
            pr(inner_zn).__aabb(aabb.pr(inner), colour);
        else {
            var v = pr(inner).xform.outer.transform(aabb.min);
            var w = Vec2.get(aabb.width,0);  var w2 = pr(inner).xform.outer.transform(w,true);
            var h = Vec2.get(0,aabb.height); var h2 = pr(inner).xform.outer.transform(h,true);

            var x0:Int = fastint(v.x+0.5);
            var y0:Int = fastint(v.y+0.5);
            var x1:Int = fastint(v.x+w2.x+0.5);
            var y1:Int = fastint(v.y+w2.y+0.5);
            var x2:Int = fastint(v.x+w2.x+h2.x+0.5);
            var y2:Int = fastint(v.y+w2.y+h2.y+0.5);
            var x3:Int = fastint(v.x+h2.x+0.5);
            var y3:Int = fastint(v.y+h2.y+0.5);

            v.dispose();
            w.dispose(); w2.dispose();
            h.dispose(); h2.dispose();

            var col = colour|0xff000000;
            pr(inner_zn).__line(x0,y0,x1,y1,col);
            pr(inner_zn).__line(x1,y1,x2,y2,col);
            pr(inner_zn).__line(x2,y2,x3,y3,col);
            pr(inner_zn).__line(x3,y3,x0,y0,col);
        }
    }

    public override function drawFilledTriangle(p0:Vec2, p1:Vec2, p2:Vec2, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        Disposed(p0,Vec2); Disposed(p1,Vec2); Disposed(p2,Vec2);
        DEBUG(if(p0==null || p1==null || p2==null) throw "Error: drawFilledTriangle can't use null points";)
        pr(inner_zn).prepare();
        pr(inner_zn).__tri(p0,p1,p2, colour);

        WEAK(p0); WEAK(p1); WEAK(p2);
    }

    public override function drawFilledCircle(position:Vec2, radius:Float, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)

        Disposed(position,Vec2);
        DEBUG(
            if(position==null) throw "Error: drawFilledCircle::position cannot be null";
            if(isNaN(radius) || radius<0) throw "Error: drawFilledCircle::radius must be >=0";
        )
        pr(inner_zn).prepare();
        if(pr(inner).xnull) {
            var x:Int = fastint(position.x+0.5);
            var y:Int = fastint(position.y+0.5);
            var r:Int = fastint(radius+0.5);
            pr(inner_zn).__fcircle(x,y,r, colour|0xff000000);

            WEAK(position);
        }else {
            var v = pr(inner).xform.outer.transform(position);
            var x:Int = fastint(v.x+0.5);
            var y:Int = fastint(v.y+0.5);
            v.dispose();
            var r:Int = fastint(radius*pr(inner).xdet+0.5);
            pr(inner_zn).__fcircle(x,y,r, colour|0xff000000);
         }

    }

    public override function drawPolygon(polygon:Dynamic, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)
        DEBUG(if(polygon==null) throw "Error: Cannot draw null Vec2 list";)

        pr(inner_zn).prepare();
        var col = colour|0xff000000;
        var fx:Int,fy:Int;

        var fst = null;
        var px:Int,py:Int;

        fx = fy = px = py = 0;
        PolyIter(p, polygon, {
            var cx:Int, cy:Int;
            var fsttime = fst==null;
            if(pr(inner).xnull) {
                cx = fastint(p.x+0.5);
                cy = fastint(p.y+0.5);
                if(fsttime) fst = p.copy();
            }else {
                var v = pr(inner).xform.outer.transform(p);
                cx = fastint(v.x+0.5);
                cy = fastint(v.y+0.5);
                if(fsttime) fst = v;
                else v.dispose();
            }
            if(fsttime) {
                fx = px = cx;
                fy = py = cy;
            }else {
                pr(inner_zn).__line(px,py,cx,cy,col);
                px = cx; py = cy;
            }
        });
        pr(inner_zn).__line(px,py,fx,fy,col);
        fst.dispose();
        PolyWeak(polygon);
    }

    public override function drawFilledPolygon(polygon:Dynamic, colour:Int) {
        DEBUG(if(pr(inner).xform!=null && !pr(inner).xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";)
        DEBUG(if(polygon==null) throw "Error: Cannot render null polygon";)

        var col = colour|0xff000000;
        //render with scan lines from line intersections, avoid use of geometric utility so that it could
        //be seperated as a module, as well as because this is more stable.
        var miny = Math.POSITIVE_INFINITY;
        var maxy = Math.NEGATIVE_INFINITY;

        var vertices:Array<Vec2> = [];
        PolyIter(p, polygon, {
            var v:Vec2;
            if(pr(inner).xnull)
                vertices.push(v = p.copy());
            else {
                v = pr(inner).xform.outer.transform(p);
                vertices.push(v);
            }
            if(v.y<miny) miny = v.y;
            if(v.y>maxy) maxy = v.y;
        });
        PolyWeak(polygon);

        var y0 = fastint(miny+0.5);
        var y1 = fastint(maxy+0.5);
        if(y1<0 || y0>=pr(inner).height) return;

        if(y0<0) y0 = 0;
        if(y1>=pr(inner).height) y1 = pr(inner).height-1;

        for(y in y0...y1+1) {
            var xs:Array<Int> = [];
            for(i in 0...vertices.length) {
                var q = vertices[i];
                var p = vertices[(i+1)%vertices.length];

                if ((p.y < y && q.y >= y
                 ||  q.y < y && p.y >= y)
                ) {
                    var x = p.x + (y-p.y)/(q.y-p.y)*(q.x-p.x);
                    xs.push(fastint(x+0.5));
                }
            }
            xs.sort(function (a,b) return a-b);

            var i = 0;
            while(i+1<xs.length) {
                var u = xs[i++];
                var v = xs[i++];
                if(v<0) continue;
                if(u>=pr(inner).width) break;

                if(u<0) u = 0;
                if(v>=pr(inner).width) v = pr(inner).width-1;

                var ind = pr(inner_zn).index(u,y);
                for(x in u...v+1)
                    pr(inner_zn).setpix(ind++,col);
            }
        }

        while(vertices.length>0) vertices.pop().dispose();
    }

    ///---------------------------------------------------------------------------------------------

    public override function draw(object:Dynamic) {
        pr(inner_zn).prepare();
        __debug_draw(object);
    }

    public override function drawSpring(start:Vec2,end:Vec2,colour:Int,coils=3,radius=3.0) {
        pr(inner_zn).prepare();
        __debug_spring(start,end,colour,coils,radius);
    }
}

#end


