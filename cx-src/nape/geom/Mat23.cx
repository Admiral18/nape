package nape.geom;
$(import);

//
// Public 2x3 Matrix class
// Represents affine transformations.
//
// [ a  b  tx ]
// [ c  d  ty ]
//
class Mat23 {
    public var pr(inner):PR(Mat23);

    //
    // Matrix component properties.
    //
    $(mixin comp(n)
        property(n,Float,{
            return pr(inner).n;
        },{
            DEBUG(
                if (isNaN(n)) {
                    throw "Error: Mat23::"+$str(n)+" cannot be NaN";
                }
            )

            pr(inner).n = n;
            pr(inner).invalidate();
        })
    );
    comp(a) comp(b) comp(tx)
    comp(c) comp(d) comp(ty)

    //
    // Constructor.
    //
    public function new(
        a:Float  = 1.0, b:Float  = 0.0,
        c:Float  = 0.0, d:Float  = 1.0,
        tx:Float = 0.0, ty:Float = 0.0
    ) {
        pr(inner) = PR(Mat23).get();
        pr(inner).outer = this;
        this.a = a; this.b = b; this.tx = tx;
        this.c = c; this.d = d; this.ty = ty;
    }

    keep public function copy() {
        return new Mat23(a, b, c, d, tx, ty);
    }

    //
    // Assignment operationss.
    //
    public function set(matrix:Mat23):Void {
        DEBUG(
            if (matrix == null) {
                throw "Error: Cannot set form null matrix";
            }
        )

        pr(inner).set(matrix.pr(inner));
        pr(inner).invalidate();
    }
    public function setAs(
        a:Float =1.0, b:Float =0.0,
        c:Float =0.0, d:Float =1.0,
        tx:Float=0.0, ty:Float=0.0
    ) {
        pr(inner).setas(a, b, c, d, tx, ty);
        pr(inner).invalidate();
    }

    //
    // Reset matrix back to identity
    //
    public inline function reset():Void {
        setAs();
    }

    //
    // Translation methods for AS3 users.
    // NOTE: Difference in naming of coordinates!
    //
    #if (flash9||nme)
        keep public static function fromMatrix(m:flash.geom.Matrix):Mat23 {
            return new Mat23(m.a, m.c, m.b, m.d, m.tx, m.ty);
        }

        keep public function toMatrix():flash.geom.Matrix {
            return new flash.geom.Matrix(a, c, b, d, tx, ty);
        }
    #end

    //
    // Factory methods for common transformations
    //
    // 'rotation'    : A rotation by 'angle' radians clockwise.
    // 'translation' : A translation by 'tx, ty' pixels
    // 'scale'       : A scaling by factors sx, sy in corresponding axi.
    keep public static function rotation(angle:Float):Mat23 {
        DEBUG(
            if (isNaN(angle)) {
                throw "Error: Cannot create rotation matrix with NaN angle";
            }
        )
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        return new Mat23(cos, -sin, sin, cos, 0, 0);
    }
    keep public static function translation(tx:Float, ty:Float):Mat23 {
        return new Mat23(1, 0, 0, 1, tx, ty);
    }
    keep public static function scale(sx:Float, sy:Float):Mat23 {
        return new Mat23(sx, 0, 0, sy, 0, 0);
    }

    //
    // Determinant property.
    //
    property(determinant, Float, {
        // TODO: Cache this? Probably not necessary... ever :)
        return (a * d) - (b * c);
    })

    keep public function singular():Bool {
        var d = determinant;
        return (d * d) < PR(Const).EPSILON;
    }

    //
    // Matrix (unsafe) inversion
    //
    keep public function inverse():Mat23 {
        DEBUG(
            if (singular()) {
                throw "Error: Matrix is singular and cannot be inverted";
            }
        )

        var idet = 1.0 / determinant;
        return new Mat23(
            (d * idet),  (-b * idet),
            (-c * idet), (a * idet),
            ((b * ty) - (d * tx)) * idet,
            ((c * tx) - (a * ty)) * idet
        );
    }

    // Transposition
    keep public function transpose():Mat23 {
        return new Mat23(a, c, b, d, tx, ty);
    }

    //----------------------------------------------------------------------------------------------

    //
    // Matrix multiplication
    // Order is reversed, so that result is as named a concatenated
    // Transformation with x.concat(y) being a transformation which
    //    first performs 'x', and then performs 'y'
    //    equal to y * x
    //
    keep public function concat(matrix:Mat23):Mat23 {
        DEBUG (
            if (matrix == null) {
                throw "Error: Cannot concatenate with null Mat23";
            }
        )

        return new Mat23(
            ((matrix.a * a) + (matrix.b * c)), ((matrix.a * b) + (matrix.b * d)),
            ((matrix.c * a) + (matrix.d * c)), ((matrix.c * b) + (matrix.d * d)),
            (matrix.a * tx) + (matrix.b * ty) + matrix.tx,
            (matrix.c * tx) + (matrix.d * ty) + matrix.ty
        );
    }

    //
    // Matrix transformation of vector/point.
    //
    keep public function transform(
        point:Vec2,
        noTranslation:Bool = false,
        weak:Bool = false
    ):Vec2 {
        Disposed(point, Vec2);
        DEBUG(
            if (point == null) {
                throw "Error: Cannot transform null Vec2";
            }
        )

        var ret:Vec2;
        if (noTranslation)
        {
            ret = Vec2.get(
                (point.x * a) + (point.y * b),
                (point.x * c) + (point.y * d),
                weak
            );
        }
        else {
            ret = Vec2.get(
                (point.x * a) + (point.y * b) + tx,
                (point.x * c) + (point.y * d) + ty,
                weak
            );
        }

        WEAK(point);
        return ret;
    }

    //
    // Matrix reverse transformation.
    // No assumption (about from non-singularity) is made.
    // If performing many times, should either cache a transpose
    // Or contribute an: inverse_orthogonal_transform or something :P
    //
    keep public function inverseTransform(
        point:Vec2,
        noTranslation:Bool = false,
        weak:Bool = false
    ):Vec2 {
        Disposed(point, Vec2);
        DEBUG(
            if (point == null) {
                throw "Error: Cannot transform null Vec2";
            }
            if (singular()) {
                throw "Error: Matrix is singular and inverse transformation cannot be performed";
            }
        )
        var idet = 1.0/determinant;

        var ret:Vec2;
        if (noTranslation)
        {
            ret = Vec2.get(
                ((point.x * d) - (point.y * b)) * idet,
                ((point.y * a) - (point.x * c)) * idet,
                weak
            );
        }
        else {
            var dx = point.x - tx;
            var dy = point.y - ty;
            ret = Vec2.get(
                ((dx * d) - (dy * b)) * idet,
                ((dy * a) - (dx * c)) * idet,
                weak
            );
        }

        WEAK(point);
        return ret;
    }

    @:$keep public function toString():String {
        return "{ a: "+a+ " b: "+b+" c: "+c+" d: "+d+" tx: "+tx+" ty: "+ty+" }";
    }

    //
    // Determine if matrix is equiorthogonal
    //    This is a property I made up! (Don't try and google it)
    //    A Matrix M is 'equiorthogonal' iff. transpose(M) * M = kI
    //       for some non-zero scalar k.
    //    aka, an equiorthogonal matrix maps circles into other circles.
    //
    keep public function equiorthogonal():Bool {
        if (singular()) {
            return false;
        }
        else {
            var x = (a * b) + (c * d);
            if ((x * x) < PR(Const).EPSILON) {
                //determine if all vectors are scaled equally.
                var y = (a * a) + (b * b) - (c * c) - (d * d);
                return (y * y) < PR(Const).EPSILON;
            }
            else {
                return false;
            }
        }
    }

    //
    // Determine if matrix is orthogonal, that is circles are mapped into
    //    equal radius circles. (no scaling) and transpose(M) * M = I
    //
    keep public function orthogonal():Bool {
        var x = (a * b) + (c * d);
        if ((x * x) < PR(Const).EPSILON) {
            var y = (a * a) + (b * b) - 1;
            var z = (c * c) + (d * d) - 1;
            return (y * y) < PR(Const).EPSILON && (z * z) < PR(Const).EPSILON;
        }
        else {
            return false;
        }
    }

    //
    // Functions to 'orthogonalise' or 'equiorthogonalise' a matrix
    // Matrix will be transformed (in place) into the most similar matrix having
    //    the required property.
    //
    $(mixin Xalise(n,kdef)
        keep public function n`ise():Mat23 {
            if (!n()) {
                var k1 = Math.sqrt((a * a) + (c * c));
                var k2 = Math.sqrt((b * b) + (d * d));
                DEBUG(
                    if ((k1 * k1) < PR(Const).EPSILON
                     || (k2 * k2) < PR(Const).EPSILON) {
                        throw "Error: Matrix is singular and cannot be "+$str(n)+"ised";
                    }
                )

                // Determine how matrix basis vectors must be scaled.
                var k = kdef;
                k1 = k / k1; k2 = k / k2;

                a *= k1; c *= k1;
                b *= k2; d *= k2;

                // Determine minimum rotation required to make vectors
                // orthogonal.
                //
                // We perform this rotation by a half on each basis vector
                // Rather than keeping one fixed and rotating the other.
                var dot = (a * b) + (c * d);
                var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
                if (determinant > 0)
                {
                    ang = -ang;
                }

                var sin = Math.sin(ang);
                var cos = Math.cos(ang);

                var a2 = (a * cos) - (c * sin);
                var b2 = (b * cos) + (d * sin);
                c = (c * cos) + (a * sin); a = a2;
                d = (d * cos) - (b * sin); b = b2;

                pr(inner).invalidate();
            }

            return this;
        }
    );

    // For equiorthogonalisation, we find matrix who's scaling factor is the
    //    average of the existing scaling factors.
    Xalise(equiorthogonal, (k1 + k2) / 2)

    Xalise(orthogonal, 1)
}
