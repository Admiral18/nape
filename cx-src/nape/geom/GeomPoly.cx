package nape.geom;
$(import);

// caxe only 'typedef'
$(mixin Vertex() PR(GeomVert));

//
// Public Geometric Polygon type
//

// Using geometry environment
geom(
class GeomPoly {

    // caxe only alias for vertex list
    $(mixin verts() pr(inner).vertices);

    public var pr(inner):PR(GeomPoly);

    public inline function empty():Bool {
        return mix_circular(Vertex, empty(verts));
    }
    public function size():Int {
        return mix_circular(Vertex, size(verts));
    }

    //
    // Haxe iterators
    //
    public inline function iterator():GeomVertexIterator {
        return PR(GeomVertexIterator).get(verts, true);
    }
    public inline function forward_iterator():GeomVertexIterator {
        return PR(GeomVertexIterator).get(verts, true);
    }
    public inline function backwards_iterator():GeomVertexIterator {
        return PR(GeomVertexIterator).get(verts, false);
    }

    //
    // 'Pointer' to current vertex in cycle.
    //
    public inline function current() {
        DEBUG(
            if (empty()) {
                throw "Error: GeomPoly is empty";
            }
        )

        return verts.wrapper();
    }

    //
    // Push copy of vertex after current(), advancing 'current' pointer
    // to newly inserted vertex.
    //
    public function push(x:Vec2) {
        Disposed(x, Vec2);
        DEBUG(
            if (x == null) {
                throw "Error: Cannot push null vertex";
            }
        )

        mix_circular(Vertex,
            verts = push_after(verts, Vertex.get(x.x, x.y));
        )

        WEAK(x);
        return this;
    }

    //
    // Pop current vertex, retreating 'current' pointer to previous vertex
    //
    public function pop() {
        mix_circular(Vertex,
            DEBUG(
                if (empty(verts)) {
                    throw "Error: Cannot pop from empty polygon";
                }
            )

            var retv = verts;
            verts = pop_ret_before(verts);
            Free(Vertex, retv);
        )

        return this;
    }

    //
    // Push copy of vertex BEFORE current(), retreating 'current' pointer
    // to newly inserted vertex.
    //
    public function unshift(x:Vec2) {
        Disposed(x, Vec2);
        DEBUG(
            if (x == null) {
                throw "Error: Cannot unshift null vertex";
            }
        )

        mix_circular(Vertex,
            verts = push_before(verts, Vertex.get(x.x,x.y));
        )

        WEAK(x);
        return this;
    }

    //
    // Pop current vertex, advancing 'current' pointer to next vertex
    //
    public function shift() {
        mix_circular(Vertex,
            DEBUG(
                if (empty(verts)) {
                    throw "Error: Cannot shift from empty polygon";
                }
            )

            var retv = verts;
            verts = pop_ret_after(verts);
            Free(Vertex,retv);
        )

        return this;
    }

    //
    // Advance current pointer 'times' vertices forward.
    // Retreat current pointer 'times' vertices backwards.
    //
    public function skip_forward(times:Int) {
        mix_circular(Vertex,
            if (!empty(verts)) {
                if (times>0) {
                    while(times-- > 0) verts = verts.next;
                }elif (times<0) {
                    while(times++ < 0) verts = verts.prev;
                }
            }
        )

        return this;
    }
    public inline function skip_backwards(times:Int) {
        return skip_forward(-times);
    }

    //
    // Erase 'count' number of items.
    //    For positive 'count' this is a successive unshift
    //    For negative 'count' this is a successive popping
    //
    public function erase(count:Int) {
        mix_circular(Vertex,
            while (count != 0 && !empty(verts)) {
                var retv = verts;
                if (count > 0) {
                    verts = pop_ret_after(verts);
                    count--;
                }
                elif (count < 0) {
                    verts = pop_ret_before(verts);
                    count++;
                }
                Free(Vertex, retv);
            }
        )

        return this;
    }

    public function clear():GeomPoly {
        mix_circular(Vertex,
            clear_with(verts, $(mixin cb(x) Free(Vertex, x)) cb);
        )

        return this;
    }

    public function copy():GeomPoly {
        var ret = new GeomPoly();
        mix_circular(Vertex,
            for_iter(v, verts, {
                ret.verts = push_after(ret.verts, Vertex.get(v.x,v.y));
            });
        )

        return ret;
    }

    //
    // Constructor accepting either:
    //    Array<Vec2>
    //    flash.Vector<Vec2>
    //    Vec2List
    //    GeomPoly
    //
    public function new(vertices:Dynamic = null) {
        pr(inner) = new PR(GeomPoly)(this);
        if(vertices != null) {
            PolyIter(v, vertices, {
                mix_circular(Vertex,
                    verts = push_after(verts, Vertex.get(v.x, v.y));
                )
            });
            PolyWeak(vertices);
        }
    }

    @:$keep public function toString():String {
        var ret = "GeomPoly[";
        mix_circular(PR(GeomVert),{
            for_iter(v, verts, {
                if (v != verts) ret += ",";
                ret += "{"+v.x+","+v.y+"}";
            });
        })
        return ret+"]";
    }

    //--------------------------------------------------------------------------

    $(mixin size_lt_3() ({
        verts == null || verts.next == null || verts.prev == verts.next;
    }));

    public function area():Float {
        return if (size_lt_3) 0.0 else area(verts);
    }

    public function winding():Winding {
        if (size_lt_3) {
            return Winding.UNDEFINED;
        }
        else {
            var area = signed_area(verts);
            return if  (area >0) Winding.CLOCKWISE
                   elif(area==0) Winding.UNDEFINED
                   else          Winding.ANTICLOCKWISE;
        }
    }

    //--------------------------------------------------------------------------

    public function contains(point:Vec2):Bool {
        Disposed(point,Vec2);
        DEBUG(
            if (point == null) {
                throw "Error: GeomPoly::contains point cannot be null";
            }
        )

        var ret = contains(verts, point.x, point.y);

        WEAK(point);
        return ret;
    }

    public function isClockwise():Bool {
        return winding() == Winding.CLOCKWISE;
    }

    public function isConvex():Bool {
        return if(size_lt_3) true else convex(verts);
    }

    public function isSimple():Bool {
        return if(size_lt_3) true else PR(Simple).isSimple(verts);
    }

    public function isMonotone():Bool {
        return if(size_lt_3) true else PR(Monotone).isMonotone(verts);
    }

    public function isDegenerate():Bool {
        return if(size_lt_3) true else area() < PR(Const).EPSILON;
    }

    //--------------------------------------------------------------------------

    public function simplify(epsilon:Float):GeomPoly {
        DEBUG(
            if(epsilon <= 0.0) {
                throw "Error: Epsilon should be > 0 for simplifying a GeomPoly";
            }
        )

        if(size_lt_3) {
            return copy();
        }
        else {
            var x = PR(Simplify).simplify(verts, epsilon);
            var ret = new GeomPoly();
            ret.verts = x;
            return ret;
        }
    }

    public function simple_decomposition():GeomPolyList {
        DEBUG(
            if(size_lt_3) {
                throw "Error: Cannot decompose a degenerate polygon";
            }
        )

        var MPs = PR(Simple).decompose(verts);
        var ret = new GeomPolyList();
        while (!MPs.empty()) {
            var MP = MPs.pop_unsafe();
            var x = new GeomPoly();
            x.verts = MP;
            ret.add(x);
        }

        return ret;
    }

    public function monotone_decomposition():GeomPolyList {
        DEBUG(
            if(size_lt_3) {
                throw "Error: Cannot decompose a degenerate polygon";
            }
        )

        var MPs = PR(Monotone).decompose(verts).extract();
        var ret = new GeomPolyList();
        while (!MPs.empty()) {
            var MP = MPs.pop_unsafe();
            var x = new GeomPoly();
            x.verts = MP;
            ret.add(x);
            assert(x.isMonotone(), "monotone decomposition gave non-monotone output?");
        }

        return ret;
    }

    public function convex_decomposition():GeomPolyList {
        DEBUG(
            if(size_lt_3) {
                throw "Error: Cannot decompose a degenerate polygon";
            }
        )

        var MPs = PR(Monotone).decompose(verts).extract_partitions();
        var ret = new GeomPolyList();
        while (!MPs.empty()) {
            var MP = MPs.pop_unsafe();

            PR(Triangular).triangulate(MP);
            PR(Convex).optimise(MP);

            var MQs = MP.extract();
            while (!MQs.empty()) {
                var MQ = MQs.pop_unsafe();
                var x = new GeomPoly();
                x.verts = MQ;
                ret.add(x);
                assert(x.isConvex(),"convex decomposition gave non-convex output?");
            }
        }

        return ret;
    }

    public function triangular_decomposition():GeomPolyList {
        DEBUG(
            if(size_lt_3) {
                throw "Error: Cannot decompose a degenerate polygon";
            }
        )

        var MPs = PR(Monotone).decompose(verts).extract_partitions();
        var ret = new GeomPolyList();
        while (!MPs.empty()) {
            var MP = MPs.pop_unsafe();
            var MQs = PR(Triangular).triangulate(MP).extract();

            while (!MQs.empty()) {
                var MQ = MQs.pop_unsafe();
                var x = new GeomPoly();
                x.verts = MQ;
                ret.add(x);
                assert(x.size()==3,"triangular decomosition gave non-triangle output?");
            }
        }

        return ret;
    }

    //--------------------------------------------------------------------------

    public function cut(
        start:Vec2,
        end:Vec2,
        bounded_start:Bool = false,
        bounded_end:Bool = false
    ):GeomPolyList {
        DEBUG(
            if(!isSimple()) {
                throw "Error: Cut requires a truly simple polygon";
            }
            if(start==null || end==null) {
                throw "Error: Cannot cut with null start/end's";
            }
        )

        Disposed(start,Vec2);
        Disposed(end,Vec2);

        var ret = PR(Cutter).run(verts, start, end, bounded_start, bounded_end);

        WEAK(start);
        WEAK(end);
        return ret;
    }

    //--------------------------------------------------------------------------

mix_circular(Vertex,
    public function transform(matrix:Mat23):GeomPoly {
        DEBUG(
            if (matrix == null) {
                throw "Error: Cannot transform by null matrix";
            }
        )

        for_iter(v, verts, {
            mat_transform_hom(matrix.,v.);
        });

        return this;
    }

    public function bounds():AABB {
        DEBUG(
            if(empty()) {
                throw "Error: empty GeomPoly has no defineable bounds";
            }
        )

        vec_new(min, PR(Const).FMAX, PR(Const).FMAX);
        vec_new(max,-PR(Const).FMAX,-PR(Const).FMAX);
        for_iter(v, verts, {
            if(v.x < minx) minx = v.x;
            if(v.y < miny) miny = v.y;
            if(v.x > maxx) maxx = v.x;
            if(v.y > maxy) maxy = v.y;
        });

        return new AABB(minx, miny, maxx-minx, maxy-miny);
    }

    //
    // Find and return mutable top/bottom/left/right vertex of polygon.
    //
    public function top():Vec2 {
        DEBUG(
            if(empty()) {
                throw "Error: empty GeomPoly has no defineable topmost vertex";
            }
        )

        var min = verts;
        for_iter(v, verts.next, verts, if(v.y < min.y) min = v);

        return min.wrapper();
    }
    public function bottom():Vec2 {
        DEBUG(
            if(empty()) {
                throw "Error: empty GeomPoly has no defineable bottommost vertex";
            }
        )

        var max = verts;
        for_iter(v, verts.next, verts, if(v.y > max.y) max = v);

        return max.wrapper();
    }
    public function left():Vec2 {
        DEBUG(
            if(empty()) {
                throw "Error: empty GeomPoly has no defineable leftmost vertex";
            }
        )

        var min = verts;
        for_iter(v, verts.next, verts, if(v.x < min.x) min = v);

        return min.wrapper();
    }
    public function right():Vec2 {
        DEBUG(
            if(empty()) {
                throw "Error: empty GeomPoly has no defineable rightmmost vertex";
            }
        )

        var max = verts;
        for_iter(v, verts.next, verts, if(v.x > max.x) max = v);

        return max.wrapper();
    }
)
}
)
