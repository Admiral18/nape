package nape.geom;
$(import);

class MarchingSquares {

	static public function run(iso:Float->Float->Float, bounds:AABB, cellsize:Vec2, quality:Int=2, subgrid:Vec2=null, combine:Bool=true) {
		DEBUG(if(iso==null) throw "Error: MarchingSquares requires an iso function to define the iso-surface";)
		DEBUG(if(bounds==null) throw "Error: MarchingSquares requires an AABB to define the bounds of the surface extraction";)
		Destroyed(cellsize,Vec2);
		DEBUG(if(cellsize.x<=0||cellsize.y<=0) throw "Error: MarchingSquares cannot operate with non-postitive cell dimensions";)
		DEBUG(if(quality<0) throw "Error: MarchingSquares cannot use a negative quality value";)
		DEBUG(
			if(subgrid!=null) Destroyed(subgrid,Vec2);
			if(subgrid!=null && (subgrid.x<=0 || subgrid.y<=0))
				throw "Error: MarchingSquares cannot operate with non-positive subgrid dimensions";
		)
	
		var ret = new GeomPolyList();	
		if(subgrid==null) {
			PR(MarchingSquares).run(iso,bounds.x,bounds.y,bounds.max.x,bounds.max.y,cellsize,quality,combine,ret);
		} else {
			var xp = bounds.width/subgrid.x;  var xn:Int = fastint(xp);
			var yp = bounds.height/subgrid.y; var yn:Int = fastint(yp);
			if(xn!=xp) xn++;
			if(yn!=yp) yn++;

			for(x in 0...xn) {
				var x0 = bounds.x + subgrid.x*x;
				var x1 = if(x==xn-1) bounds.max.x else x0 + subgrid.x;
				for(y in 0...yn) {
					var y0 = bounds.y + subgrid.y*y;
					var y1 = if(y==yn-1) bounds.max.y else y0 + subgrid.y;
					PR(MarchingSquares).run(iso, x0,y0,x1,y1, cellsize, quality, combine,ret);
				}
			}
		}
	
		WEAK(cellsize);
		if(subgrid!=null) WEAK(subgrid);

		return ret;
	}

}
