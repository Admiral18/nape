package;
$(import);

class DummyNapeMain implements IsoFunction {
    static function main() {
        new DummyNapeMain();
    }

    public static var debug:Debug;
    function new() {
        debug = new ShapeDebug(1,1);
        flash.Lib.current.addChild(debug.display);

        var txt = new flash.text.TextField();
        flash.Lib.current.addChild(txt);
        haxe.Log.trace = function (x:Dynamic, ?y) txt.text += Std.string(x)+"\n";

        var space = new Space(Vec2.get(0, 500));

        var floor:Body = new Body(BodyType.KINEMATIC,Vec2.get(0,300));
        floor.shapes.add(new Polygon(Polygon.rect(0,0,800,100,true)));
        floor.velocity.x = 0.1;
        floor.space = space;

        var circle:Body = new Body(BodyType.DYNAMIC,Vec2.get(50,200));
        circle.shapes.add(new Circle(20,null,Material.rubber()));
        circle.space = space;
        circle.velocity.setxy(1000,300); // THIS LINE


        var icnt = 26; //300 -> after counts is JUST intersecting with no CCD.
        //var icnt = 21; //400 -> after counts is JUST intersecting with no CCD.
        for (i in 0...icnt) space.step(1/120);

        debug.clear();
        debug.draw(space);
        var px = circle.position.x;
        var py = circle.position.y;

        function dd() {
            debug.draw(space);
            debug.drawLine(Vec2.weak(px, py), circle.position, 0xffffff);
            px = circle.position.x;
            py = circle.position.y;
        }

        trace("--");
        space.step(1/120);
        dd();
        trace("--");
        space.step(1/120);
        dd();
        trace("--");
        space.step(1/120);
        dd();
        trace("--");
        space.step(1/120);
        dd();
        trace("--");
    }

    public function iso(x:Float, y:Float) {
        x -= 150;
        y -= 150;
        return Math.sin((x*x+y*y - 150*150)*0.0005);
    }
}
