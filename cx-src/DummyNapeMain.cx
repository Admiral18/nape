package;

$(import);

#if cpp
class DummyNapeMain {
	static function main() {}
}
#elseif swc
class DummyNapeMain {
	static function main() {}
}

#else 

class DummyNapeMain {
	static function main() {
        var c = flash.Lib.current;
        haxe.Log.setColor(0xffffff);

		var space = new Space(new Vec2(0,400));
		var debug = new BitmapDebug(600,600,0x333333);
        c.addChild(debug.display);
		
        var txt = new flash.text.TextField();
        txt.x = 20;
        txt.defaultTextFormat = new flash.text.TextFormat(null,null,0xffffff);
        c.addChild(txt);

        var pt = flash.Lib.getTimer();
        txt.width = 600;
        txt.height = 600;
        txt.selectable = false;

        debug.drawConstraints = true;
        c.stage.quality = flash.display.StageQuality.LOW;
        
        var body = function(x,y,r) {
            var b = new Body(BodyType.DYNAMIC);
            b.allowMovement = false;
            b.position.setxy(x,y);
            b.shapes.add(new Circle(r));
            b.space = space;
            return b;
        };
        
        var b1 = body(100,300,50);
        var b2 = body(300,300,50);
        b1.angularVel = 5;
        
        var con = new MotorJoint(b1,b2,0,1.5);
        con.space = space;
        
        var con2 = new AngleJoint(b1,b2,0,0);
        con2.ratio = 1.5;
        con2.space = space;
//        con.maxForce = 1000;

		var tim = new haxe.Timer(0);
        tim.run = function() {
            var ct = flash.Lib.getTimer();
            var dt = (ct-pt)/1000;
            txt.text = "fps: "+Std.string(1/dt).substr(0,5);
            pt = ct;

            space.step(1/60,8,8);
            
            #if NAPE_TIMES var pt = flash.Lib.getTimer(); #end
            debug.clear();
            debug.draw(space);
            debug.flush();
            #if NAPE_TIMES Debug.DRAW += flash.Lib.getTimer()-pt; #end

            #if NAPE_TIMES
                txt.text += Debug.TIMES();
            #end
		}
	}
}
#end
