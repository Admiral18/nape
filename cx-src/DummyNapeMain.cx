package;

$(import);

#if cpp
class DummyNapeMain {
	static function main() {
		var w = 600;
		var h = 600;
		var fps = 60;
		var bgColor = 0x333333;
		var flags =
			nme.Lib.BORDERLESS |
			nme.Lib.HARDWARE |
			nme.Lib.VSYNC |
			0;
		var name = "Test Nape hxcpp/nme";

		nme.Lib.create(function() { new DummyNapeMain(); },w,h,fps,bgColor,flags,name);
	}

	function new() {
		var c = nme.Lib.current;
		var space = new Space(new Vec2(0,400));
		var debug = new ShapeDebug(0x333333);
		c.addChild(debug.display);

		var walls = new Body(BodyType.STATIC);
		for(i in 0...10) {
			walls.clear();
			walls.shapes.add(new Polygon(Polygon.rect(0,550,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
			walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		}
		walls.space = space;

		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			b.space = space;
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
		}

		for(i in 0...1000) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(15,15)));
			var xi = i%32;
			var yi =Std.int( (i-xi)/32);
			b.position.setxy(50+xi*15,50+yi*15);
			b.space = space;
		}

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());
		mcon.stiff = false;
		mcon.maxForce = 50000;
		mcon.active = false;
		mcon.space = space;

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = new Vec2(c.mouseX,c.mouseY);
			var bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim = new haxe.Timer(0);
        tim.run = function() {

            debug.clear();

			mcon.anchor1.setxy(c.mouseX,c.mouseY);
            space.step(1/60,6,6);
            
            debug.draw(space);
            debug.flush();
		}

	}
}
#elseif swc
class DummyNapeMain {
	static function main() {}
}

#else 

class Tracer {
	static public function trace(objs:Array<Dynamic>,txt:flash.text.TextField) {
		var dict_id = 0;
		var stack = [];
		var dict = new flash.utils.Dictionary(false);
		var idl = [];

		$(mixin pushobj(i) ({
			if((untyped dict[i])!=null) (untyped dict[i]).id;
			else {
				var o = { id: dict_id++, obj:i, refs:[] };
				untyped dict[i] = o;
				stack.push(o);
				idl.push(o);
				o.id;
			}
		}));

		for(i in objs) pushobj(i);
		var tim = new haxe.Timer(0);

		var fcnt = 0;
		var finish = function() {	
			var pt = flash.Lib.getTimer();
			var buf = "";
			while(flash.Lib.getTimer()-pt <= 50) {
				if(fcnt >= idl.length) {
					txt.text += buf+"\n\nDONE";
					txt.scrollV = txt.maxScrollV;
					tim.stop();
					return;
				}
				var i = idl[fcnt++];
				buf += "id: "+i.id+" refs:"+Std.string(i.refs)+" = "+Std.string(i.obj)+"\n";
			}
			txt.text += buf;
			txt.scrollV = txt.maxScrollV;
		}
		
		var cnnt = 0;
		tim.run = function() {
			txt.text = "running: stack size="+stack.length+" cnt="+cnnt;

			if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

			var pt = flash.Lib.getTimer();
			while(flash.Lib.getTimer()-pt <= 50) {
				if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

				var cur = stack.shift();
				cnnt++;
				var cls = Type.getClass(cur.obj);
				for(o in Type.getInstanceFields(cls)) {
					var field:Dynamic = Reflect.field(cur.obj, o);
					if(field!=null && Reflect.isObject(field)) {
						cur.refs.push({ name:o, id:	pushobj(field) });
					}
				}
			}
		}
	}
}

class DummyNapeMain {
	static public var debug:Debug;

	static function mains() {
		var debug = new BitmapDebug(600,600,0xffffff);
		var grav = new Vec2(0,20*30);
		var world = new Space(grav);

		var dyn = new Body();
		dyn.position.setxy(100,100);
		var filter = new InteractionFilter(1,-1);
		var mat = new Material(0.1,0.5,0.5,0.5,0.1);
		mat.shared = true;

		var shape:Shape = new Circle(10, new Vec2(0,0), mat,filter);
		dyn.type = BodyType.DYNAMIC;
		dyn.allowRotation = false;
		dyn.gravMass = 0;
		dyn.shapes.add(shape);
		world.bodies.add(dyn);

		filter = new InteractionFilter(128,0);
		var anchor = new Body();
		anchor.position.setxy(20,200);
		anchor.type = BodyType.STATIC;
		shape = new Polygon(Polygon.box(100,100), mat,filter);
		anchor.shapes.add(shape);
		world.bodies.add(anchor);

		var joint = new LineJoint(anchor,dyn,new Vec2(),new Vec2(),new Vec2(1,0),0,2000);
		world.constraints.add(joint);

		var c = flash.Lib.current;
		c.addChild(debug.display);

		var tim = new haxe.Timer(Std.int(1000/60));
		tim.run = function() {
			world.step(1/60,37,37);

			var mat = new Mat23();
			debug.transform = mat;
			debug.clear();
			debug.draw(world);
			debug.flush();
		}

		haxe.Timer.delay(function(){
			joint.space = null; 
			anchor.space = null;
			dyn.space = null;
		},1000);
	}

	static function main() {
		var c = flash.Lib.current;
		haxe.Log.setColor(0xffffff);

		var P = [];
//		var P = [Vec2.get(158,244),Vec2.get(158,237),Vec2.get(162,217),Vec2.get(165,207),Vec2.get(170,197),Vec2.get(180,183),Vec2.get(186,177),Vec2.get(192,172),Vec2.get(201,167),Vec2.get(218,159),Vec2.get(227,156),Vec2.get(239,152),Vec2.get(245,150),Vec2.get(255,150),Vec2.get(266,150),Vec2.get(273,149),Vec2.get(282,148),Vec2.get(290,148),Vec2.get(300,147)]; 
//		var P = [Vec2.get(158,244),Vec2.get(158,237),Vec2.get(162,217),Vec2.get(165,207),Vec2.get(170,197),Vec2.get(180,183),Vec2.get(186,177),Vec2.get(192,172),Vec2.get(201,167),Vec2.get(218,159),Vec2.get(227,156),Vec2.get(239,152),Vec2.get(245,150),Vec2.get(255,150),Vec2.get(266,150),Vec2.get(273,149),Vec2.get(282,148),Vec2.get(290,148),Vec2.get(300,147),Vec2.get(314,145),Vec2.get(320,146),Vec2.get(321,152),Vec2.get(321,159),Vec2.get(323,167),Vec2.get(330,168),Vec2.get(337,164),Vec2.get(344,157),Vec2.get(348,151),Vec2.get(354,152),Vec2.get(356,158),Vec2.get(358,165),Vec2.get(365,165),Vec2.get(369,160),Vec2.get(376,153),Vec2.get(381,159),Vec2.get(381,169),Vec2.get(381,176),Vec2.get(384,184),Vec2.get(384,192),Vec2.get(384,200),Vec2.get(381,207),Vec2.get(373,207),Vec2.get(365,203),Vec2.get(355,193),Vec2.get(346,186),Vec2.get(337,184),Vec2.get(328,184),Vec2.get(319,193),Vec2.get(313,200),Vec2.get(307,202),Vec2.get(297,192),Vec2.get(291,183),Vec2.get(282,190),Vec2.get(277,196),Vec2.get(273,205),Vec2.get(274,211),Vec2.get(276,218),Vec2.get(273,227),Vec2.get(270,234),Vec2.get(262,236),Vec2.get(254,234),Vec2.get(247,233),Vec2.get(240,227),Vec2.get(234,220),Vec2.get(230,215),Vec2.get(230,208),Vec2.get(224,204),Vec2.get(220,198),Vec2.get(216,203),Vec2.get(212,221),Vec2.get(218,230),Vec2.get(225,236),Vec2.get(229,242),Vec2.get(243,250),Vec2.get(249,253),Vec2.get(256,254),Vec2.get(264,253),Vec2.get(272,251),Vec2.get(280,249),Vec2.get(284,239),Vec2.get(286,231),Vec2.get(290,226),Vec2.get(302,219),Vec2.get(308,218),Vec2.get(309,226),Vec2.get(306,237),Vec2.get(304,243),Vec2.get(309,239),Vec2.get(315,233),Vec2.get(318,227),Vec2.get(323,219),Vec2.get(329,217),Vec2.get(335,224),Vec2.get(331,234),Vec2.get(327,241),Vec2.get(342,237),Vec2.get(349,226),Vec2.get(354,222),Vec2.get(359,230),Vec2.get(357,241),Vec2.get(363,246),Vec2.get(373,241),Vec2.get(379,234),Vec2.get(387,232),Vec2.get(395,238),Vec2.get(403,237),Vec2.get(408,231),Vec2.get(410,223),Vec2.get(410,216),Vec2.get(411,207),Vec2.get(411,196),Vec2.get(411,184),Vec2.get(409,174),Vec2.get(407,167),Vec2.get(403,159),Vec2.get(395,146),Vec2.get(390,140),Vec2.get(381,135),Vec2.get(371,131),Vec2.get(361,128),Vec2.get(352,126),Vec2.get(343,124),Vec2.get(332,118),Vec2.get(318,112),Vec2.get(313,108),Vec2.get(300,103),Vec2.get(284,103),Vec2.get(275,104),Vec2.get(262,106),Vec2.get(248,109),Vec2.get(234,113),Vec2.get(206,116),Vec2.get(194,116),Vec2.get(166,116),Vec2.get(144,111),Vec2.get(140,103),Vec2.get(141,97),Vec2.get(149,86),Vec2.get(158,79),Vec2.get(173,82),Vec2.get(188,85),Vec2.get(198,88),Vec2.get(208,88),Vec2.get(225,88),Vec2.get(234,94),Vec2.get(253,93),Vec2.get(266,91),Vec2.get(278,90),Vec2.get(294,87),Vec2.get(308,87),Vec2.get(318,87),Vec2.get(333,87),Vec2.get(329,78),Vec2.get(296,71),Vec2.get(276,72),Vec2.get(266,75),Vec2.get(253,79),Vec2.get(247,77),Vec2.get(238,75),Vec2.get(217,72),Vec2.get(204,65),Vec2.get(174,58),Vec2.get(168,59),Vec2.get(160,64),Vec2.get(148,76),Vec2.get(135,88),Vec2.get(127,102),Vec2.get(123,114),Vec2.get(122,122),Vec2.get(125,128),Vec2.get(137,133),Vec2.get(160,137),Vec2.get(169,136),Vec2.get(176,133),Vec2.get(194,128),Vec2.get(219,128),Vec2.get(236,128),Vec2.get(245,128),Vec2.get(262,128),Vec2.get(276,129),Vec2.get(261,135),Vec2.get(240,137),Vec2.get(226,137),Vec2.get(207,139),Vec2.get(193,144),Vec2.get(178,147),Vec2.get(160,149),Vec2.get(148,150),Vec2.get(134,149),Vec2.get(121,139),Vec2.get(112,137),Vec2.get(107,130),Vec2.get(105,123),Vec2.get(109,110),Vec2.get(112,100),Vec2.get(117,88),Vec2.get(123,75),Vec2.get(128,63),Vec2.get(133,55),Vec2.get(143,47),Vec2.get(152,41),Vec2.get(159,40),Vec2.get(186,38),Vec2.get(199,40),Vec2.get(217,50),Vec2.get(230,55),Vec2.get(246,58),Vec2.get(260,61),Vec2.get(280,59),Vec2.get(295,58),Vec2.get(319,63),Vec2.get(341,68),Vec2.get(359,75),Vec2.get(363,86),Vec2.get(366,104),Vec2.get(374,117),Vec2.get(393,127),Vec2.get(408,135),Vec2.get(425,144),Vec2.get(434,157),Vec2.get(437,179),Vec2.get(439,196),Vec2.get(440,216),Vec2.get(440,231),Vec2.get(439,245),Vec2.get(437,253),Vec2.get(428,258),Vec2.get(402,262),Vec2.get(395,264),Vec2.get(378,270)];

		debug = new ShapeDebug(600,600,0x333333);
		debug.clear();
		c.addChild(debug.display);

		var mdown = false;
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (_) {
			mdown = true;
			P.push(new Vec2(c.mouseX,c.mouseY));
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function(_) mdown = false);

		var tim = new haxe.Timer(0);
		tim.run = function() {
			if(mdown) {
				var p = new Vec2(c.mouseX,c.mouseY);
				if(p.sub(P[P.length-1]).length>6) P.push(p);
			}

			if(P.length>3) {
				debug.clear();
				debug.drawFilledPolygon(P,0x808080);
/*				debug.drawPolygon(P,((new GeomPoly(P)).isSimple() && (new GeomPoly(P)).isClockwise()) ? 0xff0000 : 0xffffff);
				for(i in P) debug.drawCircle(i,1.5,0xff8000);
				if((new GeomPoly(P)).isSimple() && new GeomPoly(P).isClockwise()) {
//					try {
					var polys = new GeomPoly(P).monotone_decomposition();
					for(p in polys) debug.drawPolygon(p.toArray(),0xff00);

					var polys = new GeomPoly(P).convex_decomposition();
					for(p in polys) debug.drawPolygon(p.toArray(),0xffff00);
/*					}catch(e:Dynamic) {
						tim.stop();

						var ret = "[";
						var fst = true;
						for(i in P) {
							if(!fst) ret += ",";
							fst = false;
							ret += "Vec2.get("+i.x+","+i.y+")";
						}
						ret += "]";
						throw ret;

						throw e;
					}*/
//				}
				debug.flush();
			}
		};
	}


	static function mainsp() {
        var c = flash.Lib.current;
        haxe.Log.setColor(0xffffff);

//		var space = new Space(new Vec2(0,400),Broadphase.SWEEP_AND_PRUNE);
		var space = new Space();
		/*var*/ debug = new BitmapDebug(600,600,0x333333);
//		/*var*/ debug = new ShapeDebug(600,600,0x333333);
        c.addChild(debug.display);
//		debug.cullingEnabled = true;

        var txt = new flash.text.TextField();
        txt.defaultTextFormat = new flash.text.TextFormat("Courier New",null,0xffffff);
        c.addChild(txt);
        txt.width = 600;
        txt.height = 600;
        txt.selectable = true;
		txt.multiline = true;

        var pt = flash.Lib.getTimer();

//        debug.drawConstraints = true;
        c.stage.quality = flash.display.StageQuality.LOW;

		var bb = new Body();
		bb.shapes.add(new Circle(10));
		bb.space = space;

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());

		mcon.stiff = false;
		mcon.maxForce = 50000;
//		var mcon:Dynamic = null;

		var init = function() {
//			var bods = space.bodies.copy();

			space.clear();
			space.gravity.setxy(0,400);
/*
			for(b in bods) {
				b.space = space;
				if(b.isDynamic()) {
					b.velocity.y -= 50;
					b.rotation += 1;
				}
			}
			bods.clear();

			mcon.active = false;
			mcon.space = space;*/
//		}

		var walls = new Body(BodyType.STATIC);
		for(i in 0...10) {
			walls.clear();
			walls.shapes.add(new Polygon(Polygon.rect(-9*5+i*5,550,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
			walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		}
		walls.space = space;
	
		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			space.bodies.add(b);
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
		}

		var pre:Body = null;	
		for(i in 0...450) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(16,16)));
			var xi = i%18;
			var yi =Std.int( (i-xi)/18);
			b.position.setxy(50+xi*16,50+yi*16);
			b.space = space;

            if(pre!=null && false) {
				var mid = pre.position.add(b.position).muleq(0.5);
				space.constraints.add(new PivotJoint(pre,b,pre.worldToLocal(mid),b.worldToLocal(mid)));
			}

			pre = b;
			if((i+1)%18==0) pre = null;
		}

		mcon.active = false;
		mcon.space = space;
	}

		var mat:Mat23 = new Mat23();

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = mat.inverse_transform(new Vec2(c.mouseX,c.mouseY));
			var bods:BodyList = null;
			bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim2 = new haxe.Timer(3000); //5000
		tim2.run = function() { for(i in 0...10) init(); }
//		tim2.run = function() { init(); }
		init();
//		Tracer.trace([space],txt);
//		return;

		var tim2 = new haxe.Timer(100); //1000
/*		tim2.run = function () { 
			mat = new Mat23(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,Math.random()*100-50,Math.random()*100-50).equiorthogonalise();
			mat = Mat23.translation(-300,-300).concat(mat).concat(Mat23.translation(300,300));	
		}*/

		var tim = new haxe.Timer(0);

        tim.run = function() {
            var ct = flash.Lib.getTimer();
            var dt = (ct-pt)/1000;
            pt = ct;

            debug.clear();
			mcon.anchor1.set(mat.inverse_transform(new Vec2(c.mouseX,c.mouseY)));

			if(!space.dynamics.empty()) {
				var b = space.dynamics.at(Std.int(space.dynamics.length*Math.random()));
				b.space = null;
				while(!b.constraints.empty()) {
					b.constraints.at(0).space = null;
				}
			}

            space.step(1/40,8,4);
            
            #if NAPE_TIMES var pt = flash.Lib.getTimer(); #end
			debug.transform = mat;
            debug.draw(space);
            #if NAPE_TIMES Debug.DRAW += flash.Lib.getTimer()-pt; #end

			txt.text = "";
			#if NAPE_POOL_STATS
				txt.text += PR(POOL_STATS).dump()+"\n";
			#end

            txt.text += "fps: "+Std.string(1/dt).substr(0,5)+"\n";

            #if NAPE_TIMES
                txt.text += "\n"+Debug.TIMES(space);
            #end

			var prec = function(x:Float,y:Int) {
				return Std.string(Std.int(x*Math.pow(10,y))*Math.pow(10,-y));
			}
			var mem = function(x:Float) {
				if(x<1024) return Std.string(x)+"B";
				else if(x<1024*1024) return prec(x/1024,2)+"KiB";
				else                 return prec(x/1024/1024,2)+"MiB";
			};

			txt.text += "\n\nMAX: "+mem(flash.system.System.totalMemory);
			txt.text +=   "\nCUR: "+mem(flash.system.System.totalMemory-flash.system.System.freeMemory);

            debug.flush();
		}
	}
}
#end
