package;
$(import);

class DummyNapeMain {
    static function main() {
        new DummyNapeMain();
    }

    public static var debug:Debug;
    function new() {
        debug = new BitmapDebug(600, 600, 0xffffff);
        debug.drawCollisionArbiters = true;
        flash.Lib.current.addChild(debug.display);

        var txt = new flash.text.TextField();
        flash.Lib.current.addChild(txt);
        txt.width = 600;
        txt.height = 600;
        haxe.Log.trace = function (x:Dynamic, ?y) txt.text += Std.string(x)+"\n";

        var space = new Space(Vec2.get(0, 0));
        var space2 = new Space(Vec2.get(0, 0));

        var player = new Body();
        player.position.setxy(200, 300);
        player.shapes.add(new Polygon(Polygon.box(40, 1)));
        player.space = space;
        var player2 = new Body();
        player2.position.setxy(400, 300);
        player2.shapes.add(new Polygon(Polygon.box(40, 1)));
        player2.space = space2;

        flash.Lib.current.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (_) {
            var c = flash.Lib.current;
            var b = new Body(BodyType.STATIC);
            b.shapes.add(new Polygon(Polygon.box(20, 20)));
            b.position.setxy(c.mouseX, c.mouseY);
            b.space = space;
            var b = new Body(BodyType.STATIC);
            b.shapes.add(new Polygon(Polygon.box(20, 20)));
            b.position.setxy(c.mouseX+200, c.mouseY);
            b.space = space2;
        });

        (new haxe.Timer(6)).run = function () {
            debug.clear();

            space2.step(1/180);
            space2.step(1/180);
            space2.step(1/180);
            debug.draw(space2);
            space.step(1/180);
            space.step(1/180);
            space.step(1/180);
            debug.draw(space);
            debug.flush();
        };
    }
}
