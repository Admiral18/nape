package;

$(import);

#if cpp
class DummyNapeMain {
	static function main() {}
}
#elseif swc
class DummyNapeMain {
	static function main() {}
}

#else 
class DummyNapeMain {
	static public var debug:Debug;
	static function main() {
        var c = flash.Lib.current;
        haxe.Log.setColor(0xffffff);

		//var space = new Space(new Vec2(0,400),Broadphase.SWEEP_AND_PRUNE);
		var space = new Space(new Vec2(0,400),Broadphase.DYNAMIC_AABB_TREE);
		/*var*/ debug = new BitmapDebug(600,600,0x333333);
        c.addChild(debug.display);
		
        var txt = new flash.text.TextField();
        txt.x = 20;
        txt.defaultTextFormat = new flash.text.TextFormat(null,null,0xffffff);
        c.addChild(txt);

        var pt = flash.Lib.getTimer();
		txt.x = 300;
        txt.width = 600;
        txt.height = 600;
        txt.selectable = false;

        debug.drawConstraints = true;
        c.stage.quality = flash.display.StageQuality.LOW;

		var walls = new Body(BodyType.STATIC);
		walls.shapes.add(new Polygon(Polygon.rect(0,550,600,50)));
		walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
		walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
		walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		walls.space = space;

		for(i in 0...300) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(16,16)));
			var xi = i%18;
			var yi =Std.int( (i-xi)/18);
			b.position.setxy(50+xi*16,50+yi*16);
			b.space = space;
		}

		for(X in 0...0) {
				var px = 300-150 + 150*X;
	
		var tri = new Body(BodyType.STATIC);
		tri.shapes.add(new Polygon(Polygon.regular(50,50,3)));
		tri.position.setxy(px,300);
		tri.space = space;

		var ball = new Body();
		ball.shapes.add(new Circle(25));

		var pre = tri;
		for(i in 0...20) {
			var link = new Body();
			link.shapes.add(new Circle(4));
			link.space = space;
			link.position.setxy(px+25,300+(i+1)*8);

			var a1 = if(pre==tri) new Vec2(25,0) else new Vec2(0,4);
			var con = new PivotJoint(pre,link,a1,new Vec2(0,-4));
			con.space = space;
			con.ignore = true;
			pre = link;
		}
//		ball.shapes.at(0).material.density /= 4;
		ball.position.setxy(px+25,300+20*8+4+12.5);
		ball.space = space;
		var con = new PivotJoint(pre,ball,new Vec2(0,4), new Vec2(0,-25));
		con.space = space;
		con.ignore = true;
		}

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());
		mcon.stiff = false;
		mcon.maxForce = 50000;
		mcon.active = false;
		mcon.space = space;

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = new Vec2(c.mouseX,c.mouseY);
			var bods = space.bodiesUnderPoint(pv);
			var bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var mbody = new Body();
		var mshape:Shape = null;
		mbody.shapes.add(mshape = new Polygon(Polygon.regular(50,70,4,0.3)));
//		mbody.shapes.add(mshape = new Circle(40));

		var tim = new haxe.Timer(0);
        tim.run = function() {
            var ct = flash.Lib.getTimer();
            var dt = (ct-pt)/1000;
            txt.text = "fps: "+Std.string(1/dt).substr(0,5);
            pt = ct;

            debug.clear();
			mcon.anchor1.setxy(c.mouseX,c.mouseY);
            space.step(1/40,40,40);
            
            #if NAPE_TIMES var pt = flash.Lib.getTimer(); #end
            debug.draw(space);
            #if NAPE_TIMES Debug.DRAW += flash.Lib.getTimer()-pt; #end

            #if NAPE_TIMES
                txt.text += "\n\n"+Debug.TIMES(space);
            #end

			debug.draw(mbody);
			mbody.position.setxy(c.mouseX,c.mouseY);
			mbody.rotation += 1/100;
			var bods = space.shapesInShape(mshape);
//			var bods = space.shapesInCircle(mshape.worldCOM,mshape.circle.radius);
			for(b in bods) {
				debug.drawCircle(b.worldCOM,4,0xffffff);
			}

            debug.flush();
		}
	}
}
#end
