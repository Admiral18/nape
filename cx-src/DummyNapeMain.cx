
package;
$(import);


class DummyNapeMain {
    public static var debug:Debug;
    static function mains() {
        var b1 = new Body(BodyType.STATIC);
        b1.shapes.add(new Polygon(Polygon.rect(0, 100, 100, 100)));

        var b2 = new Body();
        b2.shapes.add(new Polygon(Polygon.box(100, 10)));
        b2.rotation = 0.4;

        b2.position.x = 50;
        b2.position.y = 101 - (b2.bounds.max.y - b2.position.y);

        b2.angularVel = -100;

        trace(b2.shapes.at(0).castPolygon.worldVerts);
        var s = new Space();
        b1.space = b2.space = s;

        s.step(1, 10, 10);
    }

    static function main() {
        var stage = flash.Lib.current.stage;
        var s = new Space(new Vec2(0, 400), Broadphase.SWEEP_AND_PRUNE);

        var t = new flash.text.TextField();
        flash.Lib.current.addChild(t);

        debug = new BitmapDebug(600,600,0xffffff);
        flash.Lib.current.addChild(debug.display);

        var b = new Body(BodyType.KINEMATIC);
        b.shapes.add(new Circle(10, new Vec2(100, 100)));
        b.shapes.add(new Circle(10, new Vec2(200, 100)));
        b.shapes.add(new Circle(10, new Vec2(300, 100)));
        b.shapes.add(new Circle(10, new Vec2(400, 100)));
        b.velocity.y = 100;
        b.space = s;

        var b = new Body(BodyType.KINEMATIC);
        b.shapes.add(new Circle(10, new Vec2(0, 0)));
        b.position.x = 0;
        b.position.y = 100;
        b.velocity.x = 100;
        b.velocity.y = 100;

        var f = function() {
            debug.clear();
            b.position.setxy(stage.mouseX, stage.mouseY);
//            s.step(1/60, 10, 10);
            debug.draw(s);

            var res = s.convexMultiCast(b.shapes.at(0), 5, true);
            for (result in res)
            {
                var b2 = result.shape.body;
                b.integrate(result.toi);
                b2.integrate(result.toi);
                debug.draw(b);
                debug.draw(b2);
                debug.drawCircle(result.position, 2, 0xff0000);
                debug.drawLine(result.position, result.position.add(result.normal.mul(10)), 0xff0000);
                b.integrate(-result.toi);
                b2.integrate(-result.toi);
            }

            debug.flush();
        };
        (new haxe.Timer(0)).run = f;
        f();
    }
}

/*
package;
$(import);


class DummyNapeMain {
    public static var debug:Debug;
    static function main() {
        var b1 = new Body();
        b1.shapes.add(new Polygon(Polygon.box(1, 400)));
//        b1.shapes.add(new Circle(40, new Vec2(100, 0)));

        debug = new ShapeDebug(1, 1);
        flash.Lib.current.addChild(debug.display);

        var b2 = new Body();
        b2.shapes.add(new Polygon(Polygon.box(1, 40)));
//        b2.shapes.add(new Circle(40, new Vec2(100, 0)));
        //b2.shapes.add(new Circle(40, new Vec2(-40, 0)));
        b2.position.x = b2.position.y = 300;

        (new haxe.Timer(0)).run = function () {
            b1.position.x = flash.Lib.current.mouseX;
            b1.position.y = flash.Lib.current.mouseY;
            b1.rotation = 0;

            b2.position.x = b2.position.y = 300;
            b2.rotation = 0;

//            b1.velocity.x = -150;
//            b1.velocity.y = 150;
//            b1.angularVel = -Math.PI;

            b2.velocity.x = 50;
            b2.velocity.y = 50;
            b2.angularVel = Math.PI*10;
            b2.angularVel = min(b2.angularVel, Math.PI*2/2);

            debug.clear();
            debug.draw(b1);
            debug.draw(b2);

            for(s1 in b1.shapes)
            {
                for (s2 in b2.shapes)
                {
                    s1.pr(inner).validate_aabb();
                    s2.pr(inner).validate_aabb();
                    s1.pr(inner).validate_sweepRadius();
                    s2.pr(inner).validate_sweepRadius();
                    if (s1.pr(inner).isPolygon()) s1.pr(inner).polygon.validate_gaxi();
                    if (s2.pr(inner).isPolygon()) s2.pr(inner).polygon.validate_gaxi();
                }
            }

            var toi = new PR(ToiEvent)();
            toi.s2 = b1.shapes.at(0).pr(inner);
            toi.s1 = b2.shapes.at(0).pr(inner);
            b1.pr(inner).sweepTime = 0;
            b2.pr(inner).sweepTime = 0;
            PR(SweepDistance).staticSweep(toi, 2, 0, 2);
            if (toi.toi < 0) {
                b1.pr(inner).sweepIntegrate(2);
                b1.pr(inner).sweepValidate(toi.s2);
                b2.pr(inner).sweepIntegrate(2);
                b2.pr(inner).sweepValidate(toi.s1);
            }
            else {
                debug.drawCircle(toi.c1.wrapper(), 2, 0xff0000);
                debug.drawCircle(toi.c2.wrapper(), 2, 0xff00);
            }

            b1.worldCOM;
            b2.worldCOM;
            debug.draw(b1);
            debug.draw(b2);

            debug.flush();
        }
    }
}*/
