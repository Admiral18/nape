package;

$(import);

#if cpp
class DummyNapeMain {
	static function main() {
		var w = 600;
		var h = 600;
		var fps = 60;
		var bgColor = 0x333333;
		var flags =
			nme.Lib.BORDERLESS |
			nme.Lib.HARDWARE |
			nme.Lib.VSYNC |
			0;
		var name = "Test Nape hxcpp/nme";

		nme.Lib.create(function() { new DummyNapeMain(); },w,h,fps,bgColor,flags,name);
	}

	function new() {
		var c = nme.Lib.current;
		var space = new Space(new Vec2(0,400));
		var debug = new ShapeDebug(600,600,0x333333);
		c.addChild(debug.display);

		var walls = new Body(BodyType.STATIC);
		walls.shapes.add(new Polygon(Polygon.rect(0,550,600,50)));
		walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
		walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
		walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		walls.space = space;

/*		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			b.space = space;
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
		}*/

		for(i in 0...800) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(13,13)));
			var xi = i%32;
			var yi =Std.int( (i-xi)/32);
			b.position.setxy(50+xi*15,50+yi*15);
			b.space = space;
		}

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());
		mcon.stiff = false;
		mcon.maxForce = 50000;
		mcon.active = false;
		mcon.space = space;

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = new Vec2(c.mouseX,c.mouseY);
			var bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim = new haxe.Timer(0);
        tim.run = function() {

            debug.clear();

			mcon.anchor1.setxy(c.mouseX,c.mouseY);
            space.step(1/60,6,6);
            
            debug.draw(space);
            debug.flush();
		}

	}
}
#elseif swc
class DummyNapeMain {
	static function main() {}
}

#else 

class Tracer {
	static public function trace(objs:Array<Dynamic>,txt:flash.text.TextField) {
		var dict_id = 0;
		var stack = [];
		var dict = new flash.utils.Dictionary(false);
		var idl = [];

		$(mixin pushobj(i) ({
			if((untyped dict[i])!=null) (untyped dict[i]).id;
			else {
				var o = { id: dict_id++, obj:i, refs:[] };
				untyped dict[i] = o;
				stack.push(o);
				idl.push(o);
				o.id;
			}
		}));

		for(i in objs) pushobj(i);
		var tim = new haxe.Timer(0);

		var fcnt = 0;
		var finish = function() {	
			var pt = flash.Lib.getTimer();
			var buf = "";
			while(flash.Lib.getTimer()-pt <= 50) {
				if(fcnt >= idl.length) {
					txt.text += buf+"\n\nDONE";
					txt.scrollV = txt.maxScrollV;
					tim.stop();
					return;
				}
				var i = idl[fcnt++];
				buf += "id: "+i.id+" refs:"+Std.string(i.refs)+" = "+Std.string(i.obj)+"\n";
			}
			txt.text += buf;
			txt.scrollV = txt.maxScrollV;
		}
		
		var cnnt = 0;
		tim.run = function() {
			txt.text = "running: stack size="+stack.length+" cnt="+cnnt;

			if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

			var pt = flash.Lib.getTimer();
			while(flash.Lib.getTimer()-pt <= 50) {
				if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

				var cur = stack.shift();
				cnnt++;
				var cls = Type.getClass(cur.obj);
				for(o in Type.getInstanceFields(cls)) {
					var field:Dynamic = Reflect.field(cur.obj, o);
					if(field!=null && Reflect.isObject(field)) {
						cur.refs.push({ name:o, id:	pushobj(field) });
					}
				}
			}
		}
	}
}

class DummyNapeMain {
	static public var debug:Debug;

	static function mains() {
		var debug = new BitmapDebug(600,600,0xffffff);
		var grav = new Vec2(0,20*30);
		var world = new Space(grav);

		var dyn = new Body();
		dyn.position.setxy(100,100);
		var filter = new InteractionFilter(1,-1);
		var mat = new Material(0.1,0.5,0.5,0.5,0.1);
		mat.shared = true;

		var shape:Shape = new Circle(10, new Vec2(0,0), mat,filter);
		dyn.type = BodyType.DYNAMIC;
		dyn.allowRotation = false;
		dyn.gravMass = 0;
		dyn.shapes.add(shape);
		world.bodies.add(dyn);

		filter = new InteractionFilter(128,0);
		var anchor = new Body();
		anchor.position.setxy(20,200);
		anchor.type = BodyType.STATIC;
		shape = new Polygon(Polygon.box(100,100), mat,filter);
		anchor.shapes.add(shape);
		world.bodies.add(anchor);

		var joint = new LineJoint(anchor,dyn,new Vec2(),new Vec2(),new Vec2(1,0),0,2000);
		world.constraints.add(joint);

		var c = flash.Lib.current;
		c.addChild(debug.display);

		var tim = new haxe.Timer(Std.int(1000/60));
		tim.run = function() {
			world.step(1/60,37,37);

			var mat = new Mat23();
			debug.transform = mat;
			debug.clear();
			debug.draw(world);
			debug.flush();
		}

		haxe.Timer.delay(function(){
			joint.space = null; 
			anchor.space = null;
			dyn.space = null;
		},1000);
	}

	static function main() {
		var c = flash.Lib.current;
		haxe.Log.setColor(0xffffff);

		var space = new Space(new Vec2(0,600));

		var debug = new BitmapDebug(600,600,0x333333);
		c.addChild(debug.display);

		var border = new Body(BodyType.STATIC);
		border.shapes.add(new Polygon(Polygon.rect(0,0,-40,600)));
		border.shapes.add(new Polygon(Polygon.rect(600,0,40,600)));
		border.shapes.add(new Polygon(Polygon.rect(0,0,600,-40)));
		border.shapes.add(new Polygon(Polygon.rect(0,600,600,40)));
		border.space = space;

		var gp:GeomPoly = null;
		var pre:Vec2 = null;
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (_) {
			gp = new GeomPoly();
			gp.push(pre = Vec2.get(c.mouseX,c.mouseY));
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (_) {
			if(gp!=null && gp.size()>3) {
				var polys = gp.simplify(5).simple_decomposition();
				for(p in polys) {
					var body = new Body();
					var cons = p.convex_decomposition();
					for(c in cons) {
						body.shapes.add(new Polygon(c));
						c.clear();
					}
					body.align();
					body.space = space;
					p.clear();
				}
			}
			gp = null;
		});

	        var txt = new flash.text.TextField();
	        txt.defaultTextFormat = new flash.text.TextFormat("Courier New",null,0xffffff);
	        txt.width = txt.height = 600;
	        txt.selectable = false;
		txt.multiline = true;
	        c.addChild(txt);

		(new haxe.Timer(0)).run = function() {
			debug.clear();

			if(gp!=null) {
				var cur = Vec2.get(c.mouseX,c.mouseY);
				if(cur.sub(pre).length>5) {
					gp.push(cur);
					pre = cur;
				}
				debug.drawPolygon(gp,0x505050);

				var gp2 = gp.simplify(10);
				debug.drawPolygon(gp2,0x808080);
			}

			space.step(1/60,20,10);
			debug.draw(space);
			debug.flush();

			txt.text = "";
			#if NAPE_POOL_STATS
				txt.text += PR(POOL_STATS).dump();
			#end
			#if NAPE_TIMES
				txt.text += Debug.TIMES(space);
			#end
		}
	}



	static function mainset() {
		var c = flash.Lib.current;

		var P = [];
		trace(Debug.version());

		$(mixin v2(x,y) Vec2.get(x,y));

//		P = [v2(0,0),v2(200,0),v2(200,200),v2(100,200),v2(110,175),v2(100,150),v2(150,150),v2(150,50),v2(50,50),v2(50,150),v2(100,150),v2(110,175),v2(100,200),v2(0,200)];	

//		P = [v2(0,0),v2(300,0),v2(300,100),v2(200,100),v2(100,200),v2(80,200),v2(50,300),v2(80,200),v2(100,200),
//			 v2(200,100),v2(300,100),
//			 v2(300,300),v2(150,300),v2(150,400),v2(-50,400)];
//		P = [v2(0,0),v2(300,0),v2(300,200),v2(260,100),v2(225,150),v2(235,100),v2(227,50),v2(225,150),v2(260,100),v2(300,200),v2(300,300),v2(0,300)];
//		P = [v2(0,0),v2(300,0),v2(300,300),v2(100,300),v2(100,200),v2(200,200),v2(200,100),v2(100,100),v2(100,200),v2(0,200)];

//		P = [v2(0,0),v2(500,0),v2(500,200),v2(400,200),v2(400,100),v2(300,100),v2(300,200),v2(200,200),v2(200,100),v2(100,100),v2(100,300),v2(200,300),v2(200,200),v2(300,200),v2(300,300),v2(400,300),v2(400,200),v2(500,200),v2(500,400),v2(0,400)];

		debug = new BitmapDebug(600,600,0xFFFFFF);
		debug.clear();
		debug.transform.tx = 100;
		debug.transform.ty = 100;
		c.addChild(debug.display);

		var sdebug = new ShapeDebug(600,600,0xFFFFFF);
		c.addChild(sdebug.display);
		sdebug.display.alpha = 0.5;

        var txt = new flash.text.TextField();
        txt.defaultTextFormat = new flash.text.TextFormat("Courier New",null,0);
        c.addChild(txt);
        txt.width = 600;
        txt.height = 600;
        txt.selectable = false;
		txt.multiline = true;

		$(mixin colour() {
			var col = Std.int(0x80*Math.random())+0x60;
			var col1 = Std.int(0x80*Math.random())+0x60;
			var col2 = Std.int(0x80*Math.random())+0x60;
			col | (col1<<16) | (col2<<8);
		});

		$(mixin scalec(col) {
			var fact = Math.random()*0.2+0.8;
			var r = Std.int((col>>16)*fact);
			var g = Std.int(((col>>8)&0xff)*fact);
			var b = Std.int(((col)&0xff)*fact);
			(r<<16) | (g<<8) | (b);
		});
	
		if(P.length>0) {
		debug.drawPolygon(P,0xff0000);
		debug.flush();

//		debug.drawFilledPolygon(P,0x808080);
//		for(p in (new GeomPoly(P)).convex_decomposition()) debug.drawFilledPolygon(p.toArray(),colour);
		for(p in (new GeomPoly(P)).monotone_decomposition()) {
			var col = colour;
//			for(q in p.convex_decomposition()) debug.drawFilledPolygon(q.toArray(),scalec(col));
		}

		debug.drawPolygon(P,0xff0000);
		var index = 0;
		for(p in P)
			debug.drawFilledCircle(p,2,0xffff);
		debug.flush();
		}

//		for(p in (new GeomPoly(P)).monotone_decomposition()) debug.drawPolygon(p.toArray(),0xffffff);
//		debug.flush();
		debug.transform.setAs();
		P = [];
//P = [Vec2.get(208,317),Vec2.get(184,290),Vec2.get(155,247),Vec2.get(132,197),Vec2.get(134,148),Vec2.get(157,128),Vec2.get(179,114),Vec2.get(207,107),Vec2.get(238,107),Vec2.get(269,125),Vec2.get(281,149),Vec2.get(264,168),Vec2.get(235,159),Vec2.get(219,137),Vec2.get(204,107),Vec2.get(212,83),Vec2.get(250,58),Vec2.get(283,52),Vec2.get(312,52),Vec2.get(346,59),Vec2.get(395,76),Vec2.get(445,97),Vec2.get(474,123),Vec2.get(484,155),Vec2.get(491,196),Vec2.get(486,235),Vec2.get(474,266),Vec2.get(447,293),Vec2.get(414,308),Vec2.get(380,315),Vec2.get(348,313),Vec2.get(299,298),Vec2.get(253,277),Vec2.get(219,244),Vec2.get(194,218),Vec2.get(176,193),Vec2.get(166,162),Vec2.get(159,135),Vec2.get(158,109),Vec2.get(165,82),Vec2.get(184,56),Vec2.get(208,48)];
//P=[Vec2.get(217,387),Vec2.get(210,362),Vec2.get(196,321),Vec2.get(194,295),Vec2.get(194,261),Vec2.get(195,232),Vec2.get(206,199),Vec2.get(220,175),Vec2.get(250,157),Vec2.get(285,157),Vec2.get(317,174),Vec2.get(333,195),Vec2.get(332,226),Vec2.get(326,255),Vec2.get(322,285),Vec2.get(329,322),Vec2.get(351,346),Vec2.get(385,349),Vec2.get(411,312),Vec2.get(412,283),Vec2.get(409,249),Vec2.get(400,216),Vec2.get(388,186),Vec2.get(372,149),Vec2.get(362,119),Vec2.get(379,96),Vec2.get(410,99),Vec2.get(420,122),Vec2.get(430,161),Vec2.get(435,189),Vec2.get(435,217),Vec2.get(435,246),Vec2.get(433,277),Vec2.get(444,306),Vec2.get(469,316),Vec2.get(488,287),Vec2.get(499,241),Vec2.get(501,209),Vec2.get(501,175),Vec2.get(494,150),Vec2.get(484,126),Vec2.get(477,92),Vec2.get(478,54),Vec2.get(503,72),Vec2.get(536,131),Vec2.get(560,183),Vec2.get(568,226),Vec2.get(566,270),Vec2.get(564,314),Vec2.get(564,345),Vec2.get(564,380),Vec2.get(566,416),Vec2.get(567,445),Vec2.get(567,477),Vec2.get(554,506),Vec2.get(516,517),Vec2.get(480,521),Vec2.get(451,528),Vec2.get(418,529),Vec2.get(384,529),Vec2.get(338,524),Vec2.get(301,517),Vec2.get(250,512),Vec2.get(220,513),Vec2.get(187,513),Vec2.get(161,508),Vec2.get(134,491),Vec2.get(102,466),Vec2.get(71,434),Vec2.get(62,403),Vec2.get(59,368),Vec2.get(60,327),Vec2.get(71,281),Vec2.get(82,243),Vec2.get(91,213),Vec2.get(102,188),Vec2.get(113,159),Vec2.get(118,129),Vec2.get(122,98),Vec2.get(128,67),Vec2.get(150,51),Vec2.get(175,55),Vec2.get(188,78),Vec2.get(187,112),Vec2.get(178,142),Vec2.get(162,183),Vec2.get(149,228),Vec2.get(137,272),Vec2.get(132,318),Vec2.get(132,366),Vec2.get(135,392),Vec2.get(143,417),Vec2.get(156,442),Vec2.get(184,453),Vec2.get(211,454),Vec2.get(236,440),Vec2.get(246,404),Vec2.get(248,365),Vec2.get(239,320),Vec2.get(228,287),Vec2.get(233,260),Vec2.get(252,242),Vec2.get(274,230),Vec2.get(307,239),Vec2.get(333,256),Vec2.get(350,276),Vec2.get(358,309),Vec2.get(356,342),Vec2.get(358,368),Vec2.get(372,405),Vec2.get(397,423),Vec2.get(423,420),Vec2.get(447,400),Vec2.get(448,374),Vec2.get(438,350),Vec2.get(424,323),Vec2.get(419,295),Vec2.get(416,267),Vec2.get(419,240),Vec2.get(431,217),Vec2.get(453,204)];

//P = [v2(100,100),v2(300,100),v2(300,300),v2(200,100),v2(100,300)];
//P = [v2(100,100),v2(300,100),v2(300,300),v2(200,100),v2(100,300),v2(250,150),v2(350,200),v2(284,225)];
//P = [v2(100,100),v2(300,100),v2(300,300),v2(150,150),v2(250,150),v2(100,300)];

//P = [v2(100,100),v2(200,100),v2(150,150),v2(100,200),v2(200,200),v2(150,150)];
P = [v2(100,100),v2(200,100),v2(100,200),v2(200,200),v2(125,125),v2(125,150),v2(175,150)];
		var mdown = false;
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (_) {
			mdown = true;
			P.push(new Vec2(c.mouseX,c.mouseY));
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function(_) { mdown = false; P = []; });

		var tim = new haxe.Timer(0);
		var pl = P.length*0;
		tim.run = function() {
			if(mdown) {
				var p = new Vec2(c.mouseX,c.mouseY);
				if(p.sub(P[P.length-1]).length>5) P.push(p);
			}

			if(P.length>=3 && P.length!=pl) {
				pl = P.length;
				debug.clear();

//		if((new GeomPoly(P)).isSimple())
//			PR(Simple).decompose((new GeomPoly(P)).pr(inner).vertices);
//try {
		var ps = (new GeomPoly(P)).simple_decomposition();
		debug.drawFilledPolygon(P,0xff00);
		debug.flush();
		
		tim.stop(); return;


//		sdebug.clear();
//		sdebug.drawFilledPolygon(P,0xff0000);
//		sdebug.drawPolygon(P,0xff00ff);
try{
					}catch(e:Dynamic) {
						tim.stop();

						var ret = Std.string(e);

						ret += "\n\n[";
						var fst = true;
						for(i in P) {
							if(!fst) ret += ",";
							fst = false;
							ret += "Vec2.get("+i.x+","+i.y+")";
						}
						ret += "]";
						throw ret;

						throw e;
					}
/*
		for(poly in (new GeomPoly(P)).simple_decomposition()) {
			var col = colour;
			for(p in poly.monotone_decomposition()) {
				for(q in p.convex_decomposition()) debug.drawFilledPolygon(q.toArray(),scalec(col));
			}
		}
		debug.drawPolygon(P,0x0);
		debug.flush();*/
/*

//				debug.drawFilledPolygon(P,0x808080);
//				debug.drawPolygon(P,((new GeomPoly(P)).isSimple()) ? 0xff0000 : 0xffffff);
//				for(i in P) debug.drawCircle(i,1.5,0xff8000);
//				if((new GeomPoly(P)).isSimple()) {
//					try {
//					var polys = new GeomPoly(P).monotone_decomposition();
//					for(p in polys) debug.drawPolygon(p.toArray(),0xff00);

//					var polys = new GeomPoly(P).convex_decomposition();
//					for(p in polys) debug.drawPolygon(p.toArray(),0xffff00);
/*					}catch(e:Dynamic) {
						tim.stop();

						var ret = "[";
						var fst = true;
						for(i in P) {
							if(!fst) ret += ",";
							fst = false;
							ret += "Vec2.get("+i.x+","+i.y+")";
						}
						ret += "]";
						throw ret;

						throw e;
					}*/
//				}
				debug.flush();

			txt.text = "";
			#if NAPE_POOL_STATS
				txt.text += PR(POOL_STATS).dump()+"\n";
			#end

			}
		};
	}


	static function mainsp() {
        var c = flash.Lib.current;
        haxe.Log.setColor(0xffffff);

//		var space = new Space(new Vec2(0,400),Broadphase.SWEEP_AND_PRUNE);
		var space = new Space();
		/*var*/ debug = new BitmapDebug(600,600,0x333333);
//		/*var*/ debug = new ShapeDebug(600,600,0x333333);
        c.addChild(debug.display);
//		debug.cullingEnabled = true;

        var txt = new flash.text.TextField();
        txt.defaultTextFormat = new flash.text.TextFormat("Courier New",null,0xffffff);
        c.addChild(txt);
        txt.width = 600;
        txt.height = 600;
        txt.selectable = true;
		txt.multiline = true;

        var pt = flash.Lib.getTimer();

//        debug.drawConstraints = true;
        c.stage.quality = flash.display.StageQuality.LOW;

		var bb = new Body();
		bb.shapes.add(new Circle(10));
		bb.space = space;

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());

		mcon.stiff = false;
		mcon.maxForce = 50000;
//		var mcon:Dynamic = null;

		var init = function() {
//			var bods = space.bodies.copy();

			space.clear();
			space.gravity.setxy(0,400);
/*
			for(b in bods) {
				b.space = space;
				if(b.isDynamic()) {
					b.velocity.y -= 50;
					b.rotation += 1;
				}
			}
			bods.clear();

			mcon.active = false;
			mcon.space = space;*/
//		}

		var walls = new Body(BodyType.STATIC);
		for(i in 0...10) {
			walls.clear();
			walls.shapes.add(new Polygon(Polygon.rect(-9*5+i*5,550,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
			walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		}
		walls.space = space;
	
		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			space.bodies.add(b);
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
		}

		var pre:Body = null;	
		for(i in 0...450) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(16,16)));
			var xi = i%18;
			var yi =Std.int( (i-xi)/18);
			b.position.setxy(50+xi*16,50+yi*16);
			b.space = space;

            if(pre!=null && false) {
				var mid = pre.position.add(b.position).muleq(0.5);
				space.constraints.add(new PivotJoint(pre,b,pre.worldToLocal(mid),b.worldToLocal(mid)));
			}

			pre = b;
			if((i+1)%18==0) pre = null;
		}

		mcon.active = false;
		mcon.space = space;
	}

		var mat:Mat23 = new Mat23();

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = mat.inverse_transform(new Vec2(c.mouseX,c.mouseY));
			var bods:BodyList = null;
			bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim2 = new haxe.Timer(3000); //5000
		tim2.run = function() { for(i in 0...10) init(); }
//		tim2.run = function() { init(); }
		init();
//		Tracer.trace([space],txt);
//		return;

		var tim2 = new haxe.Timer(100); //1000
/*		tim2.run = function () { 
			mat = new Mat23(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,Math.random()*100-50,Math.random()*100-50).equiorthogonalise();
			mat = Mat23.translation(-300,-300).concat(mat).concat(Mat23.translation(300,300));	
		}*/

		var tim = new haxe.Timer(0);

        tim.run = function() {
            var ct = flash.Lib.getTimer();
            var dt = (ct-pt)/1000;
            pt = ct;

            debug.clear();
			mcon.anchor1.set(mat.inverse_transform(new Vec2(c.mouseX,c.mouseY)));

			if(!space.dynamics.empty()) {
				var b = space.dynamics.at(Std.int(space.dynamics.length*Math.random()));
				b.space = null;
				while(!b.constraints.empty()) {
					b.constraints.at(0).space = null;
				}
			}

            space.step(1/40,8,4);
            
            #if NAPE_TIMES var pt = flash.Lib.getTimer(); #end
			debug.transform = mat;
            debug.draw(space);
            #if NAPE_TIMES Debug.DRAW += flash.Lib.getTimer()-pt; #end

			txt.text = "";
			#if NAPE_POOL_STATS
				txt.text += PR(POOL_STATS).dump()+"\n";
			#end

            txt.text += "fps: "+Std.string(1/dt).substr(0,5)+"\n";

            #if NAPE_TIMES
                txt.text += "\n"+Debug.TIMES(space);
            #end

			var prec = function(x:Float,y:Int) {
				return Std.string(Std.int(x*Math.pow(10,y))*Math.pow(10,-y));
			}
			var mem = function(x:Float) {
				if(x<1024) return Std.string(x)+"B";
				else if(x<1024*1024) return prec(x/1024,2)+"KiB";
				else                 return prec(x/1024/1024,2)+"MiB";
			};

			txt.text += "\n\nMAX: "+mem(flash.system.System.totalMemory);
			txt.text +=   "\nCUR: "+mem(flash.system.System.totalMemory-flash.system.System.freeMemory);

            debug.flush();
		}
	}
}
#end
