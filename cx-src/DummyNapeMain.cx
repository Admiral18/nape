package;

$(import);

#if cpp
class DummyNapeMain {
	static function main() {
		var w = 600;
		var h = 600;
		var fps = 60;
		var bgColor = 0x333333;
		var flags =
			nme.Lib.BORDERLESS |
			nme.Lib.HARDWARE |
			nme.Lib.VSYNC |
			0;
		var name = "Test Nape hxcpp/nme";

		nme.Lib.create(function() { new DummyNapeMain(); },w,h,fps,bgColor,flags,name);
	}

	function new() {
		var c = nme.Lib.current;
		var space = new Space(new Vec2(0,400));
		var debug = new ShapeDebug(0x333333);
		c.addChild(debug.display);

		var walls = new Body(BodyType.STATIC);
		for(i in 0...10) {
			walls.clear();
			walls.shapes.add(new Polygon(Polygon.rect(0,550,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
			walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		}
		walls.space = space;

		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			b.space = space;
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
		}

		for(i in 0...1000) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(15,15)));
			var xi = i%32;
			var yi =Std.int( (i-xi)/32);
			b.position.setxy(50+xi*15,50+yi*15);
			b.space = space;
		}

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());
		mcon.stiff = false;
		mcon.maxForce = 50000;
		mcon.active = false;
		mcon.space = space;

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = new Vec2(c.mouseX,c.mouseY);
			var bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim = new haxe.Timer(0);
        tim.run = function() {

            debug.clear();

			mcon.anchor1.setxy(c.mouseX,c.mouseY);
            space.step(1/60,6,6);
            
            debug.draw(space);
            debug.flush();
		}

	}
}
#elseif swc
class DummyNapeMain {
	static function main() {}
}

#else 

class Tracer {
	static public function trace(objs:Array<Dynamic>,txt:flash.text.TextField) {
		var dict_id = 0;
		var stack = [];
		var dict = new flash.utils.Dictionary(false);
		var idl = [];

		$(mixin pushobj(i) ({
			if((untyped dict[i])!=null) (untyped dict[i]).id;
			else {
				var o = { id: dict_id++, obj:i, refs:[] };
				untyped dict[i] = o;
				stack.push(o);
				idl.push(o);
				o.id;
			}
		}));

		for(i in objs) pushobj(i);
		var tim = new haxe.Timer(0);

		var fcnt = 0;
		var finish = function() {	
			var pt = flash.Lib.getTimer();
			var buf = "";
			while(flash.Lib.getTimer()-pt <= 50) {
				if(fcnt >= idl.length) {
					txt.text += buf+"\n\nDONE";
					txt.scrollV = txt.maxScrollV;
					tim.stop();
					return;
				}
				var i = idl[fcnt++];
				buf += "id: "+i.id+" refs:"+Std.string(i.refs)+" = "+Std.string(i.obj)+"\n";
			}
			txt.text += buf;
			txt.scrollV = txt.maxScrollV;
		}
		
		var cnnt = 0;
		tim.run = function() {
			txt.text = "running: stack size="+stack.length+" cnt="+cnnt;

			if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

			var pt = flash.Lib.getTimer();
			while(flash.Lib.getTimer()-pt <= 50) {
				if(stack.length==0) { tim.run = finish; txt.text = ""; return; }

				var cur = stack.shift();
				cnnt++;
				var cls = Type.getClass(cur.obj);
				for(o in Type.getInstanceFields(cls)) {
					var field:Dynamic = Reflect.field(cur.obj, o);
					if(field!=null && Reflect.isObject(field)) {
						cur.refs.push({ name:o, id:	pushobj(field) });
					}
				}
			}
		}
	}
}

class DummyNapeMain {
	static public var debug:Debug;

	static function main() {
        var c = flash.Lib.current;
        haxe.Log.setColor(0xffffff);

//		var space = new Space(new Vec2(0,400),Broadphase.SWEEP_AND_PRUNE);
		var space = new Space(new Vec2(0,400));
		/*var*/ debug = new BitmapDebug(600,600,0x333333);
        c.addChild(debug.display);
	
        var txt = new flash.text.TextField();
        txt.defaultTextFormat = new flash.text.TextFormat("Courier New",null,0xffffff);
        c.addChild(txt);
        txt.width = 600;
        txt.height = 600;
        txt.selectable = true;
		txt.multiline = true;

        var pt = flash.Lib.getTimer();

        debug.drawConstraints = true;
        c.stage.quality = flash.display.StageQuality.LOW;

		var mcon = new PivotJoint(space.world,space.world, new Vec2(), new Vec2());
		mcon.stiff = false;
		mcon.maxForce = 50000;
//		var mcon:Dynamic = null;

		var init = function() {
//			var bods = space.bodies.copy();

			space.clear();
			space.gravity.setxy(0,400);
/*
			for(b in bods) {
				b.space = space;
				if(b.isDynamic()) {
					b.velocity.y -= 50;
					b.rotation += 1;
				}
			}
			bods.clear();

			mcon.active = false;
			mcon.space = space;*/
//		}

		var walls = new Body(BodyType.STATIC);
		for(i in 0...10) {
			walls.clear();
			walls.shapes.add(new Polygon(Polygon.rect(-9*5+i*5,550,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,600,50)));
			walls.shapes.add(new Polygon(Polygon.rect(0,0,50,600)));
			walls.shapes.add(new Polygon(Polygon.rect(550,0,50,600)));
		}
		walls.space = space;
	
		for(i in 0...4) {
			var b = new Body();
			var s = new Circle(60);
			s.fluidEnabled = true;
			s.fluidProperties.density = 2;
			s.material.density = 2;
			s.body = b;
			b.space = space;
			b.position.setxy(Math.random()*500+50,Math.random()*500+50);
			s.filter.fluidGroup = 2;
			s.filter.fluidMask = 1;
			s.filter.collisionGroup = 2;
			s.filter.collisionMask = 1;
		}
	
		for(i in 0...450) {
			var b = new Body();
			b.shapes.add(new Polygon(Polygon.box(16,16)));
			var xi = i%18;
			var yi =Std.int( (i-xi)/18);
			b.position.setxy(50+xi*16,50+yi*16);
			b.space = space;
		}

		mcon.active = false;
		mcon.space = space;
	}

		var mat:Mat23 = new Mat23();

		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function (ev) {
			var pv = mat.inverse_transform(new Vec2(c.mouseX,c.mouseY));
			var bods:BodyList = null;
			bods = space.bodiesUnderPoint(pv);
			for(b in bods) {
				if(b.isDynamic()) {
					mcon.body2 = b;
					mcon.anchor2 = b.worldToLocal(pv);
					mcon.active = true;
					break;
				}
			}
		});
		c.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, function (ev) {
			mcon.active = false;
		});
        
		var tim2 = new haxe.Timer(5000); //5000
		tim2.run = function() { init(); init(); init(); init(); init(); }
		init();
//		Tracer.trace([space],txt);
//		return;

		var tim2 = new haxe.Timer(1000); //1000
		tim2.run = function () { 
			mat = new Mat23(2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,2*Math.random()-1,Math.random()*100-50,Math.random()*100-50).equiorthogonalise();
			mat = Mat23.translation(-300,-300).concat(mat).concat(Mat23.translation(300,300));	
		}

		var tim = new haxe.Timer(0);
        tim.run = function() {
            var ct = flash.Lib.getTimer();
            var dt = (ct-pt)/1000;
            pt = ct;

            debug.clear();
			mcon.anchor1.set(mat.inverse_transform(new Vec2(c.mouseX,c.mouseY)));
            space.step(1/40,8,4);
            
            #if NAPE_TIMES var pt = flash.Lib.getTimer(); #end
            debug.draw(space, mat);
            #if NAPE_TIMES Debug.DRAW += flash.Lib.getTimer()-pt; #end

			txt.text = "";
			#if NAPE_POOL_STATS
				txt.text += PR(POOL_STATS).dump()+"\n";
			#end

            txt.text += "fps: "+Std.string(1/dt).substr(0,5)+"\n";

            #if NAPE_TIMES
                txt.text += "\n"+Debug.TIMES(space);
            #end

			var prec = function(x:Float,y:Int) {
				return Std.string(Std.int(x*Math.pow(10,y))*Math.pow(10,-y));
			}
			var mem = function(x:Float) {
				if(x<1024) return Std.string(x)+"B";
				else if(x<1024*1024) return prec(x/1024,2)+"KiB";
				else                 return prec(x/1024/1024,2)+"MiB";
			};

			txt.text += "\n\nMAX: "+mem(flash.system.System.totalMemory);
			txt.text +=   "\nCUR: "+mem(flash.system.System.totalMemory-flash.system.System.freeMemory);

            debug.flush();
		}
	}
}
#end
