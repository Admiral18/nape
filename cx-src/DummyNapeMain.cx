package;
$(import);


class DummyNapeMain {
    public static var debug:Debug;
    static function main() {
        var b1 = new Body();
        b1.shapes.add(new Polygon(Polygon.regular(100, 20, 4)));
        //b1.shapes.add(new Circle(40, new Vec2(100, 0)));

        debug = new ShapeDebug(1, 1);
        flash.Lib.current.addChild(debug.display);

        var b2 = new Body();
        b2.shapes.add(new Polygon(Polygon.regular(10, 120, 5)));
        //b2.shapes.add(new Circle(40, new Vec2(0, 0)));
        //b2.shapes.add(new Circle(40, new Vec2(-40, 0)));
        b2.position.x = b2.position.y = 300;

        (new haxe.Timer(0)).run = function () {
            b1.position.x = flash.Lib.current.mouseX;
            b1.position.y = flash.Lib.current.mouseY;
            b1.rotation = 0;

            b2.position.x = b2.position.y = 300;
            b2.rotation = 0;

            b1.velocity.x = -150;
            b1.velocity.y = 150;
            b1.angularVel = -Math.PI;

            b2.velocity.x = 50;
            b2.velocity.y = 50;
            b2.angularVel = Math.PI;

            debug.clear();
            debug.draw(b1);
            debug.draw(b2);

            for(s1 in b1.shapes)
            {
                for (s2 in b2.shapes)
                {
                    s1.pr(inner).validate_aabb();
                    s2.pr(inner).validate_aabb();
                    s1.pr(inner).validate_sweepRadius();
                    s2.pr(inner).validate_sweepRadius();
                    if (s1.pr(inner).isPolygon()) s1.pr(inner).polygon.validate_gaxi();
                    if (s2.pr(inner).isPolygon()) s2.pr(inner).polygon.validate_gaxi();
                }
            }

            var toi = new PR(ToiEvent)();
            toi.s1 = b1.shapes.at(0).pr(inner);
            toi.s2 = b2.shapes.at(0).pr(inner);
            b1.pr(inner).sweepTime = 0;
            b2.pr(inner).sweepTime = 0;
            PR(SweepDistance).dynamicSweep(toi, 2, 0, 2);
            if (toi.toi < 0) {
                b1.pr(inner).sweepIntegrate(2);
                b1.pr(inner).sweepValidate(toi.s1);
                b2.pr(inner).sweepIntegrate(2);
                b2.pr(inner).sweepValidate(toi.s2);
            }
            else {
                debug.drawCircle(toi.c1.wrapper(), 2, 0xff0000);
                debug.drawCircle(toi.c2.wrapper(), 2, 0xff00);
            }

            b1.worldCOM;
            b2.worldCOM;
            debug.draw(b1);
            debug.draw(b2);

            debug.flush();
        }
    }
}
