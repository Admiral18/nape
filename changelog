GeomPoly:
    forward_iterator renamed forwardIterator
    backwards_iterator renamed backwardsIterator
    skip_forward renamed skipForward
    skip_backwards renamed skipBackwards
    simple_decomposition renamed simpleDecomposition
    convex_decomposition renamed convexDecomposition
    triangular_decomposition renamed triangularDecomposition
    monotone_decomposition renamed monotoneDecomposition

    constructor, copy methods changed so that the current head of GeomPoly
    will point to the first vertex given.

AngleJoint:
    slack property removed, replaced with isSlack method

DistanceJoint
    slack property removed, replaced with isSlack method

CbType:
    Fixed bug so that constraints list correctly only tracks Constraints
    that have been added to a Space.

Vec2:
    fromPoint now included for nme target, not just flash
    Added Vec2::normalise and Vec2::unit methods

AABB:
    fromRect now included for nme target, not just flash

Mat23:
    set, setAs, reset methods now returns reference to 'this' instead of nothing.

NapeList's:
    removed debug errors when modifying a list whilst iterating. Not because doing
    so is safe (or ever has been), but because I realised that if iteration over a
    list is terminated early then the iterator will not be removed from the tracker
    and spurious errors were possible as well as potential GC issues.

    foreach and filter method now returns reference to 'this' instead of nothing
    filter method changed so that returning 'true' marks element for removal,
    instead of false. !!! <-- beware. This is changed to be more consistent with other API's.

UserConstraint:
    __destroy method to be overriden, renamed as __broken. (And fixed bug where it wouldn't
    have ever even been called :P)

    methods invalidate, bindVec2 and registerBody prefixed with similar __ prefixes to denote
    their private nature to sub-type of user constraint.

Arbiter:
    remove arbiter id, remove active property.

Contact:
    remove active property.

InteractionGroup:
    remove id property.

Space:
    remove id property.
    Modified the clear() method so that things like gravity, and globalLinearDrag are left
    untouched instead of being set to default.

Shape:
    Modify transformation methods to return reference to 'this' Shape.
    Removed static method copy in favour of member method.
    This method also has a bug fix for the recent changes in userData,
    instead of copying the userData object, a new userData object is created
    and has all it's fields instantiated to the same fields as that of the present
    userData.

Circle:
    Removed static method copy in favour of member method on Shape.

Polygon:
    Removed static method copy in favour of member method on Shape.

ValidationResult:
    Moved this class into its own file.

FluidProperties:
    Fix bug in copy for changes in userData so that field is copied
    properly alla Shape.
    Fix bug in copy so that gravity property is also copied.

Debug:
    Removed drawConstraintSprings/drawConstraintErrors properties as
    they are no longer used.
    Renamed bgColor bgColour to be consistent with british spelling used
    everywhere else.

Body:
    Removed clear method, can use body.shapes.clear() to remove all shapes.
    Removed graphic and related properties.
    Methods like normalImpulse now return a Vec3 instead of a Vec2 so angular
    information is no longer discarded. Necessarigly can no longer create a weak
    Vec2 as Vec3 cannot presently be defined weak.

Compound:
    Modified COM to get Vec2 from object pool, and permit weakly allocated return.

nape-hacks::ForcedSleep
    Added inline docs, and sleepCompound method.



TODO:
    Remove dependency on parsex for nape-symbolic... too unstable.

    Have Shape angDrag mutable.
    Have Arbiter/Contact restitution/friction values mutable.

    What to do with collisionArbiter/fluidArbiter properties? Inconsistent naming
    compared to castBody/castCompound/castShape/castCircle/castPolygon

    Continuos collision detection
        # Optimised versions of distance computation tied with contact computation
          to avoid use of GJK.

        # Kinematic objects? Maybe for first version ignore.
          Later should try and see what happens if we permit dynamic objects to sweep
          with kinematics, and have dynamic object be frozen whilst kinematic does it's
          business but insert arbiter/contact that will be used in following step
          to treat it as though dynamic object actually collided the kinematic object.

          This doesn't entirely stop tunneling, but will be a lot better than nothing.

        # Implement a convexCast ? convexMultiCast (linear, or full conservative advancement?)

     Consider once more moving geometric utilities to a module?
